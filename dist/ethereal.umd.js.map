{"version":3,"file":"ethereal.umd.js","sources":["../src/utils.ts","../src/metrics/QuickHull.js","../src/metrics/ConvexGeometry.ts","../src/metrics/SimplifyModifier.js","../src/metrics/SpatialMetrics.ts","../src/layout/Layout.ts","../node_modules/@popmotion/easing/dist/easing.es.js","../src/layout/Transitioner.ts","../node_modules/three-mesh-bvh/src/Utils/ThreeIntersectionUtilities.js","../node_modules/three-mesh-bvh/src/Utils/RayIntersectTriUtlities.js","../node_modules/three-mesh-bvh/src/Utils/ArrayBoxUtilities.js","../node_modules/three-mesh-bvh/src/Utils/SeparatingAxisBounds.js","../node_modules/three-mesh-bvh/src/Utils/MathUtilities.js","../node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js","../node_modules/three-mesh-bvh/src/Utils/OrientedBox.js","../node_modules/three-mesh-bvh/src/MeshBVHNode.js","../node_modules/three-mesh-bvh/src/Constants.js","../node_modules/three-mesh-bvh/src/BVHConstructionContext.js","../node_modules/three-mesh-bvh/src/MeshBVH.js","../node_modules/three-mesh-bvh/src/MeshBVHVisualizer.js","../node_modules/three-mesh-bvh/src/index.js","../src/THREE_Extensions.ts","../src/layout/LayoutHelper.ts","../src/adaptivity/Behavior.ts","../src/adaptivity/AdaptivityManager.ts","../src/adaptivity/AdaptiveOcclusionBehavior.ts"],"sourcesContent":["import * as THREE from 'three'\n\nexport const V_00 = Object.freeze(new THREE.Vector2)\nexport const V_11 = Object.freeze(new THREE.Vector2)\nexport const V_000 = Object.freeze(new THREE.Vector3)\nexport const V_100 = Object.freeze(new THREE.Vector3(1,0,0))\nexport const V_010 = Object.freeze(new THREE.Vector3(0,1,0))\nexport const V_001 = Object.freeze(new THREE.Vector3(0,0,1))\nexport const V_111 = Object.freeze(new THREE.Vector3(1,1,1))\nexport const Q_IDENTITY = Object.freeze(new THREE.Quaternion)\n\nconst next = Promise.resolve()\n\nexport class Pool<T> {\n\n  constructor(private _factory:() => T, private _reset:(t:T) => T) {}\n\n  private _pool = [] as T[]\n  private _unpooled = new Set<T>()\n  private _nextAutoPool?:Promise<void>\n\n  get() { \n    const object = this._pool.pop() || this._reset(this._factory())\n    this._unpooled.add(object)\n    if (!this._nextAutoPool) this._nextAutoPool = next.then(this._autoPool)\n    return object\n  }\n\n  pool(o:T) {\n    this._pool.push(o)\n    this._unpooled.delete(o)\n    this._reset(o)\n  }\n\n  private _poolAll() {\n    if (this._unpooled.size === 0) return\n    for (const o of this._unpooled) this.pool(o)\n  }\n\n  private _autoPool = () => {\n    this._nextAutoPool = undefined\n    this._poolAll()\n  }\n}\n\nexport const vectors2 = new Pool<THREE.Vector2>(\n  () => new THREE.Vector2, \n  (vec) => vec.set(0,0)\n)\n\nexport const vectors = new Pool<THREE.Vector3>(\n    () => new THREE.Vector3, \n    (vec) => vec.set(0,0,0)\n)\n\nexport const vectors4 = new Pool<THREE.Vector4>(\n    () => new THREE.Vector4, \n    (vec) => vec.set(0,0,0,1)\n)\n\nexport const quaternions = new Pool<THREE.Quaternion>(\n    () => new THREE.Quaternion, \n    (quat) => quat.set(0,0,0,1)\n)\n\nexport const matrices3 = new Pool<THREE.Matrix3>(\n  () => new THREE.Matrix3, \n  (mat) => mat.identity()\n)\n\nexport const matrices = new Pool<THREE.Matrix4>(\n    () => new THREE.Matrix4, \n    (mat) => mat.identity()\n)\n\nexport function traverse(\n  object: THREE.Object3D,\n  each: (node: THREE.Object3D) => boolean,\n  bind?: any\n) {\n  if (!each.call(bind, object)) return\n  for (let child of object.children) {\n    traverse(child, each, bind)\n  }\n}","import * as THREE from 'three'\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n *\n */\n\n\nvar Visible = 0;\nvar Deleted = 1;\n\nvar v1 = new THREE.Vector3();\n\nexport function QuickHull() {\n\n\tthis.tolerance = - 1;\n\n\tthis.faces = []; // the generated faces of the convex hull\n\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\n\n\t// the vertex lists work as follows:\n\t//\n\t// let 'a' and 'b' be 'Face' instances\n\t// let 'v' be points wrapped as instance of 'Vertex'\n\t//\n\t//     [v, v, ..., v, v, v, ...]\n\t//      ^             ^\n\t//      |             |\n\t//  a.outside     b.outside\n\t//\n\tthis.assigned = new VertexList();\n\tthis.unassigned = new VertexList();\n\n\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\n\n}\n\nObject.assign( QuickHull.prototype, {\n\n\tsetFromPoints: function ( points ) {\n\n\t\tif ( Array.isArray( points ) !== true ) {\n\n\t\t\tconsole.error( 'THREE.QuickHull: Points parameter is not an array.' );\n\n\t\t}\n\n\t\tif ( points.length < 4 ) {\n\n\t\t\tconsole.error( 'THREE.QuickHull: The algorithm needs at least four points.' );\n\n\t\t}\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.vertices.push( new VertexNode( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.compute();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\tvar points = [];\n\n\t\tobject.updateMatrixWorld( true );\n\n\t\tobject.traverse( function ( node ) {\n\n\t\t\tvar i, l, point;\n\n\t\t\tvar geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tpoint = vertices[ i ].clone();\n\t\t\t\t\t\tpoint.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tpoint = new THREE.Vector3();\n\n\t\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.setFromPoints( points );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar faces = this.faces;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// compute signed distance and check on what half space the point lies\n\n\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectRay: function ( ray, target ) {\n\n\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n\n\t\tvar faces = this.faces;\n\n\t\tvar tNear = - Infinity;\n\t\tvar tFar = Infinity;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// interpret faces as planes for the further computation\n\n\t\t\tvar vN = face.distanceToPoint( ray.origin );\n\t\t\tvar vD = face.normal.dot( ray.direction );\n\n\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\n\n\t\t\tif ( vN > 0 && vD >= 0 ) return null;\n\n\t\t\t// compute the distance from the rayâ€™s origin to the intersection with the plane\n\n\t\t\tvar t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\n\n\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\n\t\t\t// lies \"behind\" the origin\n\n\t\t\tif ( t <= 0 ) continue;\n\n\t\t\t// now categorized plane as front-facing or back-facing\n\n\t\t\tif ( vD > 0 ) {\n\n\t\t\t\t//  plane faces away from the ray, so this plane is a back-face\n\n\t\t\t\ttFar = Math.min( t, tFar );\n\n\t\t\t} else {\n\n\t\t\t\t// front-face\n\n\t\t\t\ttNear = Math.max( t, tNear );\n\n\t\t\t}\n\n\t\t\tif ( tNear > tFar ) {\n\n\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// evaluate intersection point\n\n\t\t// always try tNear first since its the closer intersection point\n\n\t\tif ( tNear !== - Infinity ) {\n\n\t\t\tray.at( tNear, target );\n\n\t\t} else {\n\n\t\t\tray.at( tFar, target );\n\n\t\t}\n\n\t\treturn target;\n\n\t},\n\n\tintersectsRay: function ( ray ) {\n\n\t\treturn this.intersectRay( ray, v1 ) !== null;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.faces = [];\n\t\tthis.vertices = [];\n\n\t\treturn this;\n\n\t},\n\n\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\taddVertexToFace: function ( vertex, face ) {\n\n\t\tvertex.face = face;\n\n\t\tif ( face.outside === null ) {\n\n\t\t\tthis.assigned.append( vertex );\n\n\t\t} else {\n\n\t\t\tthis.assigned.insertBefore( face.outside, vertex );\n\n\t\t}\n\n\t\tface.outside = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\tremoveVertexFromFace: function ( vertex, face ) {\n\n\t\tif ( vertex === face.outside ) {\n\n\t\t\t// fix face.outside link\n\n\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\n\n\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\n\n\t\t\t\tface.outside = vertex.next;\n\n\t\t\t} else {\n\n\t\t\t\t// vertex was the only outside vertex that face had\n\n\t\t\t\tface.outside = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.assigned.remove( vertex );\n\n\t\treturn this;\n\n\t},\n\n\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\tremoveAllVerticesFromFace: function ( face ) {\n\n\t\tif ( face.outside !== null ) {\n\n\t\t\t// reference to the first and last vertex of this face\n\n\t\t\tvar start = face.outside;\n\t\t\tvar end = face.outside;\n\n\t\t\twhile ( end.next !== null && end.next.face === face ) {\n\n\t\t\t\tend = end.next;\n\n\t\t\t}\n\n\t\t\tthis.assigned.removeSubList( start, end );\n\n\t\t\t// fix references\n\n\t\t\tstart.prev = end.next = null;\n\t\t\tface.outside = null;\n\n\t\t\treturn start;\n\n\t\t}\n\n\t},\n\n\t// Removes all the visible vertices that 'face' is able to see\n\n\tdeleteFaceVertices: function ( face, absorbingFace ) {\n\n\t\tvar faceVertices = this.removeAllVerticesFromFace( face );\n\n\t\tif ( faceVertices !== undefined ) {\n\n\t\t\tif ( absorbingFace === undefined ) {\n\n\t\t\t\t// mark the vertices to be reassigned to some other face\n\n\t\t\t\tthis.unassigned.appendChain( faceVertices );\n\n\n\t\t\t} else {\n\n\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\n\n\t\t\t\tvar vertex = faceVertices;\n\n\t\t\t\tdo {\n\n\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n\t\t\t\t\t// will be changed by upcoming method calls\n\n\t\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\t\tvar distance = absorbingFace.distanceToPoint( vertex.point );\n\n\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\n\n\t\t\t\t\tif ( distance > this.tolerance ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.unassigned.append( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// now assign next vertex\n\n\t\t\t\t\tvertex = nextVertex;\n\n\t\t\t\t} while ( vertex !== null );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\tresolveUnassignedPoints: function ( newFaces ) {\n\n\t\tif ( this.unassigned.isEmpty() === false ) {\n\n\t\t\tvar vertex = this.unassigned.first();\n\n\t\t\tdo {\n\n\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\n\n\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\tvar maxDistance = this.tolerance;\n\n\t\t\t\tvar maxFace = null;\n\n\t\t\t\tfor ( var i = 0; i < newFaces.length; i ++ ) {\n\n\t\t\t\t\tvar face = newFaces[ i ];\n\n\t\t\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\t\t\tvar distance = face.distanceToPoint( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tmaxFace = face;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\n\n\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t}\n\n\t\t\t\tvertex = nextVertex;\n\n\t\t\t} while ( vertex !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Computes the extremes of a simplex which will be the initial hull\n\n\tcomputeExtremes: function () {\n\n\t\tvar min = new THREE.Vector3();\n\t\tvar max = new THREE.Vector3();\n\n\t\tvar minVertices = [];\n\t\tvar maxVertices = [];\n\n\t\tvar i, l, j;\n\n\t\t// initially assume that the first vertex is the min/max\n\n\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\n\n\t\t}\n\n\t\tmin.copy( this.vertices[ 0 ].point );\n\t\tmax.copy( this.vertices[ 0 ].point );\n\n\t\t// compute the min/max vertex on all six directions\n\n\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvar point = vertex.point;\n\n\t\t\t// update the min coordinates\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\n\n\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tminVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the max coordinates\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\n\n\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tmaxVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use min/max vectors to compute an optimal epsilon\n\n\t\tthis.tolerance = 3 * Number.EPSILON * (\n\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\n\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\n\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\n\t\t);\n\n\t\treturn { min: minVertices, max: maxVertices };\n\n\t},\n\n\t// Computes the initial simplex assigning to its faces all the points\n\t// that are candidates to form part of the hull\n\n\tcomputeInitialHull: function () {\n\n\t\tvar line3, plane, closestPoint;\n\n\t\treturn function computeInitialHull() {\n\n\t\t\tif ( line3 === undefined ) {\n\n\t\t\t\tline3 = new THREE.Line3();\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar vertex, vertices = this.vertices;\n\t\t\tvar extremes = this.computeExtremes();\n\t\t\tvar min = extremes.min;\n\t\t\tvar max = extremes.max;\n\n\t\t\tvar v0, v1, v2, v3;\n\t\t\tvar i, l, j;\n\n\t\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n\t\t\t// (max.x - min.x)\n\t\t\t// (max.y - min.y)\n\t\t\t// (max.z - min.z)\n\n\t\t\tvar distance, maxDistance = 0;\n\t\t\tvar index = 0;\n\n\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\tdistance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tindex = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tv0 = min[ index ];\n\t\t\tv1 = max[ index ];\n\n\t\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n\t\t\tmaxDistance = 0;\n\t\t\tline3.set( v0.point, v1.point );\n\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\n\n\t\t\t\t\tline3.closestPointToPoint( vertex.point, true, closestPoint );\n\n\t\t\t\t\tdistance = closestPoint.distanceToSquared( vertex.point );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tv2 = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\t\t\tmaxDistance = - 1;\n\t\t\tplane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\n\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\n\n\t\t\t\t\tdistance = Math.abs( plane.distanceToPoint( vertex.point ) );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tv3 = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\n\t\t\tif ( plane.distanceToPoint( v3.point ) < 0 ) {\n\n\t\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tFace.create( v0, v1, v2 ),\n\t\t\t\t\tFace.create( v3, v1, v0 ),\n\t\t\t\t\tFace.create( v3, v2, v1 ),\n\t\t\t\t\tFace.create( v3, v0, v2 )\n\t\t\t\t);\n\n\t\t\t\t// set the twin edge\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\n\n\t\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tFace.create( v0, v2, v1 ),\n\t\t\t\t\tFace.create( v3, v0, v1 ),\n\t\t\t\t\tFace.create( v3, v1, v2 ),\n\t\t\t\t\tFace.create( v3, v2, v0 )\n\t\t\t\t);\n\n\t\t\t\t// set the twin edge\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\n\n\t\t\t\t\t// join face[ i ] with face[ i + 1 ]\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// the initial hull is the tetrahedron\n\n\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ] );\n\n\t\t\t}\n\n\t\t\t// initial assignment of vertices to the faces of the tetrahedron\n\n\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\n\n\t\t\t\t\tmaxDistance = this.tolerance;\n\t\t\t\t\tvar maxFace = null;\n\n\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\tdistance = this.faces[ j ].distanceToPoint( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tmaxFace = this.faces[ j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\t// Removes inactive faces\n\n\treindexFaces: function () {\n\n\t\tvar activeFaces = [];\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\tactiveFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.faces = activeFaces;\n\n\t\treturn this;\n\n\t},\n\n\t// Finds the next vertex to create faces with the current hull\n\n\tnextVertexToAdd: function () {\n\n\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n\n\t\tif ( this.assigned.isEmpty() === false ) {\n\n\t\t\tvar eyeVertex, maxDistance = 0;\n\n\t\t\t// grap the first available face and start with the first visible vertex of that face\n\n\t\t\tvar eyeFace = this.assigned.first().face;\n\t\t\tvar vertex = eyeFace.outside;\n\n\t\t\t// now calculate the farthest vertex that face can see\n\n\t\t\tdo {\n\n\t\t\t\tvar distance = eyeFace.distanceToPoint( vertex.point );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\teyeVertex = vertex;\n\n\t\t\t\t}\n\n\t\t\t\tvertex = vertex.next;\n\n\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\n\n\t\t\treturn eyeVertex;\n\n\t\t}\n\n\t},\n\n\t// Computes a chain of half edges in CCW order called the 'horizon'.\n\t// For an edge to be part of the horizon it must join a face that can see\n\t// 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\tcomputeHorizon: function ( eyePoint, crossEdge, face, horizon ) {\n\n\t\t// moves face's vertices to the 'unassigned' vertex list\n\n\t\tthis.deleteFaceVertices( face );\n\n\t\tface.mark = Deleted;\n\n\t\tvar edge;\n\n\t\tif ( crossEdge === null ) {\n\n\t\t\tedge = crossEdge = face.getEdge( 0 );\n\n\t\t} else {\n\n\t\t\t// start from the next edge since 'crossEdge' was already analyzed\n\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\n\n\t\t\tedge = crossEdge.next;\n\n\t\t}\n\n\t\tdo {\n\n\t\t\tvar twinEdge = edge.twin;\n\t\t\tvar oppositeFace = twinEdge.face;\n\n\t\t\tif ( oppositeFace.mark === Visible ) {\n\n\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\n\n\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\n\n\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\n\n\t\t\t\t\thorizon.push( edge );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tedge = edge.next;\n\n\t\t} while ( edge !== crossEdge );\n\n\t\treturn this;\n\n\t},\n\n\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\taddAdjoiningFace: function ( eyeVertex, horizonEdge ) {\n\n\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\n\n\t\tvar face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\n\n\t\tthis.faces.push( face );\n\n\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\n\n\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\n\n\n\t},\n\n\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\n\t//  horizon opposite face and the face on the left/right\n\n\taddNewFaces: function ( eyeVertex, horizon ) {\n\n\t\tthis.newFaces = [];\n\n\t\tvar firstSideEdge = null;\n\t\tvar previousSideEdge = null;\n\n\t\tfor ( var i = 0; i < horizon.length; i ++ ) {\n\n\t\t\tvar horizonEdge = horizon[ i ];\n\n\t\t\t// returns the right side edge\n\n\t\t\tvar sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\n\n\t\t\tif ( firstSideEdge === null ) {\n\n\t\t\t\tfirstSideEdge = sideEdge;\n\n\t\t\t} else {\n\n\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n\n\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\n\n\t\t\t}\n\n\t\t\tthis.newFaces.push( sideEdge.face );\n\t\t\tpreviousSideEdge = sideEdge;\n\n\t\t}\n\n\t\t// perform final join of new faces\n\n\t\tfirstSideEdge.next.setTwin( previousSideEdge );\n\n\t\treturn this;\n\n\t},\n\n\t// Adds a vertex to the hull\n\n\taddVertexToHull: function ( eyeVertex ) {\n\n\t\tvar horizon = [];\n\n\t\tthis.unassigned.clear();\n\n\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\n\n\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\n\n\t\tthis.addNewFaces( eyeVertex, horizon );\n\n\t\t// reassign 'unassigned' vertices to the new faces\n\n\t\tthis.resolveUnassignedPoints( this.newFaces );\n\n\t\treturn\tthis;\n\n\t},\n\n\tcleanup: function () {\n\n\t\tthis.assigned.clear();\n\t\tthis.unassigned.clear();\n\t\tthis.newFaces = [];\n\n\t\treturn this;\n\n\t},\n\n\tcompute: function () {\n\n\t\tvar vertex;\n\n\t\tthis.computeInitialHull();\n\n\t\t// add all available vertices gradually to the hull\n\n\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\n\n\t\t\tthis.addVertexToHull( vertex );\n\n\t\t}\n\n\t\tthis.reindexFaces();\n\n\t\tthis.cleanup();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n//\n\nfunction Face() {\n\n\tthis.normal = new THREE.Vector3();\n\tthis.midpoint = new THREE.Vector3();\n\tthis.area = 0;\n\n\tthis.constant = 0; // signed distance from face to the origin\n\tthis.outside = null; // reference to a vertex in a vertex list this face can see\n\tthis.mark = Visible;\n\tthis.edge = null;\n\n}\n\nObject.assign( Face, {\n\n\tcreate: function ( a, b, c ) {\n\n\t\tvar face = new Face();\n\n\t\tvar e0 = new HalfEdge( a, face );\n\t\tvar e1 = new HalfEdge( b, face );\n\t\tvar e2 = new HalfEdge( c, face );\n\n\t\t// join edges\n\n\t\te0.next = e2.prev = e1;\n\t\te1.next = e0.prev = e2;\n\t\te2.next = e1.prev = e0;\n\n\t\t// main half edge reference\n\n\t\tface.edge = e0;\n\n\t\treturn face.compute();\n\n\t}\n\n} );\n\nObject.assign( Face.prototype, {\n\n\tgetEdge: function ( i ) {\n\n\t\tvar edge = this.edge;\n\n\t\twhile ( i > 0 ) {\n\n\t\t\tedge = edge.next;\n\t\t\ti --;\n\n\t\t}\n\n\t\twhile ( i < 0 ) {\n\n\t\t\tedge = edge.prev;\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn edge;\n\n\t},\n\n\tcompute: function () {\n\n\t\tvar triangle;\n\n\t\treturn function compute() {\n\n\t\t\tif ( triangle === undefined ) triangle = new THREE.Triangle();\n\n\t\t\tvar a = this.edge.tail();\n\t\t\tvar b = this.edge.head();\n\t\t\tvar c = this.edge.next.head();\n\n\t\t\ttriangle.set( a.point, b.point, c.point );\n\n\t\t\ttriangle.getNormal( this.normal );\n\t\t\ttriangle.getMidpoint( this.midpoint );\n\t\t\tthis.area = triangle.getArea();\n\n\t\t\tthis.constant = this.normal.dot( this.midpoint );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) - this.constant;\n\n\t}\n\n} );\n\n// Entity for a Doubly-Connected Edge List (DCEL).\n\nfunction HalfEdge( vertex, face ) {\n\n\tthis.vertex = vertex;\n\tthis.prev = null;\n\tthis.next = null;\n\tthis.twin = null;\n\tthis.face = face;\n\n}\n\nObject.assign( HalfEdge.prototype, {\n\n\thead: function () {\n\n\t\treturn this.vertex;\n\n\t},\n\n\ttail: function () {\n\n\t\treturn this.prev ? this.prev.vertex : null;\n\n\t},\n\n\tlength: function () {\n\n\t\tvar head = this.head();\n\t\tvar tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceTo( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t},\n\n\tlengthSquared: function () {\n\n\t\tvar head = this.head();\n\t\tvar tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceToSquared( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t},\n\n\tsetTwin: function ( edge ) {\n\n\t\tthis.twin = edge;\n\t\tedge.twin = this;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// A vertex as a double linked list node.\n\nfunction VertexNode( point ) {\n\n\tthis.point = point;\n\tthis.prev = null;\n\tthis.next = null;\n\tthis.face = null; // the face that is able to see this vertex\n\n}\n\n// A double linked list that contains vertex nodes.\n\nfunction VertexList() {\n\n\tthis.head = null;\n\tthis.tail = null;\n\n}\n\nObject.assign( VertexList.prototype, {\n\n\tfirst: function () {\n\n\t\treturn this.head;\n\n\t},\n\n\tlast: function () {\n\n\t\treturn this.tail;\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.head = this.tail = null;\n\n\t\treturn this;\n\n\t},\n\n\t// Inserts a vertex before the target vertex\n\n\tinsertBefore: function ( target, vertex ) {\n\n\t\tvertex.prev = target.prev;\n\t\tvertex.next = target;\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex;\n\n\t\t}\n\n\t\ttarget.prev = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Inserts a vertex after the target vertex\n\n\tinsertAfter: function ( target, vertex ) {\n\n\t\tvertex.prev = target;\n\t\tvertex.next = target.next;\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex;\n\n\t\t}\n\n\t\ttarget.next = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Appends a vertex to the end of the linked list\n\n\tappend: function ( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\t\tvertex.next = null; // the tail has no subsequent vertex\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Appends a chain of vertices where 'vertex' is the head.\n\n\tappendChain: function ( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\n\t\t// ensure that the 'tail' reference points to the last vertex of the chain\n\n\t\twhile ( vertex.next !== null ) {\n\n\t\t\tvertex = vertex.next;\n\n\t\t}\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a vertex from the linked list\n\n\tremove: function ( vertex ) {\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex.next;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex.next;\n\n\t\t}\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex.prev;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\tremoveSubList: function ( a, b ) {\n\n\t\tif ( a.prev === null ) {\n\n\t\t\tthis.head = b.next;\n\n\t\t} else {\n\n\t\t\ta.prev.next = b.next;\n\n\t\t}\n\n\t\tif ( b.next === null ) {\n\n\t\t\tthis.tail = a.prev;\n\n\t\t} else {\n\n\t\t\tb.next.prev = a.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\treturn this.head === null;\n\n\t}\n\n} );","/**\n * @author Mugen87 / https://github.com/Mugen87\n * \n * adapted for Typescript by Gheric Speiginer\n */\n\nimport * as THREE from 'three'\nimport {QuickHull} from './QuickHull'\n\n// ConvexGeometry\nexport class ConvexGeometry extends THREE.Geometry {\n\n    constructor(public points:THREE.Vector3[]) {\n        super()\n        this.fromBufferGeometry( new ConvexBufferGeometry( points ) );\n        this.mergeVertices();\n    }\n\n}\n\n// ConvexBufferGeometry\n\nexport class ConvexBufferGeometry extends THREE.BufferGeometry { \n\n    constructor(public points:THREE.Vector3[]) {\n        super()\n\n        // buffers\n\n        var vertices = [] as number[];\n        var normals = [] as number[];\n\n        // execute QuickHull\n\n        if ( QuickHull === undefined ) {\n\n            console.error( 'THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull' );\n\n        }\n\n        var quickHull = new (QuickHull as any)().setFromPoints( points );\n\n        // generate vertices and normals\n\n        var faces = quickHull.faces;\n\n        for ( var i = 0; i < faces.length; i ++ ) {\n\n            var face = faces[ i ];\n            var edge = face.edge;\n\n            // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n            do {\n\n                var point = edge.head().point;\n\n                vertices.push( point.x, point.y, point.z );\n                normals.push( face.normal.x, face.normal.y, face.normal.z );\n\n                edge = edge.next;\n\n            } while ( edge !== face.edge );\n\n        }\n\n        // build geometry\n\n        this.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        this.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n    }\n}","/*\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n *\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nimport * as THREE from 'three'\n\nexport var SimplifyModifier = function () {};\n\n( function () {\n\n\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\tfunction pushIfUnique( array, object ) {\n\n\t\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n\t}\n\n\tfunction removeFromArray( array, object ) {\n\n\t\tvar k = array.indexOf( object );\n\t\tif ( k > - 1 ) array.splice( k, 1 );\n\n\t}\n\n\tfunction computeEdgeCollapseCost( u, v ) {\n\n\t\t// if we collapse edge uv by moving u to v then how\n\t\t// much different will the model change, i.e. the \"error\".\n\n\t\tvar edgelength = v.position.distanceTo( u.position );\n\t\tvar curvature = 0;\n\n\t\tvar sideFaces = [];\n\t\tvar i, il = u.faces.length, face, sideFace;\n\n\t\t// find the \"sides\" triangles that are on the edge uv\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tface = u.faces[ i ];\n\n\t\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\t\tsideFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use the triangle facing most away from the sides\n\t\t// to determine our curvature term\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tvar minCurvature = 1;\n\t\t\tface = u.faces[ i ];\n\n\t\t\tfor ( var j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\t\tsideFace = sideFaces[ j ];\n\t\t\t\t// use dot product of face normals.\n\t\t\t\tvar dotProd = face.normal.dot( sideFace.normal );\n\t\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t\t}\n\n\t\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t\t}\n\n\t\t// crude approach in attempt to preserve borders\n\t\t// though it seems not to be totally correct\n\t\tvar borders = 0;\n\t\tif ( sideFaces.length < 2 ) {\n\n\t\t\t// we add some arbitrary cost for borders,\n\t\t\t// borders += 10;\n\t\t\tcurvature = 1;\n\n\t\t}\n\n\t\tvar amt = edgelength * curvature + borders;\n\n\t\treturn amt;\n\n\t}\n\n\tfunction computeEdgeCostAtVertex( v ) {\n\n\t\t// compute the edge collapse cost for all edges that start\n\t\t// from vertex v.  Since we are only interested in reducing\n\t\t// the object by selecting the min cost edge at each step, we\n\t\t// only cache the cost of the least cost edge at this vertex\n\t\t// (in member variable collapse) as well as the value of the\n\t\t// cost (in member variable collapseCost).\n\n\t\tif ( v.neighbors.length === 0 ) {\n\n\t\t\t// collapse if no neighbors.\n\t\t\tv.collapseNeighbor = null;\n\t\t\tv.collapseCost = - 0.01;\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tv.collapseCost = 100000;\n\t\tv.collapseNeighbor = null;\n\n\t\t// search all neighboring edges for \"least cost\" edge\n\t\tfor ( var i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\t\tvar collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.collapseCost = collapseCost;\n\t\t\t\tv.minCost = collapseCost;\n\t\t\t\tv.totalCost = 0;\n\t\t\t\tv.costCount = 0;\n\n\t\t\t}\n\n\t\t\tv.costCount ++;\n\t\t\tv.totalCost += collapseCost;\n\n\t\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.minCost = collapseCost;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// we average the cost of collapsing at this vertex\n\t\tv.collapseCost = v.totalCost / v.costCount;\n\t\t// v.collapseCost = v.minCost;\n\n\t}\n\n\tfunction removeVertex( v, vertices ) {\n\n\t\tconsole.assert( v.faces.length === 0 );\n\n\t\twhile ( v.neighbors.length ) {\n\n\t\t\tvar n = v.neighbors.pop();\n\t\t\tremoveFromArray( n.neighbors, v );\n\n\t\t}\n\n\t\tremoveFromArray( vertices, v );\n\n\t}\n\n\tfunction removeFace( f, faces ) {\n\n\t\tremoveFromArray( faces, f );\n\n\t\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\t\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\t\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t\t// TODO optimize this!\n\t\tvar vs = [ f.v1, f.v2, f.v3 ];\n\t\tvar v1, v2;\n\n\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\tv1 = vs[ i ];\n\t\t\tv2 = vs[ ( i + 1 ) % 3 ];\n\n\t\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\t\tv1.removeIfNonNeighbor( v2 );\n\t\t\tv2.removeIfNonNeighbor( v1 );\n\n\t\t}\n\n\t}\n\n\tfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t\t// Collapse the edge uv by moving vertex u onto v\n\n\t\tif ( ! v ) {\n\n\t\t\t// u is a vertex all by itself so just delete it..\n\t\t\tremoveVertex( u, vertices );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar i;\n\t\tvar tmpVertices = [];\n\n\t\tfor ( i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t\t}\n\n\n\t\t// delete triangles on edge uv:\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tif ( u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update remaining triangles to have v instead of u\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t\t}\n\n\n\t\tremoveVertex( u, vertices );\n\n\t\t// recompute the edge collapse costs in neighborhood\n\t\tfor ( i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t\t}\n\n\t}\n\n\n\n\tfunction minimumCostEdge( vertices ) {\n\n\t\t// O(n * n) approach. TODO optimize this\n\n\t\tvar least = vertices[ 0 ];\n\n\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\t\tleast = vertices[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn least;\n\n\t}\n\n\t// we use a triangle class to represent structure of face slightly differently\n\n\tfunction Triangle( v1, v2, v3, a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t\tthis.normal = new THREE.Vector3();\n\n\t\tthis.computeNormal();\n\n\t\tv1.faces.push( this );\n\t\tv1.addUniqueNeighbor( v2 );\n\t\tv1.addUniqueNeighbor( v3 );\n\n\t\tv2.faces.push( this );\n\t\tv2.addUniqueNeighbor( v1 );\n\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\tv3.faces.push( this );\n\t\tv3.addUniqueNeighbor( v1 );\n\t\tv3.addUniqueNeighbor( v2 );\n\n\t}\n\n\tTriangle.prototype.computeNormal = function () {\n\n\t\tvar vA = this.v1.position;\n\t\tvar vB = this.v2.position;\n\t\tvar vC = this.v3.position;\n\n\t\tcb.subVectors( vC, vB );\n\t\tab.subVectors( vA, vB );\n\t\tcb.cross( ab ).normalize();\n\n\t\tthis.normal.copy( cb );\n\n\t};\n\n\tTriangle.prototype.hasVertex = function ( v ) {\n\n\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t};\n\n\tTriangle.prototype.replaceVertex = function ( oldv, newv ) {\n\n\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\tremoveFromArray( oldv.faces, this );\n\t\tnewv.faces.push( this );\n\n\n\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\tthis.computeNormal();\n\n\t};\n\n\tfunction Vertex( v, id ) {\n\n\t\tthis.position = v;\n\n\t\tthis.id = id; // old index id\n\n\t\tthis.faces = []; // faces vertex is connected\n\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t}\n\n\tVertex.prototype.addUniqueNeighbor = function ( vertex ) {\n\n\t\tpushIfUnique( this.neighbors, vertex );\n\n\t};\n\n\tVertex.prototype.removeIfNonNeighbor = function ( n ) {\n\n\t\tvar neighbors = this.neighbors;\n\t\tvar faces = this.faces;\n\n\t\tvar offset = neighbors.indexOf( n );\n\t\tif ( offset === - 1 ) return;\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t}\n\n\t\tneighbors.splice( offset, 1 );\n\n\t};\n\n\tSimplifyModifier.prototype.modify = function ( geometry, count ) {\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t}\n\n\t\tgeometry.mergeVertices();\n\n\t\tvar oldVertices = geometry.vertices; // Three Position\n\t\tvar oldFaces = geometry.faces; // Three Face\n\n\t\t// conversion\n\t\tvar vertices = [];\n\t\tvar faces = [];\n\n\t\tvar i, il;\n\n\t\t//\n\t\t// put data of original geometry in different data structures\n\t\t//\n\n\t\t// add vertices\n\n\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = new Vertex( oldVertices[ i ], i );\n\t\t\tvertices.push( vertex );\n\n\t\t}\n\n\t\t// add faces\n\n\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\tvar face = oldFaces[ i ];\n\n\t\t\tvar a = face.a;\n\t\t\tvar b = face.b;\n\t\t\tvar c = face.c;\n\n\t\t\tvar triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\tfaces.push( triangle );\n\n\t\t}\n\n\t\t// compute all edge collapse costs\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t}\n\n\t\tvar nextVertex;\n\n\t\tvar z = count;\n\n\t\twhile ( z -- ) {\n\n\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t}\n\n\t\t//\n\n\t\tvar simplifiedGeometry = new THREE.BufferGeometry();\n\t\tvar position = [];\n\t\tvar index = [];\n\n\t\t//\n\n\t\tfor ( i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tvar vertex = vertices[ i ].position;\n\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = vertices.indexOf( face.v1 );\n\t\t\tvar b = vertices.indexOf( face.v2 );\n\t\t\tvar c = vertices.indexOf( face.v3 );\n\n\t\t\tindex.push( a, b, c );\n\n\t\t}\n\n\t\t//\n\n\t\tsimplifiedGeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\tsimplifiedGeometry.setIndex( index );\n\n\t\treturn simplifiedGeometry;\n\n\t};\n\n} )();\n","import * as THREE from 'three'\nimport {vectors2, vectors, quaternions, matrices, traverse, V_000, V_001, V_010} from '../utils'\nimport {ConvexGeometry} from './ConvexGeometry'\nimport {SimplifyModifier} from './SimplifyModifier'\n\nexport class SimplifiedHull {\n    static hulls = new WeakMap<THREE.Geometry|THREE.BufferGeometry, THREE.Geometry|undefined>()\n  \n    static compute(geometry:THREE.Geometry|THREE.BufferGeometry, maxPoints = 30) {\n      const bufferGeometry = (geometry as THREE.BufferGeometry).type === 'BufferGeometry' ? \n        geometry as THREE.BufferGeometry : null\n      const normalGeometry = bufferGeometry ? \n        new THREE.Geometry().fromBufferGeometry(bufferGeometry) : geometry as THREE.Geometry\n      if (normalGeometry.vertices.length < maxPoints) {\n        this.hulls.set(geometry, normalGeometry)\n        return normalGeometry\n      }\n    \n      const modifier = new (SimplifyModifier as any)()\n      let hull = new ConvexGeometry(normalGeometry.vertices) as THREE.Geometry\n      const count = hull.vertices.length\n      if (count > maxPoints) {\n        const simplified = modifier.modify( hull, hull.vertices.length - maxPoints )\n        hull = new THREE.Geometry().fromBufferGeometry(simplified)\n      }\n      this.hulls.set(geometry, hull)\n      return hull\n    } \n    \n    static get(geometry:THREE.Geometry|THREE.BufferGeometry) {\n        return this.hulls.get(geometry) || geometry\n    }\n}\n\nexport class Box3 extends THREE.Box3 {\n    objectFilter? = SpatialMetrics.objectFilter\n    objectExpansion = 'box' as 'geometry'|'hull'|'box'\n    coordinateSystem = undefined as THREE.Object3D|undefined\n\n    private _objectExpandFunction:(o:THREE.Object3D)=>void\n\n    private _onObjectTraverse( node: THREE.Object3D, ) {\n        if (this.objectFilter && !this.objectFilter(node)) return false\n        this._objectExpandFunction.call(this, node)\n        return true\n    }\n\n    setFromObject( object:THREE.Object3D ) {\n\n        this.makeEmpty()\n\n        switch (this.objectExpansion) {\n            case 'geometry': this._objectExpandFunction = this.expandByObjectGeometry; break;\n            case 'hull': this._objectExpandFunction = this.expandByObjectHull; break;\n            case 'box':   \n            default: this._objectExpandFunction = this.expandByObjectBox; break;\n        }\n\n        this._objectExpandFunction.call(this, object)\n        for (const c of object.children) {\n            traverse(c, this._onObjectTraverse, this)\n        }\n\n        return this\n    }\n\n    private _vector = new THREE.Vector3\n    private _mat4 = new THREE.Matrix4\n\n    expandByObjectGeometry ( node: THREE.Object3D ) {\n        let i, l\n        const vector = this._vector\n        const mesh = node as THREE.Mesh\n\t\tnode.updateWorldMatrix( false, false )\n\t\tvar geometry = mesh.geometry as THREE.Geometry&THREE.BufferGeometry\n\t\tif ( geometry !== undefined ) {\n            const mat = this._getCoordinateSystemTransform(node)\n\t\t\tif ( geometry.isGeometry ) {\n\t\t\t\tvar vertices = geometry.vertices\n\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\t\t\t\t\tvector.copy( vertices[ i ] )\n\t\t\t\t\tvector.applyMatrix4( mat )\n\t\t\t\t\tthis.expandByPoint( vector )\n\t\t\t\t}\n\t\t\t} else if ( geometry.isBufferGeometry ) {\n\t\t\t\tvar attribute = geometry.attributes.position\n\t\t\t\tif ( attribute !== undefined ) {\n\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\t\t\t\t\t\tvector.fromBufferAttribute( attribute as any, i ).applyMatrix4( mat )\n\t\t\t\t\t\tthis.expandByPoint( vector )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this\n    }\n\n    expandByObjectHull( node: THREE.Object3D ) {\n        const mesh = node as THREE.Mesh\n        const vector = this._vector\n        let geometry = mesh.geometry\n        if (!geometry) return this\n        const mat = this._getCoordinateSystemTransform(node) \n        geometry = SimplifiedHull.get(geometry)\n        if (geometry && 'vertices' in geometry) {\n            const vertices = geometry.vertices    \n            for (let i = 0; i < vertices.length; ++i) {\n                const v = vertices[i]\n                vector.copy( v ).applyMatrix4( mat )\n                this.expandByPoint( vector )\n            }\n        } else {\n            const vertices = geometry.getAttribute('position')  \n            for (let i = 0; i < vertices.count; i+=vertices.itemSize) {\n                vector.set( vertices.getX(i), vertices.getY(i), vertices.getZ(i) ).applyMatrix4( mat )\n                this.expandByPoint( vector )\n            }\n        }\n        return this\n    }\n\n    private _box = new THREE.Box3\n\n    expandByObjectBox ( node:THREE.Object3D ) {\n        const box = this._box\n        const mesh = node as THREE.Mesh\n        const geometry = mesh.geometry\n        if (!geometry) return this\n        if ( geometry.boundingBox === null ) {\n            geometry.computeBoundingBox()\n        }\n        box.copy( geometry.boundingBox )\n        box.applyMatrix4( this._getCoordinateSystemTransform(node) )\n        this.union( box )\n        return this\n    }\n\n    private _getCoordinateSystemTransform(node: THREE.Object3D) {\n        const mat4 = this._mat4\n        if (this.coordinateSystem) {\n            mat4.getInverse(this.coordinateSystem.transitioner.matrixWorldTarget).multiply( node.transitioner.matrixWorldTarget )\n        } else {\n            mat4.copy( node.transitioner.matrixWorldTarget )\n        }\n        return mat4\n    }\n\n    private _center = new THREE.Vector3\n    private _size = new THREE.Vector3\n\n    relativeToAbsolute(relativePosition:THREE.Vector3, out = relativePosition) {\n        if (!this.isEmpty()) {\n            const center = this._center\n            const size = this._size\n            this.getCenter(center)\n            this.getSize(size)\n            out.copy(relativePosition).multiplyScalar(0.5).multiply(size).add(center)\n        } else {\n            out.copy(relativePosition).multiplyScalar(0)\n        }\n        // if (!isFinite(out.x)) out.x = 0\n        // if (!isFinite(out.y)) out.y = 0\n        // if (!isFinite(out.z)) out.z = 0\n        return out\n    }\n\n    absoluteToRelative(absolutePosition:THREE.Vector3, out = absolutePosition) {\n        if (!this.isEmpty()) {  \n            const center = this._center\n            const size = this._size\n            this.getCenter(center)\n            this.getSize(size)\n            out.copy(absolutePosition).sub(center).divide(size).multiplyScalar(2)\n        } else {\n            out.copy(absolutePosition).multiplyScalar(0)\n        }\n        // if (!isFinite(out.x)) out.x = 0\n        // if (!isFinite(out.y)) out.y = 0\n        // if (!isFinite(out.z)) out.z = 0\n        return out\n    }\n\n    isEmpty() {\n        return !isFinite(this.min.x) && !isFinite(this.min.y) && !isFinite(this.min.z) &&\n        !isFinite(this.max.x) && !isFinite(this.max.y) && !isFinite(this.max.z)\n    }\n}\n\nconst rotateY180 = new THREE.Quaternion().setFromAxisAngle(V_010, Math.PI)\n\n/**\n * A visual viewing frustum, with angles specified in DEGREES\n */\nexport class VisualFrustum {\n    \n    objectFilter? = SpatialMetrics.objectFilter\n    objectExpansion = 'box' as 'geometry'|'hull'|'box'\n    private _objectExpandFunction:(o:THREE.Object3D)=>void\n\n    min = new THREE.Vector3(Infinity,Infinity,Infinity)\n    max = new THREE.Vector3(-Infinity,-Infinity,-Infinity)\n    minClamped = new THREE.Vector3\n    maxClamped = new THREE.Vector3\n\n    minClamp?:THREE.Vector3\n    maxClamp?:THREE.Vector3\n\n    constructor(public coordinateSystem: THREE.Object3D) {}\n\n    get left() {\n        if (this.isEmpty()) return 0\n        return this.min.x\n    }\n\n    get leftClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.x\n    } \n\n    get top() {\n        if (this.isEmpty()) return 0\n        return this.max.y\n    }\n\n    get topClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.y\n    }\n\n    get right() {\n        if (this.isEmpty()) return 0\n        return this.max.x   \n    }\n\n    get rightClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.x   \n    }\n\n    get bottom() {\n        if (this.isEmpty()) return 0\n        return this.min.y\n    }\n\n    get bottomClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.y \n    }\n\n    get near() {\n        if (this.isEmpty()) return 0\n        return this.min.z\n    }\n\n    get nearClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.z\n    }\n\n    get far() {\n        if (this.isEmpty()) return 0\n        return this.max.z\n    }\n\n    get farClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.z\n    }\n\n    get horizontal() {\n        if (this.isEmpty()) return 0\n        return this.right - this.left\n    }\n\n    get horizontalClamped() {\n        if (this.isEmpty()) return 0\n        return this.rightClamped - this.leftClamped\n    }\n\n    get vertical() {\n        if (this.isEmpty()) return 0\n        return this.top - this.bottom\n    }\n\n    get verticalClamped() {\n        if (this.isEmpty()) return 0\n        return this.topClamped - this.bottomClamped\n    }\n\n    get depth() {\n        if (this.isEmpty()) return 0\n        return this.far - this.near\n    }\n\n    get depthClamped() {\n        if (this.isEmpty()) return 0\n        return this.farClamped - this.nearClamped\n    }\n\n    get diagonal() {\n        if (this.isEmpty()) return 0\n        const minDirection = SpatialMetrics.getCartesianForSphericalDirection(this.min, vectors.get())\n        const maxDirection = SpatialMetrics.getCartesianForSphericalDirection(this.max, vectors.get())\n        const diagonal = minDirection.angleTo(maxDirection)\n        vectors.pool(minDirection)\n        vectors.pool(maxDirection)\n        return diagonal * THREE.Math.RAD2DEG\n    }\n\n    get diagonalClamped() {\n        if (this.isEmpty()) return 0\n        const minDirection = SpatialMetrics.getCartesianForSphericalDirection(this.minClamped, vectors.get())\n        const maxDirection = SpatialMetrics.getCartesianForSphericalDirection(this.maxClamped, vectors.get())\n        const diagonal = minDirection.angleTo(maxDirection)\n        vectors.pool(minDirection)\n        vectors.pool(maxDirection)\n        return diagonal * THREE.Math.RAD2DEG\n    }\n\n\tisEmpty(){\n\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z\n\t}\n\n    getCenter(out:THREE.Vector3) {\n        return out.set( \n            this.right - this.horizontal / 2, \n            this.top - this.vertical / 2,\n            this.far - this.depth / 2,\n        )\n    }\n\n    getClampedCenter(out:THREE.Vector3) {\n        return out.set( \n            this.rightClamped - this.horizontalClamped / 2, \n            this.topClamped - this.verticalClamped / 2,\n            this.farClamped - this.depthClamped / 2,\n        )\n    }\n\n    getSize(out:THREE.Vector3) {\n        return out.set(\n            this.horizontal, \n            this.vertical, \n            this.depth\n        )\n    }\n\n    getClampedSize(out:THREE.Vector3) {\n        return out.set(\n            this.horizontalClamped, \n            this.verticalClamped, \n            this.depthClamped\n        )\n    }\n\n    getPositionForOffset(offset:THREE.Vector3, out:THREE.Vector3) {\n        const center = this.getCenter(vectors.get())\n        const size = this.getSize(vectors.get())\n        out.copy(offset).multiplyScalar(0.5).multiply(size).add(center)\n        vectors.pool(center)\n        vectors.pool(size)\n        return out\n    }\n\n    getClampedPositionForOffset(offset:THREE.Vector3, out:THREE.Vector3) {\n        const center = this.getClampedCenter(vectors.get())\n        const size = this.getClampedSize(vectors.get())\n        out.copy(offset).multiplyScalar(0.5).multiply(size).add(center)\n        vectors.pool(center) \n        vectors.pool(size)\n        return out\n    }\n    \n    setFromPerspectiveProjectionMatrix(projectionMatrix:THREE.Matrix4) {\n        const inverseProjection = matrices.get().getInverse(projectionMatrix)\n        const vec = vectors.get()\n        this.min.x = -vec.set(-1,0,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.max.x = vec.set(1,0,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.min.y = -vec.set(0,-1,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.max.y = vec.set(0,1,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.min.z = -vec.set(0,0,-1).applyMatrix4(inverseProjection).z\n        this.max.z = -vec.set(0,0,1).applyMatrix4(inverseProjection).z\n        matrices.pool(inverseProjection)\n        vectors.pool(vec)\n        this._applyClamping()\n    }\n\n    makeEmpty() {\n        this.min.set(Infinity,Infinity,Infinity)\n        this.max.set(-Infinity,-Infinity,-Infinity)\n    }\n\n    setFromObject( object:THREE.Object3D ) {\n\n        this.makeEmpty()\n\n        switch (this.objectExpansion) {\n            case 'geometry': //this._objectExpandFunction = this.expandByObjectGeometry; break;\n            case 'hull': this._objectExpandFunction = this.expandByObjectHull; break;\n            case 'box':   \n            default: this._objectExpandFunction = this.expandByObjectBox; break;\n        }\n\n        this._objectExpandFunction.call(this, object)\n        for (const c of object.children) {\n            traverse(c, this._onObjectTraverse, this)\n        }\n\n        return this\n    }\n    \n    private _onObjectTraverse( node: THREE.Object3D, ) {\n        if (this.objectFilter && !this.objectFilter(node)) return false\n        this._objectExpandFunction.call(this, node)\n        return true\n    }\n\n    private _vec3 = new THREE.Vector3\n    private _mat4 = new THREE.Matrix4\n\n    private expandByObjectHull(object:THREE.Object3D) {\n        const m = object as THREE.Mesh\n        if (!m.isMesh) return\n\n        const coordinateSystem = this.coordinateSystem\n        const vertexPosition = this._vec3\n        const localToReferenceFrame = this._mat4.getInverse(coordinateSystem.matrixWorld).multiply(m.matrixWorld)\n        const hull = SimplifiedHull.get(m.geometry)!\n        const metrics = SpatialMetrics.get(coordinateSystem)\n\n        if ('vertices' in hull) {\n            for (const vertex of hull.vertices) {\n                vertexPosition.copy(vertex).applyMatrix4(localToReferenceFrame)\n                const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(vertexPosition, vertexPosition)\n                this.min.min(vertexVisualPosition)\n                this.max.max(vertexVisualPosition)\n            }\n        } else {\n            const vertices = hull.getAttribute('position')\n            for (let i = 0; i < vertices.count; i += vertices.itemSize) {\n                vertexPosition.set(vertices.getX(i), vertices.getY(i), vertices.getZ(i)).applyMatrix4(localToReferenceFrame)\n                const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(vertexPosition, vertexPosition)\n                this.min.min(vertexVisualPosition)\n                this.max.max(vertexVisualPosition)\n            }\n        }\n\n        this._applyClamping()\n    }\n\n    private _boxPoints = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ] as THREE.Vector3[]\n\n    expandByObjectBox ( node:THREE.Object3D ) {\n        const mat4 = this._mat4\n        const mesh = node as THREE.Mesh\n        const geometry = mesh.geometry\n        if (!geometry) return this\n\n        if ( geometry.boundingBox === null ) {\n            geometry.computeBoundingBox()\n        }\n    \n        const box = geometry.boundingBox\n        const points = this._boxPoints\n\t\tpoints[ 0 ].set( box.min.x, box.min.y, box.min.z ) // 000\n\t\tpoints[ 1 ].set( box.min.x, box.min.y, box.max.z ) // 001\n\t\tpoints[ 2 ].set( box.min.x, box.max.y, box.min.z ) // 010\n\t\tpoints[ 3 ].set( box.min.x, box.max.y, box.max.z ) // 011\n\t\tpoints[ 4 ].set( box.max.x, box.min.y, box.min.z ) // 100\n\t\tpoints[ 5 ].set( box.max.x, box.min.y, box.max.z ) // 101\n\t\tpoints[ 6 ].set( box.max.x, box.max.y, box.min.z ) // 110\n        points[ 7 ].set( box.max.x, box.max.y, box.max.z ) // 111\n\n        const coordinateSystem = this.coordinateSystem\n        const metrics = SpatialMetrics.get(coordinateSystem)\n        const localToReferenceFrame = mat4.getInverse(coordinateSystem.matrixWorld).multiply(mesh.matrixWorld)\n\n        for (const p of points) {\n            p.applyMatrix4(localToReferenceFrame)\n            const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(p, p)\n            this.min.min(vertexVisualPosition)\n            this.max.max(vertexVisualPosition)\n        }\n        \n        this._applyClamping()\n    }\n\n    private _applyClamping() {\n        this.minClamped.copy(this.min)\n        this.maxClamped.copy(this.max)\n        if (this.minClamp) this.minClamped.min(this.minClamp)\n        if (this.maxClamp) this.maxClamped.max(this.maxClamp)\n    }\n\n}\n\n/**\n * Calculate spatial metrics between a primary object and a target object.\n *\n * The results are always in one of two *local* coordinate systems:\n * `object-space` -\n *      Local *cartesian* coordinate system [X,Y,Z]. By convention, this local coordinate system is\n *      interpreted in two different ways, depending on whether or not the object is a camera:\n *          Typical objects: [+X = left, +Y = up, +Z = forward]\n *          Camera objects: [+X = right, +Y = up, -Z = forward]\n * `visual-space` -\n *      Local *spherical* coordinate system [azimuth, elevation, distance], where:\n *          `azimuth` (-180 to 180 DEGREES) an angle around the horizontal plane\n *              (increasing from left to right, with 0deg being aligned with this object's natural `forward` vector)\n *          `elevation` (-90 to 90 DEGREES ) an angle above or below the horizontal plane\n *              (increases from below to above, with 0deg at the horizon)\n *          `distance` is distance along the direction defined by the azimuth and elevation\n *      Unlike object-space, visual-space is consistent for camera and non-camera objects.\n */\nexport class SpatialMetrics {\n\n    public matrixWorldGetter = 'target' as 'current' | 'target'\n\n    private static _metrics = new WeakMap<THREE.Object3D, SpatialMetrics>()\n\n    public static objectFilter = (o:THREE.Object3D) => !o.layout.isBoundingContext()\n\n    static get(o:THREE.Object3D) {\n        if (this._metrics.has(o)) return this._metrics.get(o)!\n        this._metrics.set(o, new SpatialMetrics(o))\n        return this._metrics.get(o)!\n    }\n\n    static getCartesianForSphericalDirection(sphericalDirection: THREE.Vector2|THREE.Vector3, out: THREE.Vector3) { \n        const visualElevationRadians = THREE.Math.DEG2RAD * sphericalDirection.y\n        const visualAzimuthRadians = THREE.Math.DEG2RAD * sphericalDirection.x\n        const y = Math.sin(visualElevationRadians)\n        const x = Math.cos(visualElevationRadians) * Math.sin(visualAzimuthRadians)\n        const z = - Math.cos(visualElevationRadians) * Math.cos(visualAzimuthRadians)\n        out.set(x, y, z).normalize()\n        return out\n    }\n\n    static getSphericalDirectionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector2) {\n        const direction = vectors.get().copy(cartesian).normalize()\n        out.y = Math.asin(direction.y) * THREE.Math.RAD2DEG\n        out.x = Math.atan2(direction.x, -direction.z) * THREE.Math.RAD2DEG\n        vectors.pool(direction)\n        return out\n    }\n\n    static getSphericalPositionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector3) {\n        const distance = cartesian.length()\n        const direction = out.copy(cartesian).normalize()\n        out.y = Math.asin(direction.y) * THREE.Math.RAD2DEG\n        out.x = Math.atan2(direction.x, -direction.z) * THREE.Math.RAD2DEG\n        out.z = distance\n        return out\n    }\n\n    static getCartesianForSphericalPosition(sphericalPosition:THREE.Vector3, out: THREE.Vector3) {\n        const distance = sphericalPosition.z\n        const visualDirection = vectors2.get().set(sphericalPosition.x, sphericalPosition.y)\n        SpatialMetrics.getCartesianForSphericalDirection(visualDirection, out).multiplyScalar(distance)\n        vectors2.pool(visualDirection)\n        return out\n    }\n\n    private constructor(public object: THREE.Object3D) {}\n\n    private getMatrixWorld(o:THREE.Object3D) {\n        return this.matrixWorldGetter === 'current' ? \n            o.matrixWorld : o.transitioner.matrixWorldTarget\n    }\n\n    getCartesianForVisualDirection(visualDirection: THREE.Vector2, out: THREE.Vector3) {\n        SpatialMetrics.getCartesianForSphericalDirection(visualDirection, out)\n        if (!(this.object as THREE.Camera).isCamera) { out.applyQuaternion(rotateY180) }\n        return out\n    }\n\n    getVisualDirectionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector2) {\n        const cartesianPosition = vectors.get().copy(cartesian)\n        if (!(this.object as THREE.Camera).isCamera) { cartesianPosition.applyQuaternion(rotateY180) }\n        SpatialMetrics.getSphericalDirectionForCartesian(cartesianPosition, out)\n        vectors.pool(cartesianPosition)\n        return out\n    }\n\n    getVisualPositionForCartesianPosition(cartesianPosition: THREE.Vector3, out: THREE.Vector3) {\n        const position = out.copy(cartesianPosition)\n        if (!(this.object as THREE.Camera).isCamera) { position.applyQuaternion(rotateY180) }\n        SpatialMetrics.getSphericalPositionForCartesian(position, out)\n        return out\n    }\n\n    getCartesianForVisualPosition(visualPosition:THREE.Vector3, out: THREE.Vector3) {\n        const distance = visualPosition.z\n        const visualDirection = vectors2.get().set(visualPosition.x, visualPosition.y)\n        this.getCartesianForVisualDirection(visualDirection, out).multiplyScalar(distance)\n        vectors2.pool(visualDirection)\n        return out\n    }\n\n    /**\n     * Calculate the local position of target in `object space`\n     */\n    getPositionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        out.setFromMatrixPosition(this.getMatrixWorld(target))  \n        const invMatrixWorld = matrices.get().getInverse(this.getMatrixWorld(this.object))\n        out.applyMatrix4(invMatrixWorld)\n        matrices.pool(invMatrixWorld)\n        return out\n    }\n\n    /**\n     * Calculate the local distance of the target object\n     * (Note: this is the same for both `object-space` and `visual-space`)\n     */\n    getDistanceOf(target: THREE.Object3D) {\n        const vec = vectors.get()\n        const result = this.getPositionOf(target, vec).length()\n        vectors.pool(vec)\n        return result\n    }\n\n    /**\n     * Calculate the local direction of the target object in `object-space`\n     *\n     * Remember, by convention:\n     *     Normal objects: [+X = left, +Y = up, +Z = forward]\n     *     Camera objects: [+X = right, +Y = up, -Z = forward]\n     * Special Case: if both objects are at the same *exact* position,\n     *      the result is a `forward` vector ([0,0,-1] for cameras, [0,0,1] for other objects)\n     */\n    getDirectionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        const position = this.getPositionOf(target, out)\n        const distance = position.lengthSq()\n        if (distance === 0 || !isFinite(distance)) { // if distance is 0\n            if ((this.object as THREE.Camera).isCamera) { return out.set(0, 0, -1) }\n            return out.set(0, 0, 1)\n        }\n        return position.normalize()\n    }\n\n    /**\n     * Get the world direction of the target object.\n     *\n     * Special Case: if both objects are at the same *exact* position,\n     *      the result is a `forward` vector ([0,0,-1] for cameras, [0,0,1] for other objects),\n     *      transformed into world coordinates\n     */\n    getWorldDirectionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        return this.getDirectionOf(target, out).transformDirection(this.getMatrixWorld(this.object))\n    }\n\n    getClosestOrthogonalOrientationOf(target: THREE.Object3D, out: THREE.Quaternion) {\n        const o = this.object\n        const viewToObjectMat = (o ? matrices.get().getInverse(this.getMatrixWorld(o)) : matrices.get())\n                .multiply(this.getMatrixWorld(target))\n        const mat = viewToObjectMat.extractRotation(viewToObjectMat)\n        const orientation = out.setFromRotationMatrix(mat)\n\n        const forwardDirection = vectors.get().set(0,0,1).applyQuaternion(orientation)\n        const upDirection = vectors.get().set(0,1,0).applyQuaternion(orientation)\n\n        let distForward = Infinity\n        let distUp = Infinity\n        let closestForwardDirection!:THREE.Vector3\n        let closestUpDirection!:THREE.Vector3\n\n        for (const dir of directions) {\n            let dist = upDirection.distanceToSquared(dir)\n            if (dist < distUp) {\n                distUp = dist\n                closestUpDirection = dir\n            }\n        }\n\n        for (const dir of directions) {\n            // avoid having forward & up defined on the same axis\n            if (dir.x && closestUpDirection.x) continue\n            if (dir.y && closestUpDirection.y) continue\n            if (dir.z && closestUpDirection.z) continue\n            let dist = forwardDirection.distanceToSquared(dir)\n            if (dist < distForward) {\n                distForward = dist\n                closestForwardDirection = dir\n            }\n        }\n\n        mat.identity()\n        mat.lookAt(closestForwardDirection, V_000, closestUpDirection)\n        orientation.setFromRotationMatrix(mat)\n        matrices.pool(mat)\n        o.updateMatrixWorld()\n    }\n\n    /**\n     * Set a position for the *target object*,\n     * based on the visual-space of *this object*.\n     *\n     * If the object has no bounding sphere, or if a visualSize is not specified,\n     * then the current distance will be assumed.\n     *\n     * @param target\n     * @param visualDirection the desired visual direction to the target\n     * @param visualSize the desired visual size of the target (in DEGREES)\n     * @param alpha a linear interpolation value (default is 1)\n     */\n    // setPositionFor( target: THREE.Object3D,\n    //                 visualDirection: THREE.Vector2,\n    //                 visualSize?: number,\n    //                 alpha = 1) {\n    //     let distance: number\n    //     if (typeof visualSize === 'number' && visualSize > 0) {\n    //         distance = this.computeDistanceFor(target, visualSize)\n    //     } else {\n    //         distance = this.getDistanceOf(target)\n    //     }\n    //     const start = vectors.get().copy(target.position)\n    //     const end = target.position\n    //     this.getCartesianForVisualDirection(visualDirection, end)\n    //     end.transformDirection(this.object.matrixWorld).multiplyScalar(distance)\n    //     target.parent && target.parent.worldToLocal(end)\n    //     target.position.copy(start.lerp(end, alpha))\n    //     vectors.pool(start)\n    // }\n\n    /**\n     * Set a new scale for the target that\n     * would make it have the desired visual size\n     * in this object's `visual-space`.\n     *\n     * @param target\n     * @param visualSize the desired visual size of the target (in DEGREES)\n     * @param alpha a linear interpolation value (default is 1)\n     */\n    // setScaleFor(target: THREE.Object3D, visualSize: number, alpha = 1) {\n    //     const idealDistance = this.computeDistanceFor(target, visualSize)\n    //     const currentDistance = this.getDistanceOf(target)\n    //     const distanceScale = idealDistance / currentDistance\n    //     const start = vectors.get().copy(target.scale)\n    //     const end = target.scale\n    //     if (isFinite(distanceScale)) { end.multiplyScalar(distanceScale) }\n    //     target.scale.copy(start.lerp(end, alpha))\n    //     vectors.pool(start)\n    // }\n\n    // /**\n    //  * Perform a look-at operation on the target object, based\n    //  * on this object's local up direction.\n    //  * @param target\n    //  */\n    // setOrientationFor(target: THREE.Object3D, alpha = 1) {\n    //     const localObjectUp = vectors.get().set(0, 1, 0)\n    //     const savedTargetUp = vectors.get().copy(target.up)\n    //     const globalObjectUp = localObjectUp.transformDirection(this.object.matrixWorld)\n    //     target.up.copy(globalObjectUp)\n    //     const start = quaternions.get().copy(target.quaternion)\n    //     const lookAtVector = vectors.get().setFromMatrixPosition(this.object.matrixWorld)\n    //     target.lookAt(lookAtVector)\n    //     target.up.copy(savedTargetUp)\n    //     const end = target.quaternion\n    //     target.quaternion.copy(start.slerp(end, alpha))\n    //     vectors.pool(localObjectUp, savedTargetUp, lookAtVector)\n    //     quaternions.pool(start)\n    // }\n\n\n    // computeDistanceFor(target: THREE.Object3D, visualSize: number): number {\n    //     if (visualSize < 0 || visualSize > 360) { throw new Error('Invalid visualSize, must be between [0-360]') }\n    //     const targetMatrixWorldInverse = matrices.get().getInverse(this.getMatrixWorld(target))\n    //     const frustum = this.getVisualFrustumOf(target)\n    //     return 0\n    //     // if (sphereRadius === 0) { return this.getDistanceOf(target) }\n\n    //     // if (visualSize > 180) {\n    //     //     // special case: linearly decrease distance with increasing visual size within the bounding sphere.\n    //     //     return (360 - visualSize / 180) * sphereRadius\n    //     // }\n\n    //     // // see https://stackoverflow.com/questions/21648630/radius-of-projected-sphere-in-screen-space\n    //     // return sphereRadius / Math.sin( THREE.Math.DEG2RAD * visualSize / 2 )\n    // }\n\n    getOrientationOf(target: THREE.Object3D, out: THREE.Quaternion) {\n        const rotMat = matrices.get()\n        const targetWorldOrientation = quaternions.get().setFromRotationMatrix(rotMat.extractRotation(this.getMatrixWorld(target)))\n        const inverseThisWorldOrientation = quaternions.get().setFromRotationMatrix(rotMat.extractRotation(this.getMatrixWorld(this.object))).inverse()\n        out.multiplyQuaternions(inverseThisWorldOrientation, targetWorldOrientation)\n        quaternions.pool(targetWorldOrientation) \n        quaternions.pool(inverseThisWorldOrientation)\n        matrices.pool(rotMat)\n        return out\n    } \n\n    /**\n     * Calculate the visual direction towards the target object.\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If pointing directly towards the target object, the direction is [0,0] (forward)\n     * If pointing directly opposite of the target object, the direction is [0,-180] (backwards)\n     * Special Case: if both are at the same exact position, the direction is [0,0] (forward)\n     */\n    getVisualDirectionOf(target: THREE.Object3D, out: THREE.Vector2) {\n        const direction = this.getDirectionOf(target, vectors.get())\n        const visualDirection = this.getVisualDirectionForCartesian(direction, out)\n        vectors.pool(direction)\n        return visualDirection\n    }\n\n\n    /**\n     * Calculate the visual angle towards the target object.\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If the target object is to the right of the forward vector, the angle is 0\n     * If the target object is above the forward vector, the angle is 90\n     * If the target object is to the left of the forward vector, then angle is 180\n     * If the target object is below the forward vector, the angle is 270\n     * If pointing directly towards the target object, the angle is 90 (up)\n     * If pointing directly opposite of the target object, the direction is [0,-180] (backwards)\n     * Special Case: if both are at the same exact position, the direction is [0,0] (forward)\n     */\n    getVisualAngleOf(target: THREE.Object3D, out: THREE.Vector2) {\n        const direction = this.getDirectionOf(target, vectors.get())\n        const visualDirection = this.getVisualDirectionForCartesian(direction, out)\n        vectors.pool(direction)\n        return visualDirection\n    }\n\n    /**\n     * Calculate the bounds of the target object, in the local `object-space` coordinate system. \n     * @param target \n     * @param out \n     */\n    getBoundsOf(target: THREE.Object3D, out = this._box) {\n        if (out === this._box) {\n            out.objectFilter = SpatialMetrics.objectFilter\n            out.objectExpansion = 'box'\n        }\n        out.coordinateSystem = this.object\n        return out.setFromObject(target)\n    }\n    private _box = new Box3\n\n\n    private _visualFrustum = new VisualFrustum(this.object)\n    getVisualFrustumOf(target: THREE.Object3D = this.object, out = this._visualFrustum) {\n        if (out === this._visualFrustum) out.objectFilter = SpatialMetrics.objectFilter\n        const camera = target as THREE.Camera\n        if (camera.isCamera) out.setFromPerspectiveProjectionMatrix(camera.projectionMatrix)\n        else out.setFromObject(target)\n        return out\n    }\n\n    // /**\n    //  * Calculate the visual bounds of the target object, in the local `visual-space` coordinate system\n    //  * @param target \n    //  * @param out \n    //  */\n    // getVisualBoundsOf(target: THREE.Object3D, out: VisualBounds) {\n    //     const direction = this.getDirectionOf(target, vectors.get())\n    //     const visualDirection = this.getVisualDirectionOf(target, vectors2.get())\n    //     const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //     const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //     const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //     _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //     this.getVisualPointFromCartesianPoint(_box.min, out.leftBottomNear)\n    //     this.getVisualPointFromCartesianPoint(_box.max, out.rightTopFar)\n        \n    //     matrices.pool(objectMatrixWorldInverse)\n    // }\n\n    /**\n     * Calculate the angular offset (in DEGREES) between this object's forward vector,\n     * and the direction towards the target object (as calculated by getDirectionOf).\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If pointing directly towards the target object, the visual offset is 0\n     * If pointing directly opposite of the target object, the visual offset is 180\n     * Special Case: if both are at the same position, the visual offset is 180\n     */\n    getVisualOffsetOf(target: THREE.Object3D): number {\n        const direction = this.getDirectionOf(target, vectors.get())\n        if (!(this.object as THREE.Camera).isCamera) { direction.applyQuaternion(rotateY180) }\n        const result = V_001.angleTo(direction) * THREE.Math.RAD2DEG\n        vectors.pool(direction)\n        return result\n    }\n\n    /**\n     * Calculate the field of view of the target object as seen by this object.\n     *\n     * The `visual size` grows from 0 to 180 as the visual bouding box of the target grows in our\n     * field of view.\n     * Once we are inside the bounding box, the `visual size` continues to\n     * increase linearly, from 180 to 360 at the center of the bounding box.\n     * If the target object has no bounding sphere defined, the result is 0.\n     *\n     * @returns visual size of the target object in DEGREES, from [0-360], in horizontal and vertical dimensions\n     */\n    // getVisualSizeOf(target: THREE.Object3D, out:THREE.Vector2) {\n    //     const direction = this.getDirectionOf(target, vectors.get())\n    //     const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //     const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //     const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //     const facingBox = _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //     const facingBoxSize = facingBox.getSize(vectors.get())\n    //     // const linearSize = mode === 'horizontal' ? facingBoxSize.x : facingBoxSize.y\n    //     // const distance = this.getDistanceOf(target)\n    //     const near = \n    //     out.x = 2 * Math.atan2(facingBoxSize.x / 2, distance) * THREE.Math.RAD2DEG\n    //     out.y = 2 * Math.atan2(facingBoxSize.y / 2, distance) * THREE.Math.RAD2DEG\n    //     vectors.pool(direction, facingBoxSize)\n    //     matrices.pool(rotation, rotatedMatrixWorld)\n    //     return out\n\n    //     // const objectMatrixWorldInverse = matrices.get().getInverse(this.object.matrixWorld)\n    //     // _box.setFromObjectBoxes(target, objectMatrixWorldInverse)\n    //     // matrices.pool(objectMatrixWorldInverse)\n    //     // const sphere = _box.getBoundingSphere(_sphere)\n    //     // const sphereRadius = sphere.radius\n    //     // if (sphereRadius <= 0) { return 0 }\n    //     // const sphereDistance = this.getDistanceOf(target)\n    //     // if (sphereDistance <= sphereRadius) {\n    //     //     return 180 + (180 * sphereDistance / sphereRadius)\n    //     // } // we are inside the bounding sphere\n    //     // // see https://stackoverflow.com/questions/21648630/radius-of-projected-sphere-in-screen-space\n    //     // return 2 * Math.asin(sphereRadius / sphereDistance) * 180 / Math.PI\n    // }\n\n    // getVisualWidthOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const width = size.x\n    //     vectors2.pool(size)\n    //     return width\n    // }\n\n    // getVisualHeightOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const height = size.y\n    //     vectors2.pool(size)\n    //     return height\n    // }\n\n    // getVisualDiameterOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const length = size.length()\n    //     vectors2.pool(size)\n    //     return length\n    // }\n\n    /**\n     * Calculate the perspective visual frustum which bounds the the target object.\n     * If no target is specified and the current object is a camera, returns \n     * a perspective visual frustum for the camera (assuming it is a perspective camera)\n     */\n    // getVisualFrustum(target:THREE.Object3D=this.object): VisualFrustum {\n    //     if (!this._visualFrustum) { this._visualFrustum =  new VisualFrustum }\n    //     const out = this._visualFrustum\n    //     const camera = this.object as THREE.Camera\n    //     if (camera.isCamera) { \n    //         const invProjection = matrices.get().getInverse(camera.projectionMatrix, true)\n    //         out.setFromBoundsMatrix(invProjection)\n    //         matrices.pool(invProjection)\n    //     } else {\n    //         const direction = this.getDirectionOf(target, vectors.get())\n    //         const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //         const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //         const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //         const facingBox = _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //         const facingBoxSize = facingBox.getSize(vectors.get())\n    //         const near = facingBox.min.z\n    //         const far = facingBox.max.z\n    //         const left = facingBox.min.x\n    //         out.x = 2 * Math.atan2(facingBoxSize.x / 2, distance) * THREE.Math.RAD2DEG\n    //         out.y = 2 * Math.atan2(facingBoxSize.y / 2, distance) * THREE.Math.RAD2DEG\n    //         matrices.get().makePerspective()\n    //     }\n    //     return out\n    // }\n\n}\n\n\nconst directions = [\n    new THREE.Vector3( 1, 0, 0),\n    new THREE.Vector3( 0, 1, 0), \n    new THREE.Vector3( 0, 0, 1), \n    new THREE.Vector3(-1, 0, 0), \n    new THREE.Vector3( 0,-1, 0), \n    new THREE.Vector3( 0, 0,-1), \n]\n\n\n// export function getMetrics(obj: THREE.Object3D) : SpatialMetrics {\n//     if (_metricsMap.has(obj)) return _metricsMap.get(obj)!\n//     const metrics = new SpatialMetrics(obj)\n//     _metricsMap.set(obj, metrics)\n//     return metrics\n// }","import * as THREE from 'three'\nimport { SpatialMetrics, Box3 } from '../metrics/SpatialMetrics'\nimport { matrices, vectors } from '../utils'\n\nexport const LayoutFit = {\n    contain: 'contain',\n    contain3d: 'contain3d',\n    cover: 'cover',\n    cover3d: 'cover3d',\n    fill: 'fill',\n    fill3d: 'fill3d',\n}\n\nconst FIT_CONTAIN_3D = {\n    contain: 0,\n    contain3d: 1,\n    cover: 0,\n    cover3d: 0,\n    fill: 0,\n    fill3d: 0,\n}\n\nexport type LayoutFitType = keyof typeof LayoutFit\n\nexport type LayoutX = number|'center'|'left'|'right'\nexport type LayoutY = number|'center'|'top'|'bottom'\nexport type LayoutZ = number|'center'|'front'|'back'\n\n\n/**\n * Extend THREE.Object3D functionality with 3D layout functionality.\n * \n * Features include:\n *  - automatic bounds computation\n *  - modify alignment, origin, and size with respect to bounds and parent bounds\n *  - pose & layout transitions\n */\nexport class Layout {\n\n    /**\n     * Force local layout bounds to be excluded from the parent bounding context \n     * (effectively, forces a new bounding context)\n     */\n    forceBoundsExclusion = false\n\n    /**\n     * Specifies the degree to which the layout properties (`absolute`, and `relative`) influence \n     * the final transform. At 0, the layout properties have no effect. At 1, they have\n     * their full intended effect. \n     */\n    weight = 1\n    \n    /**\n     * Specify absolute layout bounds. A mininum or maximum boundary\n     * can be set to `NaN` in any dimension to remain unspecified. \n     * \n     * Note: any specified `relative` and `absolute` bounds\n     * are combined to determine `computedBounds`\n     */\n    absolute =  new Box3\n\n    /**\n     * Specify relative layout bounds, with -1 to 1 spanning the \n     * range of `computedOuterBounds` for each dimension. A mininum or \n     * maximum boundary can be set to `NaN` in any dimension to remain \n     * unspecified. \n     * \n     * Note: any specified `relative` and `absolute` bounds\n     * are combined to determine `computedBounds`\n     */\n    relative = new Box3\n\n    /**\n     * Specify the orientation of the layout. Default is identity. \n     */\n    orientation = new THREE.Quaternion\n\n    /**\n     * \n     */\n    minRelativeSize = new THREE.Vector3\n\n    /**\n     * \n     */\n    minAbsoluteSize = new THREE.Vector3\n\n    /** \n     * Specifies how the object should fit within `absolute` and `relative` bounds,\n     * which determines the `computedBounds`\n    */\n    set fit(fit:LayoutFitType) {\n        this._fit = fit\n        for (const id in this.fitTargets) this.fitTargets[id as LayoutFitType] = 0\n        this.fitTargets[fit] = 1\n    }\n    get fit() {\n        return this._fit\n    }\n    private _fit = 'contain' as LayoutFitType\n\n    /** Used internally. */\n    fitTargets = {\n        contain: 1,\n        contain3d: 0,\n        cover: 0,\n        cover3d: 0,\n        fill: 0,\n        fill3d: 0,\n    }\n\n    /**\n     * \n     */\n    fitAlign = new THREE.Vector3\n\n    clip = new Box3\n\n    inner = new Box3\n    innerAutoUpdate = true\n\n    computedBounds = new Box3\n    computedInnerBounds = new Box3\n    computedOuterBounds = new Box3\n    computedClipBounds = new Box3\n\n    public matrix = new THREE.Matrix4\n\n    private _boundsValid = false\n\n    constructor(public object:THREE.Object3D) {\n        this.computedInnerBounds.objectFilter = SpatialMetrics.objectFilter\n        this.computedInnerBounds.objectExpansion = 'box'\n        this.computedInnerBounds.coordinateSystem = object\n    }\n\n    invalidateBounds() {\n        this._boundsValid = false\n    }\n\n    resetLayout() {\n        this.fit = 'contain'\n        this.absolute.makeEmpty()\n        this.relative.makeEmpty()\n    }\n\n    resetPose() {\n        this.object.position.setScalar(0)\n        this.object.quaternion.set(0,0,0,1)\n        this.object.scale.setScalar(1)\n    }\n\n    reset() {\n        this.resetLayout()\n        this.resetPose()\n    }\n\n    /**\n     * If true, the layout properties are effectively noop\n     */\n    isPassive() {\n        return this.absolute.isEmpty() && this.relative.isEmpty()\n    }\n\n    /**\n     * If true, the `object` should not be included in the bounding calculation\n     * for any parent layouts.\n     */\n    isBoundingContext() {\n        if (this.forceBoundsExclusion) return true\n        if (!this.isPassive()) {\n            this.forceBoundsExclusion = true\n            return true\n        }\n        return false\n    }\n\n    updateMatrix() {\n        const bounds = this.computedBounds\n        \n        if (this.isPassive()) {\n            this.matrix.identity()\n            return\n        }\n\n        if (!this._boundsValid) {\n            Layout.updateInnerBounds(this.object)\n            Layout.updateOuterBounds(this.object)\n            if (this.computedInnerBounds.isEmpty()) {\n                this.computedInnerBounds.copy(this.computedOuterBounds)\n            }\n            this._boundsValid = true\n        }\n\n        const {absolute, relative, fitTargets, orientation, computedInnerBounds, computedOuterBounds, clip} = this\n        \n        // combine relative and absolute bounds\n\n        bounds.makeEmpty()\n        computedOuterBounds.relativeToAbsolute(relative.min, bounds.min)\n        computedOuterBounds.relativeToAbsolute(relative.max, bounds.max)\n        if (isFinite(absolute.min.x)) bounds.min.x = (isFinite(bounds.min.x) ? bounds.min.x : 0) + absolute.min.x\n        if (isFinite(absolute.min.y)) bounds.min.y = (isFinite(bounds.min.y) ? bounds.min.y : 0) + absolute.min.y\n        if (isFinite(absolute.min.z)) bounds.min.z = (isFinite(bounds.min.z) ? bounds.min.z : 0) + absolute.min.z\n        if (isFinite(absolute.max.x)) bounds.max.x = (isFinite(bounds.max.x) ? bounds.max.x : 0) + absolute.max.x\n        if (isFinite(absolute.max.y)) bounds.max.y = (isFinite(bounds.max.y) ? bounds.max.y : 0) + absolute.max.y\n        if (isFinite(absolute.max.z)) bounds.max.z = (isFinite(bounds.max.z) ? bounds.max.z : 0) + absolute.max.z\n\n        // apply clip\n\n        if (!clip.isEmpty()) {\n            // const clipMax = vectors.get().copy(clip.max)//.subVectors(clip.max, bounds.max).min(V_000)\n            // const clipMin = vectors.get().copy(clip.min)//.subVectors(clip.min, bounds.min).max(V_000)\n            const clipMax = computedInnerBounds.absoluteToRelative(clip.max, vectors.get())//.subVectors(clip.max, bounds.max).min(V_000)\n            const clipMin = computedInnerBounds.absoluteToRelative(clip.min,Â vectors.get())//.subVectors(clip.min, bounds.min).max(V_000)\n            bounds.relativeToAbsolute(clipMax, clipMax)//.subVectors(clip.max, bounds.max).min(V_000)\n            bounds.relativeToAbsolute(clipMin, clipMin)//.subVectors(clip.min, bounds.min).max(V_000)\n            if (!isFinite(clipMax.x)) clipMax.x = Infinity\n            if (!isFinite(clipMax.y)) clipMax.y = Infinity\n            if (!isFinite(clipMax.z)) clipMax.z = Infinity\n            if (!isFinite(clipMin.x)) clipMin.x = -Infinity\n            if (!isFinite(clipMin.y)) clipMin.y = -Infinity\n            if (!isFinite(clipMin.z)) clipMin.z = -Infinity\n            bounds.max.min(clipMax)\n            bounds.min.max(clipMin)\n            vectors.pool(clipMax)\n            vectors.pool(clipMin)\n        }\n\n        // compute min size\n        const minSize = computedOuterBounds.getSize(vectors.get())\n            .multiply(this.minRelativeSize).max(this.minAbsoluteSize)\n\n        // compute final size\n        const innerSize = computedInnerBounds.getSize(vectors.get())\n        const layoutScale = bounds.getSize(vectors.get()).max(minSize).divide(innerSize)\n        Layout.adjustScaleForFit(fitTargets, layoutScale)\n        const finalSize = vectors.get().multiplyVectors(innerSize, layoutScale)\n        finalSize.x = Math.abs(finalSize.x)\n        finalSize.y = Math.abs(finalSize.y)\n        finalSize.z = Math.abs(finalSize.z)\n\n        if (!isFinite(bounds.min.x) && !isFinite(bounds.max.x)) {\n            bounds.max.x = finalSize.x / 2\n            bounds.min.x = - bounds.max.x\n        }\n        if (!isFinite(bounds.min.y) && !isFinite(bounds.max.y)) {\n            bounds.max.y = finalSize.y / 2\n            bounds.min.y = - bounds.max.y\n        }\n        if (!isFinite(bounds.min.z) && !isFinite(bounds.max.z)) {\n            bounds.max.z = finalSize.z / 2\n            bounds.min.z = - bounds.max.z\n        }\n        if (!isFinite(bounds.max.x)) bounds.max.x = bounds.min.x + finalSize.x\n        if (!isFinite(bounds.max.y)) bounds.max.y = bounds.min.y + finalSize.y\n        if (!isFinite(bounds.max.z)) bounds.max.z = bounds.min.z + finalSize.z\n        if (!isFinite(bounds.min.x)) bounds.min.x = bounds.max.x - finalSize.x\n        if (!isFinite(bounds.min.y)) bounds.min.y = bounds.max.y - finalSize.y\n        if (!isFinite(bounds.min.z)) bounds.min.z = bounds.max.z - finalSize.z\n\n        const orient = matrices.get().makeRotationFromQuaternion(orientation)\n        const halfFinalSize = finalSize.divideScalar(2)\n\n        const layoutAlignOffset = bounds.relativeToAbsolute(this.fitAlign, vectors.get())\n        bounds.min.copy(layoutAlignOffset).sub(halfFinalSize)\n        bounds.max.copy(layoutAlignOffset).add(halfFinalSize)\n        bounds.applyMatrix4(orient)\n\n        const innerAlignOffset = computedInnerBounds.relativeToAbsolute(this.fitAlign, vectors.get())\n        innerAlignOffset.multiply(layoutScale).applyMatrix4(orient)\n        bounds.min.sub(innerAlignOffset)\n        bounds.max.sub(innerAlignOffset)\n\n        // compose layout matrix\n\n        const layoutPosition = bounds.getCenter(vectors.get())\n        this.matrix.compose(layoutPosition, orientation, layoutScale)\n        \n        // cleanup\n\n        vectors.pool(innerSize)\n        vectors.pool(minSize)\n        vectors.pool(finalSize)\n        vectors.pool(layoutPosition)\n        vectors.pool(layoutScale)\n        vectors.pool(layoutAlignOffset)\n        // vectors.pool(innerAlignOffset)\n    }\n\n    public static updateInnerBounds(o:THREE.Object3D) {\n        const layout = o.layout\n        const bounds = layout.computedInnerBounds\n        if (layout._boundsValid) return bounds\n        bounds.coordinateSystem = o\n        bounds.setFromObject(o).union(layout.inner)\n        if (bounds.min.x === bounds.max.x) bounds.max.x += 1e-10\n        if (bounds.min.y === bounds.max.y) bounds.max.y += 1e-10\n        if (bounds.min.z === bounds.max.z) bounds.max.z += 1e-10\n        return bounds\n    }\n    \n    public static updateOuterBounds(o:THREE.Object3D) {\n        const layout = o.layout\n        const parentBounds = layout.computedOuterBounds\n\n        if (layout._boundsValid) return parentBounds\n\n        const parent = o.parent\n        const cameraParent = parent as THREE.Camera\n        if (cameraParent && cameraParent.isCamera) {\n            const position = vectors.get().setFromMatrixPosition(o.matrix)\n            const projectionMatrixInverse = matrices.get().getInverse(cameraParent.projectionMatrix)\n            const near = parentBounds.min.set(0,0,-1).applyMatrix4(projectionMatrixInverse).z\n            const far = parentBounds.min.set(0,0,1).applyMatrix4(projectionMatrixInverse).z\n            const projectionZ = parentBounds.min.set(0,0,position.z).applyMatrix4(cameraParent.projectionMatrix).z\n            parentBounds.min.set(-1, -1, projectionZ)\n            parentBounds.max.set(1, 1, projectionZ)\n            parentBounds.min.applyMatrix4(projectionMatrixInverse)\n            parentBounds.max.applyMatrix4(projectionMatrixInverse)\n            parentBounds.min.z = far\n            parentBounds.max.z = near\n            vectors.pool(position)\n            matrices.pool(projectionMatrixInverse)\n        } else if (parent) {\n            parentBounds.copy(parent.layout.computedInnerBounds)\n        } else {\n            parentBounds.makeEmpty()\n        }\n\n        const orient = matrices.get().makeRotationFromQuaternion(layout.orientation)\n        parentBounds.applyMatrix4(orient.getInverse(orient))\n        matrices.pool(orient)\n        return parentBounds\n    }\n\n    public static _fitScale = new THREE.Vector3\n    public static adjustScaleForFit(fitTargets:typeof Layout.prototype.fitTargets, sizeScale:THREE.Vector3) {\n        const fitScale = this._fitScale\n        const out = sizeScale\n        const min = 1e-10\n        const max = 1e10\n\n        if (!isFinite(out.x) && !isFinite(out.y) && !isFinite(out.z)) {\n            out.setScalar(1)\n            return out\n        }\n        \n        if (!isFinite(out.x)) out.x = max\n        if (!isFinite(out.y)) out.y = max\n        if (!isFinite(out.z)) out.z = max\n        out.x = out.x < 0 ? THREE.Math.clamp(out.x, -max, -min) : THREE.Math.clamp(out.x, min, max)\n        out.y = out.y < 0 ? THREE.Math.clamp(out.y, -max, -min) : THREE.Math.clamp(out.y, min, max)\n        out.z = out.z < 0 ? THREE.Math.clamp(out.z, -max, -min) : THREE.Math.clamp(out.z, min, max)\n        \n        const {x,y,z} = out\n        const ax = Math.abs(x)\n        const ay = Math.abs(y)\n        const az = Math.abs(z)\n\n        // fill3d: allow all dimensions to fill layout size\n        if (fitTargets.fill3d) {\n            // no-op\n        }\n\n        // fill (2D): set z to average of x and y\n        if (fitTargets.fill) {\n            fitScale.set(x, y, x + y / 2)\n            out.lerp(fitScale, fitTargets.fill)\n        }\n\n        // contain (2D): set all dimensions to smallest of x or y\n        if (fitTargets.contain) {\n            if (ax < ay) {\n                fitScale.set(x, x, x)\n            } else {\n                fitScale.set(y, y, y)\n            }\n            out.lerp(fitScale, fitTargets.contain)\n        }\n\n        // contain3d: set all dimensions to smallest of x or y or z\n        if (fitTargets.contain3d) {\n            if (ax < ay && ax < az) {\n                fitScale.set(x, x, x)\n            } else if (ay < ax && ay < az) {\n                fitScale.set(y, y, y)\n            } else {\n                fitScale.set(z, z, z)\n            }\n            out.lerp(fitScale, fitTargets.contain3d)\n        }\n\n        // cover (2D): set all dimensions to largest of x or y\n        if (fitTargets.cover) {\n            if (ax > ay) {\n                fitScale.set(x, x, x)\n            } else {\n                fitScale.set(y, y, y)\n            }\n            out.lerp(fitScale, fitTargets.cover)\n        }\n\n        // cover (3D): set all dimensions to largest of x or y or z\n        if (fitTargets.cover3d) {\n            if (ax > ay && ax > az) {\n                fitScale.set(x, x, x)\n            } else if (ay > ax && ay > az) {\n                fitScale.set(y, y, y)\n            } else {\n                fitScale.set(z, z, z)\n            }\n            out.lerp(fitScale, fitTargets.cover3d)\n        }\n\n        // clamp between 1e-10 and 1e10\n        if (!isFinite(out.x)) out.x = min\n        if (!isFinite(out.y)) out.y = min\n        if (!isFinite(out.z)) out.z = min\n        out.x = out.x < 0 ? THREE.Math.clamp(out.x, -max, -min) : THREE.Math.clamp(out.x, min, max)\n        out.y = out.y < 0 ? THREE.Math.clamp(out.y, -max, -min) : THREE.Math.clamp(out.y, min, max)\n        out.z = out.z < 0 ? THREE.Math.clamp(out.z, -max, -min) : THREE.Math.clamp(out.z, min, max)\n        return out\n    }\n}\n\n// function isNaN(a:number) {\n//     return a !== a\n// }","var DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nvar reversed = function (easing) {\n    return function (p) {\n        return 1 - easing(1 - p);\n    };\n};\nvar mirrored = function (easing) {\n    return function (p) {\n        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n    };\n};\nvar createReversedEasing = reversed;\nvar createMirroredEasing = mirrored;\nvar createExpoIn = function (power) {\n    return function (p) {\n        return Math.pow(p, power);\n    };\n};\nvar createBackIn = function (power) {\n    return function (p) {\n        return p * p * ((power + 1) * p - power);\n    };\n};\nvar createAnticipateEasing = function (power) {\n    var backEasing = createBackIn(power);\n    return function (p) {\n        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n    };\n};\nvar linear = function (p) {\n    return p;\n};\nvar easeIn = /*#__PURE__*/createExpoIn(2);\nvar easeOut = /*#__PURE__*/reversed(easeIn);\nvar easeInOut = /*#__PURE__*/mirrored(easeIn);\nvar circIn = function (p) {\n    return 1 - Math.sin(Math.acos(p));\n};\nvar circOut = /*#__PURE__*/reversed(circIn);\nvar circInOut = /*#__PURE__*/mirrored(circOut);\nvar backIn = /*#__PURE__*/createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nvar backOut = /*#__PURE__*/reversed(backIn);\nvar backInOut = /*#__PURE__*/mirrored(backIn);\nvar anticipate = /*#__PURE__*/createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nvar ca = 4356.0 / 361.0;\nvar cb = 35442.0 / 1805.0;\nvar cc = 16061.0 / 1805.0;\nvar bounceOut = function (p) {\n    var p2 = p * p;\n    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\nvar bounceIn = function (p) {\n    return 1.0 - bounceOut(1.0 - p);\n};\nvar bounceInOut = function (p) {\n    return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n};\nvar NEWTON_ITERATIONS = 8;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar K_SPLINE_TABLE_SIZE = 11;\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nvar FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined';\nvar a = function (a1, a2) {\n    return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\nvar b = function (a1, a2) {\n    return 3.0 * a2 - 6.0 * a1;\n};\nvar c = function (a1) {\n    return 3.0 * a1;\n};\nvar getSlope = function (t, a1, a2) {\n    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\nvar calcBezier = function (t, a1, a2) {\n    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n    var binarySubdivide = function (aX, aA, aB) {\n        var i = 0;\n        var currentX;\n        var currentT;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            } else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    };\n    var newtonRaphsonIterate = function (aX, aGuessT) {\n        var i = 0;\n        var currentSlope = 0;\n        var currentX;\n        for (; i < NEWTON_ITERATIONS; ++i) {\n            currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    };\n    var calcSampleValues = function () {\n        for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\n            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n        }\n    };\n    var getTForX = function (aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = K_SPLINE_TABLE_SIZE - 1;\n        var dist = 0.0;\n        var guessForT = 0.0;\n        var initialSlope = 0.0;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += K_SAMPLE_STEP_SIZE;\n        }\n        --currentSample;\n        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n        initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n        }\n    };\n    calcSampleValues();\n    var resolver = function (aX) {\n        var returnValue;\n        if (mX1 === mY1 && mX2 === mY2) {\n            returnValue = aX;\n        } else if (aX === 0) {\n            returnValue = 0;\n        } else if (aX === 1) {\n            returnValue = 1;\n        } else {\n            returnValue = calcBezier(getTForX(aX), mY1, mY2);\n        }\n        return returnValue;\n    };\n    return resolver;\n}\n\nexport { reversed, mirrored, createReversedEasing, createMirroredEasing, createExpoIn, createBackIn, createAnticipateEasing, linear, easeIn, easeOut, easeInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate, bounceOut, bounceIn, bounceInOut, cubicBezier };\n","import * as THREE from 'three'\nimport { vectors2, vectors, quaternions, matrices, V_00, V_000, Q_IDENTITY } from '../utils'\nimport * as e from '@popmotion/easing'\nimport { isUndefined } from 'util';\n\n// redecalre popmotion types here so that the consumer doesn't have to \n// add '@popmotion/easing' as a dependency to get the types\n/**\n * Easing functions from '@popmotion/easing'\n */\nnamespace Easings {\n    export declare type Easing = (v: number) => number;\n    export declare type EasingModifier = (easing: Easing) => Easing;\n    export declare const reversed: EasingModifier;\n    export declare const mirrored: EasingModifier;\n    export declare const createReversedEasing: EasingModifier;\n    export declare const createMirroredEasing: EasingModifier;\n    export declare const createExpoIn: (power: number) => Easing;\n    export declare const createBackIn: (power: number) => Easing;\n    export declare const createAnticipateEasing: (power: number) => Easing;\n    export declare const linear: Easing;\n    export declare const easeIn: Easing;\n    export declare const easeOut: Easing;\n    export declare const easeInOut: Easing;\n    export declare const circIn: Easing;\n    export declare const circOut: Easing;\n    export declare const circInOut: Easing;\n    export declare const backIn: Easing;\n    export declare const backOut: Easing;\n    export declare const backInOut: Easing;\n    export declare const anticipate: Easing;\n    export declare const bounceOut: (p: number) => number;\n    export declare const bounceIn: (p: number) => number;\n    export declare const bounceInOut: (p: number) => number;\n    export declare function cubicBezier(mX1: number, mY1: number, mX2: number, mY2: number): (aX: number) => number;\n}\n\nconst easing = (e as any) as typeof Easings\n\nexport {easing}\n\nfunction defined(...obj:any[]) {\n    for (const o of obj) {\n        if (typeof o !== 'undefined') return o\n    }\n}\n\ntype WidenLiteral<T> = T extends number ? number : T\n\nexport type Multiplier<T> = number | (T extends THREE.Matrix4 ? {position?:number,scale?:number,quaternion?:number} : never)\n\nexport class TransitionTarget<T extends ValueType = ValueType>{\n    constructor(\n        public value: T,\n        public duration: number,\n        public easing: (number) => number\n    ) {}\n    public elapsed: 0\n}\n\ntype ValueTypes = number|THREE.Vector2|THREE.Vector3|THREE.Quaternion|THREE.Color|THREE.Matrix4|THREE.Box3\nexport type ValueType<T extends ValueTypes=ValueTypes> = WidenLiteral<T>\n\nexport type ValueRange<T> = T extends THREE.Vector2|THREE.Vector3 ? T : \n    T extends THREE.Matrix4|THREE.Box3 ? THREE.Vector3 : \n    T extends number ? number : never\n\nexport type TransitionableConstructorKeys = \n    'target'|'multiplier'|'duration'|'easing'|'threshold'|\n    'delay'|'debounce'|'maxWait'|'path'\nexport type TransitionerConstructOptions<T extends ValueType> = Pick<Transitionable<T>, TransitionableConstructorKeys>\n\nexport type TransitionableConfig = Pick<Transitionable<ValueType>,'delay'|'debounce'|'maxWait'|'multiplier'|'duration'|'easing'|'threshold'>\n\nexport class Transitionable<T extends ValueType = ValueType> {\n\n    constructor(config:TransitionerConstructOptions<T>) {\n        Object.assign(this, config)\n        const t = this.target\n        if (typeof this.current === 'undefined') \n            this.current = (typeof t === 'number' ? t : (t as any).clone()) as  WidenLiteral<T>\n        if (typeof this.start === 'undefined') \n            this.start = (typeof t === 'number' ? t : (t as any).clone()) as  WidenLiteral<T>\n    }\n\n    /**\n     * The desired target value\n     */\n    target: WidenLiteral<T>\n\n    /**\n     * The current value\n     */\n    current : WidenLiteral<T>\n\n    /**\n     * The start value\n     */\n    start : WidenLiteral<T>\n\n    /**\n     * The property path that should be used to store the current value\n     */\n    path? : string\n    \n    /**\n     * The typical range of the target value, used to determine percentage change\n     */\n    range: ValueRange<T>\n    /**\n     * The target value awaiting to be added to the `targetQueue`\n     */\n    committedTarget?: WidenLiteral<T>\n    /**\n     * A multiplier to influence the speed of the transition\n     */\n    multiplier?: number = undefined\n    /**\n     * The duration of the easing function\n     */\n    duration?: number  = undefined\n    /**\n     * The easing function \n     */\n    easing?: (alpha:number) => number = undefined\n    /**\n     * The percentage that the `target` must differ from the `committedTarget`, \n     * the last target added to the `targetQueue`, or the `current` value  (in  that order)\n     * before it is considered \"changed\". Depends on `range` being defined. \n     */\n    threshold?: number = undefined\n    /**\n     * The number of seconds in which the `target` value must remain \"changed\" before it\n     * becomes the `committedTarget`\n     */\n    delay?: number = undefined\n    /**\n     * The number of seconds in which the `committedTarget` must \n     * remain stable before it is pushed to the `targetQueue`\n     */\n    debounce?: number = undefined\n    /**\n     * The maximum number of seconds to wait before the `committedTarget`\n     * is pushed to the `targetQueue`\n     */\n    maxWait?: number = undefined\n    /**\n     * The queue of committed target values that are still influencing the current value\n     * (whose durations have not yet been exceeded)\n     */\n    targetQueue: TransitionTarget<WidenLiteral<T>>[] = []\n\n    _delayTime = 0\n    _debounceTime = 0\n    _waitTime = 0\n\n    _changePercent = 0\n\n    /**\n     * \n     */\n    update(deltaTime:number, c?:TransitionableConfig, changePercent?:number) {\n        const config = this._updateConfig(c)\n        const queue = this.targetQueue\n        const target = this.target\n        this._changePercent = changePercent = typeof changePercent === 'number' ? changePercent : this._computePercentChange()\n        deltaTime *= config.multiplier\n        \n        if (changePercent > config.threshold) {\n            if (this._delayTime > config.delay) {\n                if (typeof target === 'number') this.committedTarget = target as any\n                else {\n                    if (this.committedTarget) (this.committedTarget as any).copy(target)\n                    else this.committedTarget = (target as any).clone()\n                }\n                this._delayTime = 0\n                this._debounceTime = 0\n            }\n            this._delayTime += deltaTime\n        } else {\n            if (typeof this.committedTarget !== 'undefined') this._delayTime = 0\n            this._debounceTime += deltaTime\n        }\n\n        if (typeof this.committedTarget !== 'undefined') {\n            this._waitTime += deltaTime\n            if (this._debounceTime > config.debounce || this._waitTime > config.maxWait) {\n                queue.push({\n                    value: this.committedTarget,\n                    easing: config.easing,\n                    duration: config.duration,\n                    elapsed: 0\n                })\n                this.committedTarget = undefined\n                this._waitTime = 0\n            }\n        }\n        \n        while (queue.length && queue[0].elapsed > queue[0].duration) {\n            this.start = queue.shift()!.value\n        }\n        \n        this._setCurrent(this.start)\n        let previousTarget = this.start\n        for (const target of queue) {\n            target.elapsed += deltaTime\n            this._addTargetInfluence(previousTarget, target)\n            previousTarget = target.value\n        }\n    }\n\n    private static _c = new THREE.Color\n    private static _cBlack = new THREE.Color(0,0,0)\n\n    private _addTargetInfluence(start:WidenLiteral<T>, target:TransitionTarget<WidenLiteral<T>>) {\n        const alpha = target.duration > 0 ? target.easing( Math.min(target.elapsed, target.duration) / target.duration) : 1\n\n        if (typeof target.value !== 'number' && 'isMatrix4' in target.value) {\n            const c = this.current as THREE.Matrix4\n            const s = start as THREE.Matrix4\n            const e = target.value as THREE.Matrix4\n\n            const pos = vectors.get()\n            const quat = quaternions.get()\n            const scale = vectors.get()\n            c.decompose(pos, quat, scale)\n\n            const sPos = vectors.get()\n            const sQuat = quaternions.get()\n            const sScale = vectors.get()\n            s.decompose(sPos, sQuat, sScale)\n    \n            const tPos = vectors.get()\n            const tQuat = quaternions.get()\n            const tScale = vectors.get()\n            e.decompose(tPos, tQuat, tScale)\n    \n            pos.add(tPos.sub(sPos).lerp(V_000, 1-alpha))\n            quat.multiply(sQuat.inverse().multiply(tQuat).slerp(Q_IDENTITY, 1-alpha)).normalize()\n            scale.add(tScale.sub(sScale).lerp(V_000, 1-alpha))\n    \n            vectors.pool(pos)\n            quaternions.pool(quat)\n            vectors.pool(scale)\n            vectors.pool(sPos)\n            quaternions.pool(sQuat)\n            vectors.pool(sScale)\n            vectors.pool(tPos)\n            quaternions.pool(tQuat)\n            vectors.pool(tScale)\n            return\n        }\n\n        if (typeof target.value === 'number') {\n            this.current += THREE.Math.lerp(0, target.value-(startÂ as number), alpha) as any\n            return\n        } \n        \n        if ('isVector3' in target.value) {\n            const c = this.current as THREE.Vector3\n            const s = start as THREE.Vector3\n            const e = target.value as THREE.Vector3\n            const amount = vectors.get().copy(e).sub(s).lerp(V_000, 1-alpha)\n            c.add(amount)\n            vectors.pool(amount)\n            return\n        } \n        \n        if ('isVector2' in target.value) {\n            const c = this.current as THREE.Vector2\n            const s = start as THREE.Vector2\n            const e = target.value as THREE.Vector2\n            const amount = vectors2.get().copy(e).sub(s).lerp(V_00, 1-alpha)\n            c.add(amount)\n            vectors2.pool(amount)\n            return\n        } \n        \n        if ('isQuaternion' in target.value) {\n            const c = this.current as THREE.Quaternion\n            const s = start as THREE.Quaternion\n            const e = target.value as THREE.Quaternion\n            const amount = quaternions.get().copy(s).inverse().multiply(e).slerp(Q_IDENTITY, 1-alpha)\n            c.multiply(amount).normalize()\n            quaternions.pool(amount)\n            return\n        } \n        \n        if ('isColor' in target.value) {\n            const c = this.current as THREE.Color\n            const s = start as THREE.Color\n            const e = target.value as THREE.Color\n            const amount = Transitionable._c.copy(e).sub(s).lerp(Transitionable._cBlack, 1-alpha)\n            c.add(amount)\n            return\n        } \n        \n        if ('isBox3' in target.value) {\n            const c = this.current as THREE.Box3\n            const s = start as THREE.Box3\n            const e = target.value as THREE.Box3\n            const minAmount = vectors.get().copy(e.min).sub(s.min).lerp(V_000, 1-alpha)\n            const maxAmount = vectors.get().copy(e.max).sub(s.max).lerp(V_000, 1-alpha)\n            if (isFinite(c.min.x)) c.min.x = 0\n            if (isFinite(c.min.y)) c.min.y = 0\n            if (isFinite(c.min.z)) c.min.z = 0\n            if (isFinite(c.max.x)) c.max.x = 0\n            if (isFinite(c.max.y)) c.max.y = 0\n            if (isFinite(c.max.z)) c.max.z = 0\n            c.min.add(minAmount)\n            c.max.add(maxAmount)\n            return\n        }\n    }\n\n    _setCurrent(value:WidenLiteral<T>) {\n        if (typeof value === 'number') {\n            this.current = value\n        } else {\n            (this.current as any).copy(value)\n        }\n    }\n\n    _computePercentChange() {\n\n        const end = this.target as ValueType\n        const start = this.committedTarget || (this.targetQueue[0] && this.targetQueue[0].value) || this.current\n\n        if (typeof start === 'number') {\n            const s = start as number\n            const e = end as number\n            return Math.abs(e - s / ((this.range as number) || 1))\n        } \n\n        if ('isMatrix4' in start) {\n            const s = start as THREE.Matrix4\n            const e = end as THREE.Matrix4\n            const sPos = vectors.get()\n            const sQuat = quaternions.get()\n            const sScale = vectors.get()\n            s.decompose(sPos, sQuat, sScale)\n            const ePos = vectors.get()\n            const eQuat = quaternions.get()\n            const eScale = vectors.get()\n            e.decompose(ePos, eQuat, eScale)\n\n            const posPercent = sPos.equals(ePos) ? 0 : Infinity\n\n            const quatPercent = Math.abs(sQuat.angleTo(eQuat) / Math.PI)\n\n            const scalePercent = sScale.equals(eScale) ? 0 : Infinity\n            \n            vectors.pool(sPos)\n            quaternions.pool(sQuat)\n            vectors.pool(sScale)\n            vectors.pool(ePos)\n            quaternions.pool(eQuat)\n            vectors.pool(eScale)\n\n            return Math.max(posPercent, quatPercent, scalePercent)\n        }\n        \n        if ('isVector3' in start) {\n            const s = start as THREE.Vector3\n            const e = end as THREE.Vector3\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const percent = vectors.get().subVectors(e, s).divide(this.range as THREE.Vector3)\n            const {x,y,z} = percent\n            vectors.pool(percent)\n            return Math.max(Math.abs(x||0),Math.abs(y||0),Math.abs(z||0))\n        } \n        \n        if ('isVector2' in start) {\n            const s = start as THREE.Vector2\n            const e = end as THREE.Vector2\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const percent = vectors2.get().subVectors(e, s).divide(this.range as THREE.Vector2)\n            const {x,y} = percent\n            vectors2.pool(percent)\n            return Math.max(Math.abs(x||0),Math.abs(y||0))\n        } \n        \n        if ('isQuaternion' in start) {\n            const s = start as THREE.Quaternion\n            const e = end as THREE.Quaternion\n            return Math.abs(s.angleTo(e) / Math.PI)\n        } \n        \n        if ('isColor' in start) {\n            const s = start as THREE.Color\n            const e = end as THREE.Color\n            return Math.max(\n                Math.abs(e.r - s.r), \n                Math.abs(e.g - s.r), \n                Math.abs(e.b - s.r)\n            )\n        } \n        \n        if ('isBox3' in start) {\n            const s = start as THREE.Box3\n            const e = end as THREE.Box3\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const size = this.range as ValueRange<THREE.Box3>\n            const minPercent = vectors.get().subVectors(e.min, s.min).divide(size)\n            const maxPercent = vectors.get().subVectors(e.max, s.max).divide(size)\n            const min = Math.max(Math.abs(minPercent.x||0), Math.abs(minPercent.y||0), Math.abs(minPercent.z||0))\n            const max = Math.max(Math.abs(maxPercent.x||0), Math.abs(maxPercent.y||0), Math.abs(maxPercent.z||0))\n            vectors.pool(minPercent)\n            vectors.pool(maxPercent)\n            return Math.max(min, max)\n        }\n\n        return Infinity\n    }\n\n    protected _config = {} as Required<TransitionableConfig>\n\n    protected _updateConfig(c?:TransitionableConfig) {\n        this._config.multiplier = defined(this.multiplier, c && c.multiplier, Transitioner.DEFAULT_CONFIG.multiplier)\n        this._config.duration = defined(this.duration, c && c.duration, Transitioner.DEFAULT_CONFIG.duration)\n        this._config.easing = defined(this.easing, c && c.easing, Transitioner.DEFAULT_CONFIG.easing)\n        this._config.threshold = defined(this.threshold, c && c.threshold, Transitioner.DEFAULT_CONFIG.threshold)\n        this._config.delay = defined(this.delay, c && c.delay, Transitioner.DEFAULT_CONFIG.delay)\n        this._config.debounce = defined(this.debounce, c && c.debounce, Transitioner.DEFAULT_CONFIG.debounce) \n        this._config.maxWait = defined(this.maxWait, c && c.maxWait, Transitioner.DEFAULT_CONFIG.maxWait)\n        return this._config\n    }\n\n}\n\nexport class LocalMatrixTransitionable extends Transitionable<THREE.Matrix4> {\n    constructor(public object:THREE.Object3D) {\n        super({ target: new THREE.Matrix4 })\n    }\n\n    position = new Transitionable({target: new THREE.Vector3})\n    quaternion = new Transitionable({target: new THREE.Quaternion})\n    scale = new Transitionable({target: new THREE.Vector3(1,1,1)})\n\n    autoRange = true\n    synchronizeComponents = true\n\n    update(deltaTime:number, c?:TransitionableConfig) {\n        this._updateConfig(c)\n        const {position, quaternion, scale, _config} = this\n\n        if (this.autoRange) {\n            if (!position.range) position.range = new THREE.Vector3\n            if (!scale.range) scale.range = new THREE.Vector3\n            this.object.layout.computedOuterBounds.getSize(position.range)\n            this.object.layout.computedOuterBounds.getSize(scale.range).divide(position.range)\n            if (!isFinite(scale.range.x) || scale.range.x === 0) scale.range.x = 1\n            if (!isFinite(scale.range.y) || scale.range.y === 0) scale.range.y = 1\n            if (!isFinite(scale.range.z) || scale.range.z === 0) scale.range.z = 1\n        }\n        \n        this.target.decompose(position.target, quaternion.target, scale.target)\n        this.current.decompose(position.current, quaternion.current, scale.current)\n        \n        let changePercent:number|undefined = undefined\n        if (this.synchronizeComponents) {\n            changePercent = Math.max(\n                position._computePercentChange(), \n                quaternion._computePercentChange(), \n                scale._computePercentChange()\n            )\n        }\n\n        position.update(deltaTime, _config, changePercent)\n        quaternion.update(deltaTime, _config, changePercent)\n        scale.update(deltaTime, _config, changePercent)\n        this.current.compose(position.current, quaternion.current, scale.current)\n    }\n}\n\n/**\n * Enables smooth interpolation of various kinds of values, with hysteresis\n */\nexport class Transitioner {\n\n    static disableAllTransitions = false\n\n    static DEFAULT_CONFIG:Required<TransitionableConfig> = {\n        multiplier: 1,\n        duration: 1.5,\n        easing: easing.easeInOut,\n        threshold: 1e-2,\n        delay: 0,\n        debounce: 0,\n        maxWait: 10\n    }\n\n    /**\n     * The amount of time (in milliseconds) it takes to smoothly \n     * damp towards the target.\n     * \n     * By defualt, based on a progress threshold of 0.96\n     * \n     * progress = 1 - Math.exp(-time)\n     * time = - Math.log(1-progress)\n     */\n    static NATURAL_DURATION = - Math.log(1 - 0.95)\n    \n    /**\n     * \n     */\n    set active(active:boolean) {\n        this._active = active\n    }\n    get active() {\n        return this._active && !Transitioner.disableAllTransitions\n    }\n    private _active = false\n\n    /**\n     * Specifies the desired parent coordinate system.\n     */\n    parentTarget : THREE.Object3D|null = null\n\n    /**\n     * The local matrix transitionable\n     */\n    matrixLocal:LocalMatrixTransitionable\n    \n    /**\n     * The target world matrix, automatically computed from pose/layout properties\n     */\n    matrixWorldTarget = new THREE.Matrix4\n\n    /**\n     * A multiplier to influence the speed of the transition\n     */\n    multiplier? : number = undefined\n    \n    /**\n     * The duration of the easing function\n     */\n    duration? : number = undefined\n\n    /**\n     * The easing function \n     */\n    easing? : (alpha:number) => number = undefined\n\n    /**\n     * The percentage that the `target` must differ from the `committedTarget`, \n     * the last target added to the `targetQueue`, or the `current` value  (in  that order)\n     * before it is considered \"changed\"\n     */\n    threshold? : number = undefined\n\n    /**\n     * The number of seconds in which the `target` value must remain \"changed\" before it\n     * becomes the `committedTarget`\n     */\n    delay? : number = undefined\n\n    /**\n     * The number of seconds in which the `committedTarget` must \n     * remain stable before it is pushed to the `targetQueue`\n     */\n    debounce? : number = undefined\n\n    /**\n     * The maximum number of seconds to wait before the `committedTarget`\n     * is pushed to the `targetQueue`\n     */\n    maxWait? : number = undefined\n\n    /**\n     * \n     */\n    customTransitionables = [] as Transitionable[]\n\n    /**\n     * \n     * @param object \n     */\n    constructor(public object:THREE.Object3D) {\n        this.matrixLocal = new LocalMatrixTransitionable(this.object)\n    }\n\n    /**\n     * Add a transitionable\n     * @param transitionable \n     */\n    add<T extends ValueType>(transitionable:TransitionerConstructOptions<T>|Transitionable<T>) : Transitionable<T> {\n        const t = transitionable instanceof Transitionable ? \n            transitionable : new Transitionable(transitionable)\n        this.customTransitionables.push(t)\n        return t\n    }\n\n    /**\n     * Transitions pose, layout, and/or custom properties associated with an Object3D instance.\n     * \n     * When the transitioner is active, the object's pose (`position`, `quaternion`, and `scale`)\n     * and layout (`layout.absolute`, `layout.relative`, etc.) properties are treated as \n     * target values, and their corresponding target matrices are maintained in the transitioner \n     * instance (e.g., `transitioner.matrix`, `transitioner.layoutMatrix`). Meanwhile, the object's \n     * pose/layout matrices (`matrix` and `layout.matrix`) will only be updated when this `update` \n     * method is called).\n     * \n     * If `targetParent` is set and differs from the current `object.parent`, \n     * this method will smoothly switch to the new coordinate system. \n     */\n    update(deltaTime:number, autoActive=true) {\n\n        if (!this.active && autoActive) this.active = true\n\n        if (!this.active) { \n            this.matrixLocal.current.copy(this.matrixLocal.target)\n            for (const t of this.customTransitionables) {\n                t._setCurrent(t.target)\n                this._setPropertyAtPath(t)\n            }\n            return\n        }\n\n        // refresh matrix targets if necessary\n        if (autoActive) this.object.updateWorldMatrix(true, true)\n        this._setParent()\n\n        // update transitionables\n        deltaTime = Math.max(deltaTime, 1e-10) // in case multiplier is Infinity\n        this.matrixLocal.update(deltaTime, this)\n        for (const t of this.customTransitionables) {\n            t.update(deltaTime, this)\n            this._setPropertyAtPath(t)\n        }\n\n        this.object.updateWorldMatrix(false, true)\n    }\n\n    private _setPropertyAtPath(t:Transitionable) {\n        if (t.path) {\n            if (typeof t.current === 'number') {\n                set(t.path, this.object, t.current)\n            } else {\n                resolve(t.path, this.object).copy(t.current)\n            }\n        }\n    }\n\n    /**\n     * Ensure that this `object` is attached to the `targetParent` Object3D instance. \n     * When the `transitioner` is active, this method ensures a smooth transition \n     * to another coordinate system. If the `object` is already attached to the \n     * `targetParent`, this method is effectively noop.\n     */\n    private _setParent() {\n        const parent = this.parentTarget\n        const o = this.object\n        if (!parent) return\n        if (o.parent !== parent) {\n            o.updateWorldMatrix(true, true)\n            const originalMatrixWorld = matrices.get().copy(o.matrixWorld)\n            o.parent && o.parent.remove(o)\n            parent && parent.add(o)\n            parent.updateWorldMatrix(true, true)\n            const inverseParentMatrixWorld = parent ? matrices.get().getInverse(parent.matrixWorld) : matrices.get().identity()\n            o.matrix.copy(inverseParentMatrixWorld.multiply(originalMatrixWorld))\n            // const transitioner = o.layout.transitioner\n            // if (transitioner.active) {\n            //     transitioner.layout.weight = 0\n            //     o.matrix.decompose(transitioner.position, transitioner.quaternion, transitioner.scale)\n            // } else {\n            // }\n            o.matrix.decompose(o.position, o.quaternion, o.scale)\n            matrices.pool(originalMatrixWorld)\n            matrices.pool(inverseParentMatrixWorld)\n        }\n    }\n}\n\nconst next = (prev, curr) => prev && prev[curr]\n\nfunction resolve(path:string, obj=self as any, separator='.') {\n    var properties = Array.isArray(path) ? path : path.split(separator)\n    return properties.reduce(next, obj)\n}\n\nfunction set(path:string, obj=self as any, value:any, separator='.') {\n    var properties = Array.isArray(path) ? path : path.split(separator)\n    var lastPropertKey = properties.pop()\n    const property = properties.reduce(next, obj)\n    property[lastPropertKey] = value\n}","import { Vector3, Vector2, Triangle, DoubleSide, BackSide, Face3 } from 'three';\r\n\r\n// Ripped and modified From THREE.js Mesh raycast\r\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\r\nvar vA = new Vector3();\r\nvar vB = new Vector3();\r\nvar vC = new Vector3();\r\n\r\nvar uvA = new Vector2();\r\nvar uvB = new Vector2();\r\nvar uvC = new Vector2();\r\n\r\nvar intersectionPoint = new Vector3();\r\nvar intersectionPointWorld = new Vector3();\r\n\r\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\tvar intersect;\r\n\tif ( material.side === BackSide ) {\r\n\r\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t} else {\r\n\r\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t}\r\n\r\n\tif ( intersect === null ) return null;\r\n\r\n\tintersectionPointWorld.copy( point );\r\n\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\treturn {\r\n\t\tdistance: distance,\r\n\t\tpoint: intersectionPointWorld.clone(),\r\n\t\tobject: object\r\n\t};\r\n\r\n}\r\n\r\nfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\r\n\r\n\tvA.fromBufferAttribute( position, a );\r\n\tvB.fromBufferAttribute( position, b );\r\n\tvC.fromBufferAttribute( position, c );\r\n\r\n\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tif ( uv ) {\r\n\r\n\t\t\tuvA.fromBufferAttribute( uv, a );\r\n\t\t\tuvB.fromBufferAttribute( uv, b );\r\n\t\t\tuvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\tintersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2( ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = new Vector3();\r\n\t\tintersection.face = new Face3( a, b, c, Triangle.getNormal( vA, vB, vC, normal ) );\r\n\t\tintersection.faceIndex = a;\r\n\r\n\t}\r\n\r\n\treturn intersection;\r\n\r\n}\r\n\r\n\r\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\r\nfunction intersectTri( mesh, geo, raycaster, ray, tri, intersections ) {\r\n\r\n\tconst triOffset = tri * 3;\r\n\tconst a = geo.index.getX( triOffset );\r\n\tconst b = geo.index.getX( triOffset + 1 );\r\n\tconst c = geo.index.getX( triOffset + 2 );\r\n\r\n\tconst intersection = checkBufferGeometryIntersection( mesh, raycaster, ray, geo.attributes.position, geo.attributes.uv, a, b, c );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tintersection.faceIndex = tri;\r\n\t\tif ( intersections ) intersections.push( intersection );\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nexport { intersectTri };\r\n","import { intersectTri } from './ThreeIntersectionUtilities.js';\r\n\r\nexport function intersectTris( mesh, geo, raycaster, ray, offset, count, intersections ) {\r\n\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tintersectTri( mesh, geo, raycaster, ray, i, intersections );\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport function intersectClosestTri( mesh, geo, raycaster, ray, offset, count ) {\r\n\r\n\tlet dist = Infinity;\r\n\tlet res = null;\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tconst intersection = intersectTri( mesh, geo, raycaster, ray, i );\r\n\t\tif ( intersection && intersection.distance < dist ) {\r\n\r\n\t\t\tres = intersection;\r\n\t\t\tdist = intersection.distance;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn res;\r\n\r\n};\r\n","// Returns a Float32Array representing the bounds data for box.\r\nexport function boxToArray( bx ) {\r\n\r\n\tconst arr = new Float32Array( 6 );\r\n\r\n\tarr[ 0 ] = bx.min.x;\r\n\tarr[ 1 ] = bx.min.y;\r\n\tarr[ 2 ] = bx.min.z;\r\n\r\n\tarr[ 3 ] = bx.max.x;\r\n\tarr[ 4 ] = bx.max.y;\r\n\tarr[ 5 ] = bx.max.z;\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\nexport function arrayToBox( arr, target ) {\r\n\r\n\ttarget.min.x = arr[ 0 ];\r\n\ttarget.min.y = arr[ 1 ];\r\n\ttarget.min.z = arr[ 2 ];\r\n\r\n\ttarget.max.x = arr[ 3 ];\r\n\ttarget.max.y = arr[ 4 ];\r\n\ttarget.max.z = arr[ 5 ];\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nexport function getLongestEdgeIndex( bounds ) {\r\n\r\n\tlet splitDimIdx = - 1;\r\n\tlet splitDist = - Infinity;\r\n\r\n\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\r\n\t\tif ( dist > splitDist ) {\r\n\r\n\t\t\tsplitDist = dist;\r\n\t\t\tsplitDimIdx = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitDimIdx;\r\n\r\n}\r\n","import { Vector3 } from 'three';\r\n\r\nexport class SeparatingAxisBounds {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.min = Infinity;\r\n\t\tthis.max = - Infinity;\r\n\r\n\t}\r\n\r\n\tsetFromPointsField( points, field ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = p[ field ];\r\n\t\t\tmin = Math.min( val, min );\r\n\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\r\n\t}\r\n\r\n\tsetFromPoints( axis, points ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = axis.dot( p );\r\n\t\t\tmin = Math.min( val, min );\r\n\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tisSeparated( other ) {\r\n\r\n\t\treturn this.min > other.max || other.min > this.max;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\r\n\r\n\tconst p = new Vector3();\r\n\treturn function setFromBox( axis, box ) {\r\n\r\n\t\tconst boxMin = box.min;\r\n\t\tconst boxMax = box.max;\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\r\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\r\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\r\n\r\n\t\t\t\t\tconst val = axis.dot( p );\r\n\t\t\t\t\tmin = Math.min( val, min );\r\n\t\t\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const areIntersecting = ( function () {\r\n\r\n\tconst cacheSatBounds = new SeparatingAxisBounds();\r\n\treturn function areIntersecting( shape1, shape2 ) {\r\n\r\n\t\tconst points1 = shape1.points;\r\n\t\tconst satAxes1 = shape1.satAxes;\r\n\t\tconst satBounds1 = shape1.satBounds;\r\n\r\n\t\tconst points2 = shape2.points;\r\n\t\tconst satAxes2 = shape2.satAxes;\r\n\t\tconst satBounds2 = shape2.satBounds;\r\n\r\n\t\t// check axes of the first shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check axes of the second shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n","import { Vector3, Vector2, Plane, Line3 } from 'three';\r\nexport const closestPointLineToLine = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst v02 = new Vector3();\r\n\treturn function closestPointLineToLine( l1, l2, result ) {\r\n\r\n\t\tconst v0 = l1.start;\r\n\t\tconst v10 = dir1;\r\n\t\tconst v2 = l2.start;\r\n\t\tconst v32 = dir2;\r\n\r\n\t\tv02.subVectors( v0, v2 );\r\n\t\tdir1.subVectors( l1.end, l2.start );\r\n\t\tdir2.subVectors( l2.end, l2.start );\r\n\r\n\t\t// float d0232 = v02.Dot(v32);\r\n\t\tconst d0232 = v02.dot( v32 );\r\n\r\n\t\t// float d3210 = v32.Dot(v10);\r\n\t\tconst d3210 = v32.dot( v10 );\r\n\r\n\t\t// float d3232 = v32.Dot(v32);\r\n\t\tconst d3232 = v32.dot( v32 );\r\n\r\n\t\t// float d0210 = v02.Dot(v10);\r\n\t\tconst d0210 = v02.dot( v10 );\r\n\r\n\t\t// float d1010 = v10.Dot(v10);\r\n\t\tconst d1010 = v10.dot( v10 );\r\n\r\n\t\t// float denom = d1010*d3232 - d3210*d3210;\r\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\r\n\r\n\t\tlet d, d2;\r\n\t\tif ( denom !== 0 ) {\r\n\r\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\r\n\r\n\t\t} else {\r\n\r\n\t\t\td = 0;\r\n\r\n\t\t}\r\n\r\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\r\n\r\n\t\tresult.x = d;\r\n\t\tresult.y = d2;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const closestPointsSegmentToSegment = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\r\n\tconst paramResult = new Vector2();\r\n\tconst temp1 = new Vector3();\r\n\tconst temp2 = new Vector3();\r\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\r\n\r\n\t\tclosestPointLineToLine( l1, l2, paramResult );\r\n\r\n\t\tlet d = paramResult.x;\r\n\t\tlet d2 = paramResult.y;\r\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\tl1.at( d, target1 );\r\n\t\t\tl2.at( d2, target2 );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d >= 0 && d <= 1 ) {\r\n\r\n\t\t\t// Only d2 is out of bounds.\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tl2.at( 0, target2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl2.at( 1, target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\t// Only d is out of bounds.\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tl1.at( 0, target1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl1.at( 1, target1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Both u and u2 are out of bounds.\r\n\t\t\tlet p;\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tp = l1.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = l1.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet p2;\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tp2 = l2.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp2 = l2.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst closestPoint = temp1;\r\n\t\t\tconst closestPoint2 = temp2;\r\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\r\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\r\n\r\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\r\n\r\n\t\t\t\ttarget1.copy( closestPoint );\r\n\t\t\t\ttarget2.copy( p2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttarget1.copy( p );\r\n\t\t\t\ttarget2.copy( closestPoint2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nexport const sphereIntersectTriangle = ( function () {\r\n\r\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\r\n\tconst closestPointTemp = new Vector3();\r\n\tconst projectedPointTemp = new Vector3();\r\n\tconst planeTemp = new Plane();\r\n\tconst lineTemp = new Line3();\r\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\r\n\r\n\t\tconst { radius, center } = sphere;\r\n\t\tconst { a, b, c } = triangle;\r\n\r\n\t\t// phase 1\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = b;\r\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = b;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\t// phase 2\r\n\t\tconst plane = triangle.getPlane( planeTemp );\r\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\r\n\t\tif ( dp <= radius ) {\r\n\r\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\r\n\t\t\tconst cp = triangle.containsPoint( pp );\r\n\t\t\tif ( cp ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n} )();\r\n","import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.update = ( function () {\r\n\r\n\tconst arr = new Array( 3 );\r\n\treturn function update( ) {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\r\n\t\tarr[ 0 ] = this.a;\r\n\t\tarr[ 1 ] = this.b;\r\n\t\tarr[ 2 ] = this.c;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, arr );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, arr );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, arr );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, arr );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n","import { Box3, Vector3, Matrix4, Sphere, Line3 } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { SeparatingAxisTriangle } from './SeparatingAxisTriangle.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class OrientedBox extends Box3 {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isOrientedBox = true;\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.invMatrix = new Matrix4();\r\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\r\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.sphere = new Sphere();\r\n\r\n\t}\r\n\r\n\tset( min, max, matrix ) {\r\n\r\n\t\tsuper.set( min, max );\r\n\t\tthis.matrix = matrix;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\t\tthis.matrix.copy( other.matrix );\r\n\r\n\t}\r\n\r\n}\r\n\r\nOrientedBox.prototype.update = ( function () {\r\n\r\n\treturn function update() {\r\n\r\n\t\tconst matrix = this.matrix;\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\tconst points = this.points;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\r\n\t\t\t\t\tconst v = points[ i ];\r\n\t\t\t\t\tv.x = x ? max.x : min.x;\r\n\t\t\t\t\tv.y = y ? max.y : min.y;\r\n\t\t\t\t\tv.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tv.applyMatrix4( matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst minVec = points[ 0 ];\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst index = 1 << i;\r\n\t\t\tconst pi = points[ index ];\r\n\r\n\t\t\taxis.subVectors( minVec, pi );\r\n\t\t\tsb.setFromPoints( axis, points );\r\n\r\n\t\t}\r\n\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\r\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\r\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\r\n\r\n\t\tthis.invMatrix.getInverse( this.matrix );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsBox = ( function () {\r\n\r\n\tconst aabbBounds = new SeparatingAxisBounds();\r\n\treturn function intersectsBox( box ) {\r\n\r\n\t\tif ( ! box.intersectsSphere( this.sphere ) ) return false;\r\n\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\r\n\t\taabbBounds.min = min.x;\r\n\t\taabbBounds.max = max.x;\r\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.y;\r\n\t\taabbBounds.max = max.y;\r\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.z;\r\n\t\taabbBounds.max = max.z;\r\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\taabbBounds.setFromBox( axis, box );\r\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri = new SeparatingAxisTriangle();\r\n\tconst pointsArr = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\tif ( ! triangle.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri.copy( triangle );\r\n\t\t\tsaTri.update();\r\n\t\t\ttriangle = saTri;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\r\n\t\tpointsArr[ 0 ] = triangle.a;\r\n\t\tpointsArr[ 1 ] = triangle.b;\r\n\t\tpointsArr[ 2 ] = triangle.c;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst sa = satAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst triSatBounds = triangle.satBounds;\r\n\t\tconst triSatAxes = triangle.satAxes;\r\n\t\tconst points = this.points;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = triSatBounds[ i ];\r\n\t\t\tconst sa = triSatAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.closestPointToPoint = ( function () {\r\n\r\n\treturn function closestPointToPoint( point, target1 ) {\r\n\r\n\t\ttarget1\r\n\t\t\t.copy( point )\r\n\t\t\t.applyMatrix4( this.invMatrix )\r\n\t\t\t.clamp( this.min, this.max )\r\n\t\t\t.applyMatrix4( this.matrix );\r\n\r\n\t\treturn target1;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nOrientedBox.prototype.distanceToBox = ( function () {\r\n\r\n\tconst xyzFields = [ 'x', 'y', 'z' ];\r\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\r\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\r\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsBox( box ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tbox.getCenter( point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tconst threshold2 = threshold * threshold;\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst points = this.points;\r\n\r\n\r\n\t\t// iterate over every edge and compare distances\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check over all these points\r\n\t\tfor ( let i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tpoint2.copy( p ).clamp( min, max );\r\n\r\n\t\t\tconst dist = p.distanceToSquared( point2 );\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( p );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate and check all line segment distances\r\n\t\tlet count = 0;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\r\n\r\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\r\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\t\t// get obb line segments\r\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst p1 = points[ index ];\r\n\t\t\t\t\tconst p2 = points[ index2 ];\r\n\t\t\t\t\tconst line1 = segments1[ count ];\r\n\t\t\t\t\tline1.set( p1, p2 );\r\n\r\n\r\n\t\t\t\t\t// get aabb line segments\r\n\t\t\t\t\tconst f1 = xyzFields[ i ];\r\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\r\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\r\n\t\t\t\t\tconst line2 = segments2[ count ];\r\n\t\t\t\t\tconst start = line2.start;\r\n\t\t\t\t\tconst end = line2.end;\r\n\r\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\r\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\r\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check all the other boxes point\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\r\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\r\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\r\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 12; i ++ ) {\r\n\r\n\t\t\tconst l1 = segments1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\r\n\r\n\t\t\t\tconst l2 = segments2[ i2 ];\r\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\r\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n","\r\nimport * as THREE from 'three';\r\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtlities.js';\r\nimport { arrayToBox } from './Utils/ArrayBoxUtilities.js';\r\nimport { OrientedBox } from './Utils/OrientedBox.js';\r\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\r\nimport { sphereIntersectTriangle } from './Utils/MathUtilities.js';\r\n\r\nconst boundingBox = new THREE.Box3();\r\nconst boxIntersection = new THREE.Vector3();\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\nfunction setTriangle( tri, i, index, pos ) {\r\n\r\n\tconst ta = tri.a;\r\n\tconst tb = tri.b;\r\n\tconst tc = tri.c;\r\n\r\n\tlet i3 = index.getX( i );\r\n\tta.x = pos.getX( i3 );\r\n\tta.y = pos.getY( i3 );\r\n\tta.z = pos.getZ( i3 );\r\n\r\n\ti3 = index.getX( i + 1 );\r\n\ttb.x = pos.getX( i3 );\r\n\ttb.y = pos.getY( i3 );\r\n\ttb.z = pos.getZ( i3 );\r\n\r\n\ti3 = index.getX( i + 2 );\r\n\ttc.x = pos.getX( i3 );\r\n\ttc.y = pos.getY( i3 );\r\n\ttc.z = pos.getZ( i3 );\r\n\r\n}\r\n\r\nexport default\r\nclass MeshBVHNode {\r\n\r\n\tconstructor() {\r\n\r\n\t\t// internal nodes have boundingData, left, right, and splitAxis\r\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\r\n\r\n\t}\r\n\r\n\tintersectRay( ray, target ) {\r\n\r\n\t\tarrayToBox( this.boundingData, boundingBox );\r\n\r\n\t\treturn ray.intersectBox( boundingBox, target );\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tif ( this.count ) intersectTris( mesh, mesh.geometry, raycaster, ray, this.offset, this.count, intersects );\r\n\t\telse {\r\n\r\n\t\t\tif ( this.left.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.left.raycast( mesh, raycaster, ray, intersects );\r\n\t\t\tif ( this.right.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.right.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tif ( this.count ) {\r\n\r\n\t\t\treturn intersectClosestTri( mesh, mesh.geometry, raycaster, ray, this.offset, this.count );\r\n\r\n\t\t} else {\r\n\r\n\r\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\r\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\r\n\t\t\tconst splitAxis = this.splitAxis;\r\n\t\t\tconst xyzAxis = xyzFields[ splitAxis ];\r\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\r\n\t\t\tconst leftToRight = rayDir >= 0;\r\n\r\n\t\t\t// c1 is the child to check first\r\n\t\t\tlet c1, c2;\r\n\t\t\tif ( leftToRight ) {\r\n\r\n\t\t\t\tc1 = this.left;\r\n\t\t\t\tc2 = this.right;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tc1 = this.right;\r\n\t\t\t\tc2 = this.left;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst c1Intersection = c1.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c1Result = c1Intersection ? c1.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\r\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\r\n\t\t\tif ( c1Result ) {\r\n\r\n\t\t\t\t// check only along the split axis\r\n\t\t\t\tconst rayOrig = ray.origin[ xyzAxis ];\r\n\t\t\t\tconst toPoint = rayOrig - c1Result.point[ xyzAxis ];\r\n\t\t\t\tconst toChild1 = rayOrig - c2.boundingData[ splitAxis ];\r\n\t\t\t\tconst toChild2 = rayOrig - c2.boundingData[ splitAxis + 3 ];\r\n\r\n\t\t\t\tconst toPointSq = toPoint * toPoint;\r\n\t\t\t\tif ( toPointSq <= toChild1 * toChild1 && toPointSq <= toChild2 * toChild2 ) {\r\n\r\n\t\t\t\t\treturn c1Result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\r\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\r\n\t\t\tconst c2Intersection = c2.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c2Result = c2Intersection ? c2.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\tif ( c1Result && c2Result ) {\r\n\r\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn c1Result || c2Result || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nMeshBVHNode.prototype.shapecast = ( function () {\r\n\r\n\tconst triangle = new SeparatingAxisTriangle();\r\n\tconst cachedBox1 = new THREE.Box3();\r\n\tconst cachedBox2 = new THREE.Box3();\r\n\treturn function shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc = null, nodeScoreFunc = null ) {\r\n\r\n\t\tif ( this.count && intersectsTriangleFunc ) {\r\n\r\n\t\t\tconst geometry = mesh.geometry;\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst pos = geometry.attributes.position;\r\n\t\t\tconst offset = this.offset;\r\n\t\t\tconst count = this.count;\r\n\r\n\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\tsetTriangle( triangle, i, index, pos );\r\n\t\t\t\ttriangle.update();\r\n\r\n\t\t\t\tif ( intersectsTriangleFunc( triangle, i, i + 1, i + 2 ) ) {\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = this.left;\r\n\t\t\tconst right = this.right;\r\n\t\t\tlet c1 = left;\r\n\t\t\tlet c2 = right;\r\n\r\n\t\t\tlet score1, score2;\r\n\t\t\tlet box1, box2;\r\n\t\t\tif ( nodeScoreFunc ) {\r\n\r\n\t\t\t\tbox1 = cachedBox1;\r\n\t\t\t\tbox2 = cachedBox2;\r\n\r\n\t\t\t\tarrayToBox( c1.boundingData, box1 );\r\n\t\t\t\tarrayToBox( c2.boundingData, box2 );\r\n\r\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\r\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\r\n\r\n\t\t\t\tif ( score2 < score1 ) {\r\n\r\n\t\t\t\t\tc1 = right;\r\n\t\t\t\t\tc2 = left;\r\n\r\n\t\t\t\t\tconst temp = score1;\r\n\t\t\t\t\tscore1 = score2;\r\n\t\t\t\t\tscore2 = temp;\r\n\r\n\t\t\t\t\tconst tempBox = box1;\r\n\t\t\t\t\tbox1 = box2;\r\n\t\t\t\t\tbox2 = tempBox;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! box1 ) {\r\n\r\n\t\t\t\tbox1 = cachedBox1;\r\n\t\t\t\tarrayToBox( c1.boundingData, box1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isC1Leaf = ! ! c1.count;\r\n\t\t\tconst c1Intersection =\r\n\t\t\t\tintersectsBoundsFunc( box1, isC1Leaf, score1, c1 ) &&\r\n\t\t\t\tc1.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, nodeScoreFunc );\r\n\r\n\t\t\tif ( c1Intersection ) return true;\r\n\r\n\r\n\t\t\tif ( ! box2 ) {\r\n\r\n\t\t\t\tbox2 = cachedBox2;\r\n\t\t\t\tarrayToBox( c2.boundingData, box2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isC2Leaf = ! ! c2.count;\r\n\t\t\tconst c2Intersection =\r\n\t\t\t\tintersectsBoundsFunc( box2, isC2Leaf, score2, c2 ) &&\r\n\t\t\t\tc2.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, nodeScoreFunc );\r\n\r\n\t\t\tif ( c2Intersection ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsGeometry = ( function () {\r\n\r\n\tconst triangle = new SeparatingAxisTriangle();\r\n\tconst triangle2 = new SeparatingAxisTriangle();\r\n\tconst cachedMesh = new THREE.Mesh();\r\n\tconst invertedMat = new THREE.Matrix4();\r\n\r\n\tconst obb = new OrientedBox();\r\n\tconst obb2 = new OrientedBox();\r\n\r\n\treturn function intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb = null ) {\r\n\r\n\t\tif ( cachedObb === null ) {\r\n\r\n\t\t\tif ( ! geometry.boundingBox ) {\r\n\r\n\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobb.set( geometry.boundingBox.min, geometry.boundingBox.max, geometryToBvh );\r\n\t\t\tobb.update();\r\n\t\t\tcachedObb = obb;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.count ) {\r\n\r\n\t\t\tconst thisGeometry = mesh.geometry;\r\n\t\t\tconst thisIndex = thisGeometry.index;\r\n\t\t\tconst thisPos = thisGeometry.attributes.position;\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst pos = geometry.attributes.position;\r\n\r\n\t\t\tconst offset = this.offset;\r\n\t\t\tconst count = this.count;\r\n\r\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\r\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\r\n\t\t\t// here.\r\n\t\t\tinvertedMat.getInverse( geometryToBvh );\r\n\r\n\t\t\tif ( geometry.boundsTree ) {\r\n\r\n\t\t\t\tfunction triangleCallback( tri ) {\r\n\r\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.update();\r\n\r\n\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\r\n\t\t\t\t\t\ttriangle2.update();\r\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarrayToBox( this.boundingData, obb2 );\r\n\t\t\t\tobb2.matrix.copy( invertedMat );\r\n\t\t\t\tobb2.update();\r\n\r\n\t\t\t\tcachedMesh.geometry = geometry;\r\n\t\t\t\tconst res = geometry.boundsTree.shapecast( cachedMesh, box => obb2.intersectsBox( box ), triangleCallback );\r\n\t\t\t\tcachedMesh.geometry = null;\r\n\r\n\t\t\t\treturn res;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\r\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.update();\r\n\r\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\r\n\t\t\t\t\t\ttriangle2.update();\r\n\r\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = this.left;\r\n\t\t\tconst right = this.right;\r\n\r\n\t\t\tarrayToBox( left.boundingData, boundingBox );\r\n\t\t\tconst leftIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tleft.intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( leftIntersection ) return true;\r\n\r\n\r\n\t\t\tarrayToBox( right.boundingData, boundingBox );\r\n\t\t\tconst rightIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tright.intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( rightIntersection ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsBox = ( function () {\r\n\r\n\tconst obb = new OrientedBox();\r\n\r\n\treturn function intersectsBox( mesh, box, boxToBvh ) {\r\n\r\n\t\tobb.set( box.min, box.max, boxToBvh );\r\n\t\tobb.update();\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\tbox => obb.intersectsBox( box ),\r\n\t\t\ttri => obb.intersectsTriangle( tri )\r\n\t\t);\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsSphere = ( function () {\r\n\r\n\treturn function intersectsSphere( mesh, sphere ) {\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\tbox => sphere.intersectsBox( box ),\r\n\t\t\ttri => sphereIntersectTriangle( sphere, tri )\r\n\t\t);\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.closestPointToPoint = ( function () {\r\n\r\n\t// early out if under minThreshold\r\n\t// skip checking if over maxThreshold\r\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t// returns Infinity if no value found\r\n\r\n\tconst temp = new THREE.Vector3();\r\n\treturn function closestPointToPoint( mesh, point, target = null, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tthis.shapecast(\r\n\r\n\t\t\tmesh,\r\n\t\t\t( box, isLeaf, score ) => score < closestDistance && score < maxThreshold,\r\n\t\t\ttri => {\r\n\r\n\t\t\t\ttri.closestPointToPoint( point, temp );\r\n\t\t\t\tconst dist = point.distanceTo( temp );\r\n\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\tif ( target ) target.copy( temp );\r\n\t\t\t\t\tclosestDistance = dist;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( dist < minThreshold ) return true;\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tbox => box.distanceToPoint( point )\r\n\r\n\t\t);\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.closestPointToGeometry = ( function () {\r\n\r\n\t// early out if under minThreshold\r\n\t// skip checking if over maxThreshold\r\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t// returns Infinity if no value found\r\n\r\n\tconst tri2 = new SeparatingAxisTriangle();\r\n\tconst obb = new OrientedBox();\r\n\r\n\tconst temp1 = new THREE.Vector3();\r\n\tconst temp2 = new THREE.Vector3();\r\n\treturn function closestPointToGeometry( mesh, geometry, geometryToBvh, target1 = null, target2 = null, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tif ( ! geometry.boundingBox ) geometry.computeBoundingBox();\r\n\t\tobb.set( geometry.boundingBox.min, geometry.boundingBox.max, geometryToBvh );\r\n\t\tobb.update();\r\n\r\n\t\tconst pos = geometry.attributes.position;\r\n\t\tconst index = geometry.index;\r\n\r\n\t\tlet tempTarget1, tempTarget2;\r\n\t\tif ( target1 ) tempTarget1 = temp1;\r\n\t\tif ( target2 ) tempTarget2 = temp2;\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tthis.shapecast(\r\n\t\t\tmesh,\r\n\t\t\t( box, isLeaf, score ) => score < closestDistance && score < maxThreshold,\r\n\t\t\ttri => {\r\n\r\n\t\t\t\tconst sphere1 = tri.sphere;\r\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\tsetTriangle( tri2, i2, index, pos );\r\n\t\t\t\t\ttri2.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.sphere.setFromPoints( tri2.points );\r\n\r\n\t\t\t\t\tconst sphere2 = tri2.sphere;\r\n\t\t\t\t\tconst sphereDist = sphere2.center.distanceTo( sphere1.center ) - sphere2.radius - sphere1.radius;\r\n\t\t\t\t\tif ( sphereDist > closestDistance ) continue;\r\n\r\n\t\t\t\t\ttri2.update();\r\n\r\n\t\t\t\t\tconst dist = tri.distanceToTriangle( tri2, tempTarget1, tempTarget2 );\r\n\t\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( tempTarget1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( tempTarget2 );\r\n\t\t\t\t\t\tclosestDistance = dist;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( dist < minThreshold ) return true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tbox => obb.distanceToBox( box, Math.min( closestDistance, maxThreshold ) )\r\n\r\n\t\t);\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t};\r\n\r\n} )();\r\n","// Split strategy constants\r\nexport const CENTER = 0;\r\nexport const AVERAGE = 1;\r\nexport const SAH = 2;\r\n","import * as THREE from 'three';\r\nimport { arrayToBox, getLongestEdgeIndex } from './Utils/ArrayBoxUtilities.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\r\n// result is an array of size tris.length * 6 where triangle i maps to a\r\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\r\n// representing the center and half-extent in each dimension of triangle i\r\nfunction computeBounds( geo ) {\r\n\r\n\tconst verts = geo.attributes.position.array;\r\n\tconst index = geo.index.array;\r\n\tconst triCount = index.length / 3;\r\n\tconst bounds = new Float32Array( triCount * 6 );\r\n\r\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\tconst ai = index[ 3 * tri + 0 ] * 3;\r\n\t\tconst bi = index[ 3 * tri + 1 ] * 3;\r\n\t\tconst ci = index[ 3 * tri + 2 ] * 3;\r\n\r\n\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\tconst a = verts[ ai + el ];\r\n\t\t\tconst b = verts[ bi + el ];\r\n\t\t\tconst c = verts[ ci + el ];\r\n\t\t\tconst min = Math.min( a, b, c );\r\n\t\t\tconst max = Math.max( a, b, c );\r\n\t\t\tconst halfExtents = ( max - min ) / 2;\r\n\t\t\tbounds[ tri * 6 + el * 2 + 0 ] = min + halfExtents;\r\n\t\t\tbounds[ tri * 6 + el * 2 + 1 ] = halfExtents;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn bounds;\r\n\r\n}\r\n\r\nconst boxtemp = new THREE.Box3();\r\n\r\nexport default class BVHConstructionContext {\r\n\r\n\tconstructor( geo, options ) {\r\n\r\n\t\tthis.geo = geo;\r\n\t\tthis.options = options;\r\n\t\tthis.bounds = computeBounds( geo );\r\n\r\n\t\t// SAH Initialization\r\n\t\tthis.sahplanes = null;\r\n\t\tif ( options.strategy === SAH ) {\r\n\r\n\t\t\tconst triCount = geo.index.count / 3;\r\n\t\t\tthis.sahplanes = [ new Array( triCount ), new Array( triCount ), new Array( triCount ) ];\r\n\t\t\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\t\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\t\t\tthis.sahplanes[ el ][ tri ] = { p: this.bounds[ tri * 6 + el * 2 ], tri };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// returns the average coordinate on the specified axis of the all the provided triangles\r\n\tgetAverage( offset, count, axis ) {\r\n\r\n\t\tlet avg = 0;\r\n\t\tconst bounds = this.bounds;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tavg += bounds[ i * 6 + axis * 2 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn avg / count;\r\n\r\n\t}\r\n\r\n\t// computes the union of the bounds of all of the given triangles and puts the resulting box in target\r\n\tgetBounds( offset, count, target ) {\r\n\r\n\t\tlet minx = Infinity;\r\n\t\tlet miny = Infinity;\r\n\t\tlet minz = Infinity;\r\n\t\tlet maxx = - Infinity;\r\n\t\tlet maxy = - Infinity;\r\n\t\tlet maxz = - Infinity;\r\n\t\tconst bounds = this.bounds;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tconst cx = bounds[ i * 6 + 0 ];\r\n\t\t\tconst hx = bounds[ i * 6 + 1 ];\r\n\t\t\tminx = Math.min( minx, cx - hx );\r\n\t\t\tmaxx = Math.max( maxx, cx + hx );\r\n\t\t\tconst cy = bounds[ i * 6 + 2 ];\r\n\t\t\tconst hy = bounds[ i * 6 + 3 ];\r\n\t\t\tminy = Math.min( miny, cy - hy );\r\n\t\t\tmaxy = Math.max( maxy, cy + hy );\r\n\t\t\tconst cz = bounds[ i * 6 + 4 ];\r\n\t\t\tconst hz = bounds[ i * 6 + 5 ];\r\n\t\t\tminz = Math.min( minz, cz - hz );\r\n\t\t\tmaxz = Math.max( maxz, cz + hz );\r\n\r\n\t\t}\r\n\r\n\t\ttarget[ 0 ] = minx;\r\n\t\ttarget[ 1 ] = miny;\r\n\t\ttarget[ 2 ] = minz;\r\n\r\n\t\ttarget[ 3 ] = maxx;\r\n\t\ttarget[ 4 ] = maxy;\r\n\t\ttarget[ 5 ] = maxz;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\r\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\r\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\r\n\tpartition( offset, count, split ) {\r\n\r\n\t\tlet left = offset;\r\n\t\tlet right = offset + count - 1;\r\n\t\tconst pos = split.pos;\r\n\t\tconst axisOffset = split.axis * 2;\r\n\t\tconst index = this.geo.index.array;\r\n\t\tconst bounds = this.bounds;\r\n\t\tconst sahplanes = this.sahplanes;\r\n\r\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\twhile ( true ) {\r\n\r\n\t\t\twhile ( left <= right && bounds[ left * 6 + axisOffset ] < pos ) {\r\n\r\n\t\t\t\tleft ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( left <= right && bounds[ right * 6 + axisOffset ] >= pos ) {\r\n\r\n\t\t\t\tright --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( left < right ) {\r\n\r\n\t\t\t\t// we need to swap all of the information associated with the triangles at index\r\n\t\t\t\t// left and right; that's the verts in the geometry index, the bounds,\r\n\t\t\t\t// and perhaps the SAH planes\r\n\r\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tlet t0 = index[ left * 3 + i ];\r\n\t\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\r\n\t\t\t\t\tindex[ right * 3 + i ] = t0;\r\n\t\t\t\t\tlet t1 = bounds[ left * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 0 ] = bounds[ right * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 0 ] = t1;\r\n\t\t\t\t\tlet t2 = bounds[ left * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 1 ] = bounds[ right * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 1 ] = t2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( sahplanes ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tlet t = sahplanes[ i ][ left ];\r\n\t\t\t\t\t\tsahplanes[ i ][ left ] = sahplanes[ i ][ right ];\r\n\t\t\t\t\t\tsahplanes[ i ][ right ] = t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tleft ++;\r\n\t\t\t\tright --;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn left;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetOptimalSplit( bounds, offset, count, strategy ) {\r\n\r\n\t\tlet axis = - 1;\r\n\t\tlet pos = 0;\r\n\r\n\t\t// Center\r\n\t\tif ( strategy === CENTER ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = ( bounds[ axis + 3 ] + bounds[ axis ] ) / 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === AVERAGE ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = this.getAverage( offset, count, axis );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === SAH ) {\r\n\r\n\t\t\t// Surface Area Heuristic\r\n\t\t\t// In order to make this code more terse, the x, y, and z\r\n\t\t\t// variables of various structures have been stuffed into\r\n\t\t\t// 0, 1, and 2 array indices so they can be easily computed\r\n\t\t\t// and accessed within array iteration\r\n\r\n\t\t\t// Cost values defineed for operations. We're using bounds for traversal, so\r\n\t\t\t// the cost of traversing one more layer is more than intersecting a triangle.\r\n\t\t\tconst TRAVERSAL_COST = 3;\r\n\t\t\tconst INTERSECTION_COST = 1;\r\n\t\t\tconst bb = arrayToBox( bounds, boxtemp );\r\n\r\n\t\t\t// Define the width, height, and depth of the bounds as a box\r\n\t\t\tconst dim = [\r\n\t\t\t\tbb.max.x - bb.min.x,\r\n\t\t\t\tbb.max.y - bb.min.y,\r\n\t\t\t\tbb.max.z - bb.min.z\r\n\t\t\t];\r\n\t\t\tconst sa = 2 * ( dim[ 0 ] * dim[ 1 ] + dim[ 0 ] * dim[ 2 ] + dim[ 1 ] * dim[ 2 ] );\r\n\r\n\t\t\t// Get the precalculated planes based for the triangles we're\r\n\t\t\t// testing here\r\n\t\t\tconst filteredLists = [[], [], []];\r\n\t\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\t\tfor ( let v = 0; v < 3; v ++ ) {\r\n\r\n\t\t\t\t\tfilteredLists[ v ].push( this.sahplanes[ v ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tfilteredLists.forEach( planes => planes.sort( ( a, b ) => a.p - b.p ) );\r\n\r\n\t\t\t// this bounds surface area, left bound SA, left triangles, right bound SA, right triangles\r\n\t\t\tconst getCost = ( sa, sal, nl, sar, nr ) =>\r\n\t\t\t\t  TRAVERSAL_COST + INTERSECTION_COST * ( ( sal / sa ) * nl + ( sar / sa ) * nr );\r\n\r\n\t\t\t// the cost of _not_ splitting into smaller bounds\r\n\t\t\tconst noSplitCost = INTERSECTION_COST * count;\r\n\r\n\t\t\taxis = - 1;\r\n\t\t\tlet bestCost = noSplitCost;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t// o1 and o2 represent the _other_ two axes in the\r\n\t\t\t\t// the space. So if we're checking the x (0) dimension,\r\n\t\t\t\t// then o1 and o2 would be y and z (1 and 2)\r\n\t\t\t\tconst o1 = ( i + 1 ) % 3;\r\n\t\t\t\tconst o2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\tconst bmin = bb.min[ xyzFields[ i ] ];\r\n\t\t\t\tconst bmax = bb.max[ xyzFields[ i ] ];\r\n\t\t\t\tconst planes = filteredLists[ i ];\r\n\r\n\t\t\t\t// The number of left and right triangles on either side\r\n\t\t\t\t// given the current split\r\n\t\t\t\tlet nl = 0;\r\n\t\t\t\tlet nr = count;\r\n\t\t\t\tfor ( let p = 0; p < planes.length; p ++ ) {\r\n\r\n\t\t\t\t\tconst pinfo = planes[ p ];\r\n\r\n\t\t\t\t\t// As the plane moves, we have to increment or decrement the\r\n\t\t\t\t\t// number of triangles on either side of the plane\r\n\t\t\t\t\tnl ++;\r\n\t\t\t\t\tnr --;\r\n\r\n\t\t\t\t\t// the distance from the plane to the edge of the broader bounds\r\n\t\t\t\t\tconst ldim = pinfo.p - bmin;\r\n\t\t\t\t\tconst rdim = bmax - pinfo.p;\r\n\r\n\t\t\t\t\t// same for the other two dimensions\r\n\t\t\t\t\tlet ldimo1 = dim[ o1 ], rdimo1 = dim[ o1 ];\r\n\t\t\t\t\tlet ldimo2 = dim[ o2 ], rdimo2 = dim[ o2 ];\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// compute the other bounding planes for the box\r\n\t\t\t\t\t// if only the current triangles are considered to\r\n\t\t\t\t\t// be in the box\r\n\t\t\t\t\t// This is really slow and probably not really worth it\r\n\t\t\t\t\tconst o1planes = this.sahplanes[o1];\r\n\t\t\t\t\tconst o2planes = this.sahplanes[o2];\r\n\t\t\t\t\tlet lmin = Infinity, lmax = -Infinity;\r\n\t\t\t\t\tlet rmin = Infinity, rmax = -Infinity;\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o1planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o1planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo1 = Math.min(lmax - lmin, ldimo1);\r\n\t\t\t\t\trdimo1 = Math.min(rmax - rmin, rdimo1);\r\n\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o2planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o2planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo2 = Math.min(lmax - lmin, ldimo2);\r\n\t\t\t\t\trdimo2 = Math.min(rmax - rmin, rdimo2);\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// surface areas and cost\r\n\t\t\t\t\tconst sal = 2 * ( ldimo1 * ldimo2 + ldimo1 * ldim + ldimo2 * ldim );\r\n\t\t\t\t\tconst sar = 2 * ( rdimo1 * rdimo2 + rdimo1 * rdim + rdimo2 * rdim );\r\n\t\t\t\t\tconst cost = getCost( sa, sal, nl, sar, nr );\r\n\r\n\t\t\t\t\tif ( cost < bestCost ) {\r\n\r\n\t\t\t\t\t\taxis = i;\r\n\t\t\t\t\t\tpos = pinfo.p;\r\n\t\t\t\t\t\tbestCost = cost;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { axis, pos };\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport MeshBVHNode from './MeshBVHNode.js';\r\nimport BVHConstructionContext from './BVHConstructionContext.js';\r\nimport { arrayToBox, boxToArray } from './Utils/ArrayBoxUtilities.js';\r\nimport { CENTER } from './Constants.js';\r\n\r\nexport default class MeshBVH {\r\n\r\n\tconstructor( geo, options = {} ) {\r\n\r\n\t\tif ( ! geo.isBufferGeometry ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\r\n\r\n\t\t} else if ( geo.attributes.position.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the position attribute.' );\r\n\r\n\t\t} else if ( geo.index && geo.index.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\r\n\r\n\t\t}\r\n\r\n\t\t// default options\r\n\t\toptions = Object.assign( {\r\n\r\n\t\t\tstrategy: CENTER,\r\n\t\t\tmaxDepth: 40,\r\n\t\t\tmaxLeafTris: 10,\r\n\t\t\tverbose: true\r\n\r\n\t\t}, options );\r\n\t\toptions.strategy = Math.max( 0, Math.min( 2, options.strategy ) );\r\n\r\n\t\tthis._roots = this._buildTree( geo, options );\r\n\r\n\r\n\t}\r\n\r\n\t/* Private Functions */\r\n\r\n\t_ensureIndex( geo ) {\r\n\r\n\t\tif ( ! geo.index ) {\r\n\r\n\t\t\tconst vertexCount = geo.attributes.position.count;\r\n\t\t\tconst index = new ( vertexCount > 65535 ? Uint32Array : Uint16Array )( vertexCount );\r\n\t\t\tgeo.setIndex( new THREE.BufferAttribute( index, 1 ) );\r\n\r\n\t\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\t\t\tindex[ i ] = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Computes the set of { offset, count } ranges which need independent BVH roots. Each\r\n\t// region in the geometry index that belongs to a different set of material groups requires\r\n\t// a separate BVH root, so that triangles indices belonging to one group never get swapped\r\n\t// with triangle indices belongs to another group. For example, if the groups were like this:\r\n\t//\r\n\t// [-------------------------------------------------------------]\r\n\t// |__________________|\r\n\t//   g0 = [0, 20]  |______________________||_____________________|\r\n\t//                      g1 = [16, 40]           g2 = [41, 60]\r\n\t//\r\n\t// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\r\n\t//\r\n\t_getRootIndexRanges( geo ) {\r\n\r\n\t\tif ( ! geo.groups || ! geo.groups.length ) {\r\n\r\n\t\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\r\n\r\n\t\t}\r\n\r\n\t\tconst ranges = [];\r\n\t\tconst rangeBoundaries = new Set();\r\n\t\tfor ( const group of geo.groups ) {\r\n\r\n\t\t\trangeBoundaries.add( group.start );\r\n\t\t\trangeBoundaries.add( group.start + group.count );\r\n\r\n\t\t}\r\n\r\n\t\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\r\n\t\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\r\n\t\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\r\n\r\n\t\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\r\n\t\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\r\n\r\n\t\t}\r\n\t\treturn ranges;\r\n\r\n\t}\r\n\r\n\t_buildTree( geo, options ) {\r\n\r\n\t\tthis._ensureIndex( geo );\r\n\r\n\t\tconst ctx = new BVHConstructionContext( geo, options );\r\n\t\tlet reachedMaxDepth = false;\r\n\r\n\t\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\r\n\t\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\r\n\t\tconst splitNode = ( node, offset, count, depth = 0 ) => {\r\n\r\n\t\t\tif ( depth >= options.maxDepth ) {\r\n\r\n\t\t\t\treachedMaxDepth = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// early out if we've met our capacity\r\n\t\t\tif ( count <= options.maxLeafTris || depth >= options.maxDepth ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Find where to split the volume\r\n\t\t\tconst split = ctx.getOptimalSplit( node.boundingData, offset, count, options.strategy );\r\n\t\t\tif ( split.axis === - 1 ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst splitOffset = ctx.partition( offset, count, split );\r\n\r\n\t\t\t// create the two new child nodes\r\n\t\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode.splitAxis = split.axis;\r\n\r\n\t\t\t\t// create the left child and compute its bounding box\r\n\t\t\t\tconst left = node.left = new MeshBVHNode();\r\n\t\t\t\tconst lstart = offset, lcount = splitOffset - offset;\r\n\t\t\t\tleft.boundingData = ctx.getBounds( lstart, lcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( left, lstart, lcount, depth + 1 );\r\n\r\n\t\t\t\t// repeat for right\r\n\t\t\t\tconst right = node.right = new MeshBVHNode();\r\n\t\t\t\tconst rstart = splitOffset, rcount = count - lcount;\r\n\t\t\t\tright.boundingData = ctx.getBounds( rstart, rcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( right, rstart, rcount, depth + 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\r\n\t\t};\r\n\r\n\t\tconst roots = [];\r\n\t\tconst ranges = this._getRootIndexRanges( geo );\r\n\r\n\t\tif ( ranges.length === 1 ) {\r\n\r\n\t\t\tconst root = new MeshBVHNode();\r\n\t\t\tconst range = ranges[ 0 ];\r\n\r\n\t\t\tif ( geo.boundingBox != null ) {\r\n\r\n\t\t\t\troot.boundingData = boxToArray( geo.boundingBox );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\troot.boundingData = ctx.getBounds( range.offset, range.count, new Float32Array( 6 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsplitNode( root, range.offset, range.count );\r\n\t\t\troots.push( root );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let range of ranges ) {\r\n\r\n\t\t\t\tconst root = new MeshBVHNode();\r\n\t\t\t\troot.boundingData = ctx.getBounds( range.offset, range.count, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( root, range.offset, range.count );\r\n\t\t\t\troots.push( root );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( reachedMaxDepth && options.verbose ) {\r\n\r\n\t\t\tconsole.warn( `MeshBVH: Max depth of ${ options.maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\r\n\t\t\tconsole.warn( this, geo );\r\n\r\n\t\t}\r\n\r\n\t\t// if the geometry doesn't have a bounding box, then let's politely populate it using\r\n\t\t// the work we did to determine the BVH root bounds\r\n\r\n\t\tif ( geo.boundingBox == null ) {\r\n\r\n\t\t\tconst rootBox = new THREE.Box3();\r\n\t\t\tgeo.boundingBox = new THREE.Box3();\r\n\r\n\t\t\tfor ( let root of roots ) {\r\n\r\n\t\t\t\tgeo.boundingBox.union( arrayToBox( root.boundingData, rootBox ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn roots;\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\troot.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tlet closestResult = null;\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst result = root.raycastFirst( mesh, raycaster, ray );\r\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\r\n\r\n\t\t\t\tclosestResult = result;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn closestResult;\r\n\r\n\t}\r\n\r\n\tintersectsGeometry( mesh, geometry, geomToMesh ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsGeometry( mesh, geometry, geomToMesh ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tshapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc = null, orderNodesFunc = null ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, orderNodesFunc ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectsBox( mesh, box, boxToMesh ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsBox( mesh, box, boxToMesh ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( mesh, sphere ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsSphere( mesh, sphere ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tclosestPointToGeometry( mesh, geom, matrix, target1, target2, minThreshold, maxThreshold ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst dist = root.closestPointToGeometry( mesh, geom, matrix, target1, target2, minThreshold, maxThreshold );\r\n\t\t\tif ( dist < closestDistance ) closestDistance = dist;\r\n\t\t\tif ( dist < minThreshold ) return dist;\r\n\r\n\t\t}\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t}\r\n\r\n\tdistanceToGeometry( mesh, geom, matrix, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToGeometry( mesh, geom, matrix, null, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( mesh, point, target, minThreshold, maxThreshold ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst dist = root.closestPointToPoint( mesh, point, target, minThreshold, maxThreshold );\r\n\t\t\tif ( dist < closestDistance ) closestDistance = dist;\r\n\t\t\tif ( dist < minThreshold ) return dist;\r\n\r\n\t\t}\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( mesh, point, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToPoint( mesh, point, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { arrayToBox } from './Utils/ArrayBoxUtilities.js';\r\n\r\nconst wiremat = new THREE.LineBasicMaterial( { color: 0x00FF88, transparent: true, opacity: 0.3 } );\r\nconst boxGeom = new THREE.Box3Helper().geometry;\r\nlet boundingBox = new THREE.Box3();\r\n\r\nclass MeshBVHRootVisualizer extends THREE.Object3D {\r\n\r\n\tconstructor( mesh, depth = 10, group = 0 ) {\r\n\r\n\t\tsuper( 'MeshBVHRootVisualizer' );\r\n\r\n\t\tthis.depth = depth;\r\n\t\tthis._oldDepth = - 1;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boundsTree = null;\r\n\t\tthis._group = group;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tif ( this._mesh.geometry.boundsTree !== this._boundsTree || this._oldDepth !== this.depth ) {\r\n\r\n\t\t\tthis._oldDepth = this.depth;\r\n\t\t\tthis._boundsTree = this._mesh.geometry.boundsTree;\r\n\r\n\t\t\tlet requiredChildren = 0;\r\n\t\t\tif ( this._boundsTree ) {\r\n\r\n\t\t\t\tconst recurse = ( n, d ) => {\r\n\r\n\t\t\t\t\tlet isLeaf = 'count' in n;\r\n\r\n\t\t\t\t\tif ( d === this.depth ) return;\r\n\r\n\t\t\t\t\tif ( d === this.depth - 1 || isLeaf ) {\r\n\r\n\t\t\t\t\t\tlet m = requiredChildren < this.children.length ? this.children[ requiredChildren ] : null;\r\n\t\t\t\t\t\tif ( ! m ) {\r\n\r\n\t\t\t\t\t\t\tm = new THREE.LineSegments( boxGeom, wiremat );\r\n\t\t\t\t\t\t\tm.raycast = () => [];\r\n\t\t\t\t\t\t\tthis.add( m );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequiredChildren ++;\r\n\t\t\t\t\t\tarrayToBox( n.boundingData, boundingBox );\r\n\t\t\t\t\t\tboundingBox.getCenter( m.position );\r\n\t\t\t\t\t\tm.scale.subVectors( boundingBox.max, boundingBox.min ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t\tif ( m.scale.x === 0 ) m.scale.x = Number.EPSILON;\r\n\t\t\t\t\t\tif ( m.scale.y === 0 ) m.scale.y = Number.EPSILON;\r\n\t\t\t\t\t\tif ( m.scale.z === 0 ) m.scale.z = Number.EPSILON;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! isLeaf ) {\r\n\r\n\t\t\t\t\t\trecurse( n.left, d + 1 );\r\n\t\t\t\t\t\trecurse( n.right, d + 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\trecurse( this._boundsTree._roots[ this._group ], 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( this.children.length > requiredChildren ) this.remove( this.children.pop() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass MeshBVHVisualizer extends THREE.Object3D {\r\n\r\n\tconstructor( mesh, depth = 10 ) {\r\n\r\n\t\tsuper( 'MeshBVHVisualizer' );\r\n\r\n\t\tthis.depth = depth;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._roots = [];\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst bvh = this._mesh.geometry.boundsTree;\r\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\r\n\t\twhile ( this._roots.length > totalRoots ) {\r\n\r\n\t\t\tthis._roots.pop();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\r\n\r\n\t\t\tif ( i >= this._roots.length ) {\r\n\r\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this._mesh, this.depth, i );\r\n\t\t\t\tthis.add( root );\r\n\t\t\t\tthis._roots.push( root );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet root = this._roots[ i ];\r\n\t\t\t\troot.depth = this.depth;\r\n\t\t\t\troot.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( this._mesh.position );\r\n\t\tthis.rotation.copy( this._mesh.rotation );\r\n\t\tthis.scale.copy( this._mesh.scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default MeshBVHVisualizer;\r\n","import * as THREE from 'three';\r\nimport MeshBVH from './MeshBVH.js';\r\nimport Visualizer from './MeshBVHVisualizer.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst ray = new THREE.Ray();\r\nconst tmpInverseMatrix = new THREE.Matrix4();\r\nconst origMeshRaycastFunc = THREE.Mesh.prototype.raycast;\r\n\r\nfunction acceleratedRaycast( raycaster, intersects ) {\r\n\r\n\tif ( this.geometry.boundsTree ) {\r\n\r\n\t\tif ( this.material === undefined ) return;\r\n\r\n\t\ttmpInverseMatrix.getInverse( this.matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\r\n\r\n\t\tif ( raycaster.firstHitOnly === true ) {\r\n\r\n\t\t\tconst res = this.geometry.boundsTree.raycastFirst( this, raycaster, ray );\r\n\t\t\tif ( res ) intersects.push( res );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.geometry.boundsTree.raycast( this, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction computeBoundsTree( options ) {\r\n\r\n\tthis.boundsTree = new MeshBVH( this, options );\r\n\treturn this.boundsTree;\r\n\r\n}\r\n\r\nfunction disposeBoundsTree() {\r\n\r\n\tthis.boundsTree = null;\r\n\r\n}\r\n\r\nexport {\r\n\tMeshBVH, Visualizer,\r\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\r\n\tCENTER, AVERAGE, SAH\r\n};\r\n","import * as THREE from 'three'\nimport {Layout} from './layout/Layout'\nimport {Transitioner} from './layout/Transitioner'\n\n// accelerated raycasting\nimport { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh'\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree\nTHREE.Mesh.prototype.raycast = acceleratedRaycast\ndeclare module 'three/src/core/BufferGeometry' {\n    interface BufferGeometry {\n        computeBoundsTree() : void\n        disposeBoundsTree() : void\n        boundsTree?: any\n    }\n}\n\ndeclare module 'three/src/core/Object3D' {\n    interface Object3D {\n        /**\n         * Layout properties\n         */\n        layout: Layout\n        /**\n         * When active, enables pose (position, quaternion, scale) \n         * and layout (align, origin, size) properties to be used \n         * as transition targets for smooth interpolation.\n         */\n        transitioner: Transitioner\n        updateWorldMatrix(updateParents:boolean, updateChildren:boolean, updateLayout?:boolean) : void\n    }\n}\n\nlet _s = new THREE.Vector3\nTHREE.Object3D.prototype.updateMatrix = function(this:THREE.Object3D) {\n    const {position, quaternion, scale} = this\n    _s.copy(scale) // allow scale of 0 by making it very small\n    if (_s.x === 0) _s.x = 1e-10\n    if (_s.y === 0) _s.y = 1e-10\n    if (_s.z === 0) _s.z = 1e-10\n    this.matrix.compose(position, quaternion, scale)\n}\n\n// modify updateMatrixWorld to rely on updateWorldMatrix method\nTHREE.Object3D.prototype.updateMatrixWorld = function(force) {\n    if (this._inUpdateWorldMatrix) return\n    this.updateWorldMatrix(false, true, true)\n}\n\n// modify Object3D.updateWorldMatrix to apply layout\nTHREE.Object3D.prototype.updateWorldMatrix = function(this:THREE.Object3D, updateParents:boolean, updateChildren:boolean, updateLayout=true) {\n\n    const parent = this.parent\n\n    // update parents\n\n    if ( updateParents === true && parent !== null ) {\n\n        parent.updateWorldMatrix( true, false, true )\n\n    }\n\n    // update without layout\n\n    if ( this.matrixAutoUpdate ) this.updateMatrix()\n\n    if ( this.parent === null ) {\n\n        this.matrixWorld.copy( this.matrix )\n\n    } else {\n\n        this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix )\n\n    }\n\n    // update children without layout\n\n    const children = this.children;\n\n    if ( updateChildren === true ) {\n\n        for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n            children[ i ].updateWorldMatrix( false, true, false )\n\n        }\n    }\n\n    // update and apply layout\n\n    if ( updateLayout === true ) {\n\n        updateChildren && this.layout.invalidateBounds() // only invalidate when traversing down\n        this.layout.updateMatrix()\n        const layoutMatrix = this.layout.matrix\n        const transitioner = this.transitioner as Transitioner\n        // const {matrixTarget, layoutMatrixTarget} = transitioner\n        \n        transitioner.matrixLocal.target.multiplyMatrices( this.layout.matrix, this.matrix )\n        const matrixLocal = transitioner.active ? transitioner.matrixLocal.current : transitioner.matrixLocal.target\n\n        if ( parent === null ) {\n            transitioner.matrixWorldTarget.copy(transitioner.matrixLocal.target)\n            this.matrixWorld.copy(matrixLocal)\n            // this.matrixWorld.multiplyMatrices( layoutMatrix, this.matrix )\n            // transitioner.targetMatrixWorld.multiplyMatrices( layoutMatrixTarget, matrixTarget )\n            \n        } else {\n\n            transitioner.matrixWorldTarget.multiplyMatrices( parent.transitioner.matrixWorldTarget, transitioner.matrixLocal.target)\n            this.matrixWorld.multiplyMatrices( parent.matrixWorld, matrixLocal )\n            // this.matrixWorld.multiplyMatrices( parent.matrixWorld, layoutMatrix ).multiply(this.matrix)\n            // transitioner.targetMatrixWorld.multiplyMatrices( parent.transitioner.targetMatrixWorld, layoutMatrixTarget).multiply( matrixTarget )\n\n        }\n\n        // update children with layout\n\n        if ( updateChildren === true ) {\n\n            for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n                children[ i ].updateWorldMatrix( false, true, true );\n        \n            }\n\n        }\n\n    }\n    \n    this['_inUpdateWorldMatrix'] = true\n    this.updateMatrixWorld() // some three.js Object3D subclasses have special behavior here\n    this['_inUpdateWorldMatrix'] = false\n\n}\n\n// create a SpatialLayout instance on first access of the `layout` property \nObject.defineProperty(THREE.Object3D.prototype, 'layout', {\n    get: function getLayout(this:THREE.Object3D) {\n        if (this === THREE.Object3D.prototype) return undefined\n        Object.defineProperty(this, 'layout', {\n            value: new Layout(this),\n            writable: true,\n            enumerable: true\n        })\n        return this.layout\n    }\n})\n\n// create a SpatialTransitioner instance on first access of the `transitioner` property \nObject.defineProperty(THREE.Object3D.prototype, 'transitioner', {\n    get: function getTransitioner(this:THREE.Object3D) {\n        if (this === THREE.Object3D.prototype) return undefined\n        Object.defineProperty(this, 'transitioner', {\n            value: new Transitioner(this),\n            writable: true,\n            enumerable: true\n        })\n        return this.transitioner\n    }\n})","import * as THREE from 'three'\nimport { Box3Helper } from 'three'\n\nexport class LayoutHelper extends THREE.Object3D {\n\n    private _transitional = new THREE.Object3D \n    private _transitionalBoxHelper = new Box3Helper(this._transitional.layout.inner)\n    private _target = new THREE.Object3D \n    private _targetBoxHelper = new Box3Helper(this._target.layout.inner)\n\n    constructor() {\n        super()\n        this.add(this._transitional)\n        this._transitional.layout.innerAutoUpdate = false\n        this._transitional.layout.forceBoundsExclusion = true\n        this._transitional.add(this._transitionalBoxHelper)\n        this._transitionalBoxHelper.layout.forceBoundsExclusion = true\n        this.add(this._target)\n        this._target.layout.innerAutoUpdate = false\n        this._target.layout.forceBoundsExclusion = true\n        this._target.add(this._targetBoxHelper)\n        this._targetBoxHelper.layout.forceBoundsExclusion = true\n        ;(this._targetBoxHelper.material as THREE.LineBasicMaterial).color.setStyle('magenta')\n    }\n\n    updateWorldMatrix(parents:boolean, children:boolean, layout?:boolean) {\n        super.updateWorldMatrix(parents, children, layout)\n        if (this.parent) {\n            this._target.layout.inner.copy(this.parent.layout.computedInnerBounds)\n            this._target.matrixWorld.copy(this.parent.transitioner.matrixWorldTarget)\n            this._targetBoxHelper.updateMatrixWorld()\n            this._transitional.layout.inner.copy(this.parent.layout.computedInnerBounds)\n            this._transitional.updateMatrixWorld()\n        }\n    }\n\n}","export abstract class Behavior {\n    object:THREE.Object3D\n    init?(this:Behavior)\n    update?(this:Behavior, deltaTime:number)\n    postUpdate?(this:Behavior, deltaTime:number)\n}","import { Behavior } from './Behavior'\nimport { SpatialMetrics } from '../metrics/SpatialMetrics'\nimport { Transitioner } from '../layout/Transitioner'\n\ntype FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<Required<T>>>\n\n/**\n * When many objects in a scene-graph have behaviors that adapt to the\n * behavior of other objects, it is crucial that these chains of adaptive \n * behavior update in a way that minimizes unecessary scene-graph calculations \n * while also not adapting in the wrong order (which would cause some behaviors\n * to be permanently lagging behind one or more frames as they adapt to stale state). \n * \n * This class supports efficient execution of adaptive behaviors\n * in an optimal order such that all behaviors are adapting to fresh state \n * with minimal traversal of the scene-graph. \n */\nexport class AdaptivityManager {\n\n    private static _getBehaviors = Symbol('getBehaviors')\n\n    private static _didUpdate = Symbol('didUpdate')\n\n    static addBehavior(object:THREE.Object3D, behavior:FunctionProperties<Behavior>|NonNullable<typeof Behavior.prototype.update>) {\n        const behaviors = object[AdaptivityManager._getBehaviors] = object[AdaptivityManager._getBehaviors] || []\n        let b:Behavior\n        if (typeof behavior === 'function') b = {object, update:behavior} \n        else b = <Behavior>behavior\n        b.object = object\n        b.init && b.init()\n        behaviors.push(b)\n    }\n\n    static getBehaviors(object:THREE.Object3D) {\n        return object[AdaptivityManager._getBehaviors] as Behavior[]\n    }\n    \n    static currentScene:THREE.Scene\n    static currentCamera:THREE.Camera\n    static currentDeltaTime:number\n\n    static update(scene:THREE.Scene, camera:THREE.Camera, deltaTime:number) {\n        AdaptivityManager.currentScene = scene\n        AdaptivityManager.currentCamera = camera\n        AdaptivityManager.currentDeltaTime = deltaTime\n        scene.updateWorldMatrix(true, true)\n        AdaptivityManager.ensureUpdate(camera)\n        scene.traverse(AdaptivityManager.ensureUpdate)\n        AdaptivityManager.currentScene = undefined as any\n        AdaptivityManager.currentCamera = undefined as any\n        AdaptivityManager.currentDeltaTime = undefined as any\n        Promise.resolve(scene).then(AdaptivityManager.clearUpdateFlag)\n    }\n\n    static clearUpdateFlag(scene:THREE.Scene) {\n        scene.traverse((obj) => obj[AdaptivityManager._didUpdate] = false)\n    }\n\n    static ensureUpdate(obj:THREE.Object3D) {\n        if (!AdaptivityManager.currentScene) throw new Error('AdaptivityManager.ensureUpdate: must be called inside a Behavior callback')\n        if (obj[AdaptivityManager._didUpdate]) return\n        obj[AdaptivityManager._didUpdate] = true\n        obj.parent && AdaptivityManager.ensureUpdate(obj.parent)\n        const behaviors = AdaptivityManager.getBehaviors(obj)\n        Transitioner.disableAllTransitions = true\n        if (behaviors) for (const b of behaviors) {\n            if (b.update) {\n                b.update(AdaptivityManager.currentDeltaTime!)\n                obj.updateWorldMatrix(false, true)\n            }\n        }\n        Transitioner.disableAllTransitions = false\n        obj.transitioner.update(AdaptivityManager.currentDeltaTime!, false)\n        if (behaviors) for (const b of behaviors) {\n            if (b.postUpdate) {\n                b.postUpdate(AdaptivityManager.currentDeltaTime!)\n                obj.updateWorldMatrix(false, true)\n            }\n        }\n    }\n}","import * as THREE from 'three'\nimport { Behavior } from './Behavior'\nimport { SpatialMetrics, Box3 } from '../metrics/SpatialMetrics'\nimport { vectors } from '../utils'\nimport { AdaptivityManager } from './AdaptivityManager'\nimport { Transitionable } from '../layout/Transitioner'\n\n// TODO: take occluder velocity into account, ignore fast moving occluders\n// TODO: clip change threshold to minimize small corrections\n\nexport class AdaptiveClippingBehavior extends Behavior {\n\n    private _boxA = new Box3\n    private _boxB = new Box3\n\n    occluders = [] as THREE.Object3D[]\n\n    occluderInfluenceDelay = 0.5\n\n    occlusionTime = new WeakMap<THREE.Object3D, number>()\n\n    update(deltaTime:number) {\n        const camera = AdaptivityManager.currentCamera\n        const cameraMetrics = SpatialMetrics.get(camera)\n\n        const object = this.object\n        object.layout.clip.makeEmpty()\n        object.updateWorldMatrix(true, true)\n        const objectMetrics = SpatialMetrics.get(object)\n        const objectDistance = cameraMetrics.getDistanceOf(object)\n        const objectBounds = this._boxA.copy(object.layout.computedInnerBounds)\n        objectBounds.min.z = -Infinity\n        objectBounds.max.z = Infinity\n\n        const clip = object.layout.clip\n        // const clip = this.clipTarget.target.makeEmpty()\n\n        // for each occluder, need to crop the layout by at most \n        // a single cut that minimizes the lost space \n        for (let i = 0; i < this.occluders.length; i++) {\n            const occluder = this.occluders[i]\n\n            // todo: add priority rule to allow adaptation to background (rather than foreground) objects\n            const occluderDistance = cameraMetrics.getDistanceOf(occluder)\n            if (occluderDistance > objectDistance) {\n                this.occlusionTime.set(occluder, 0)\n                continue\n            }\n\n            // make sure potential occluder behaviors have already executed\n            AdaptivityManager.ensureUpdate(occluder)\n\n            const occluderBounds = objectMetrics.getBoundsOf(occluder, this._boxB)\n            occluderBounds.min.z = -Infinity\n            occluderBounds.max.z = Infinity\n\n            if (!objectBounds.intersectsBox(occluderBounds)) {\n                this.occlusionTime.set(occluder, 0)\n                continue\n            }\n\n            let occlusionTime = (this.occlusionTime.get(occluder) || 0) + deltaTime\n            this.occlusionTime.set(occluder, occlusionTime)\n\n            if (occlusionTime < this.occluderInfluenceDelay) {\n                continue\n            }\n\n            const occluderCenter = occluderBounds.getCenter(vectors.get())\n            if (occluderCenter.x > 0) clip.max.x = isFinite(clip.max.x) ? Math.min(occluderBounds.min.x, clip.max.x) : occluderBounds.min.x\n            if (occluderCenter.x < 0) clip.min.x = isFinite(clip.min.x) ? Math.max(occluderBounds.max.x, clip.min.x) : occluderBounds.max.x\n            if (occluderCenter.y > 0) clip.max.y = isFinite(clip.max.y) ? Math.min(occluderBounds.min.y, clip.max.y) : occluderBounds.min.y\n            if (occluderCenter.y < 0) clip.min.y = isFinite(clip.min.y) ? Math.max(occluderBounds.max.y, clip.min.y) : occluderBounds.max.y\n        }\n    }\n\n    postUpdate() {\n        // this.object.layout.clip.copy(this.clipTarget.current)\n        // this.object.updateWorldMatrix(true, true)\n    }\n}"],"names":["V_00","Object","freeze","THREE","V_11","V_000","V_100","V_010","V_001","V_111","Q_IDENTITY","const","next","Promise","resolve","Pool","constructor","_factory","_reset","Set","_nextAutoPool","undefined","_poolAll","get","object","_pool","pop","_unpooled","add","then","_autoPool","pool","o","push","delete","size","vectors2","vec","set","vectors","vectors4","quaternions","quat","matrices3","mat","identity","matrices","traverse","each","bind","call","children","let","child","Visible","Deleted","v1","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","assign","prototype","setFromPoints","points","Array","isArray","console","error","length","makeEmpty","i","l","VertexNode","compute","setFromObject","updateMatrixWorld","node","point","geometry","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","attributes","position","count","fromBufferAttribute","containsPoint","face","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","vertex","outside","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","end","removeSubList","prev","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distance","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","mark","computeExtremes","minVertices","maxVertices","j","copy","getComponent","setComponent","Number","EPSILON","abs","x","y","z","computeInitialHull","line3","plane","closestPoint","extremes","v0","v2","v3","index","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","edge","twinEdge","twin","oppositeFace","addAdjoiningFace","horizonEdge","tail","head","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","midpoint","area","constant","a","b","c","e0","HalfEdge","e1","e2","triangle","getNormal","getMidpoint","getArea","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","quickHull","addAttribute","SimplifyModifier","cb","ab","pushIfUnique","array","indexOf","removeFromArray","k","splice","computeEdgeCollapseCost","u","v","edgelength","curvature","sideFaces","il","sideFace","hasVertex","minCurvature","dotProd","borders","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","n","removeFace","f","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","computeNormal","addUniqueNeighbor","vA","vB","vC","subVectors","cross","normalize","oldv","newv","Vertex","id","offset","modify","oldVertices","oldFaces","log","simplifiedGeometry","setIndex","SimplifiedHull","maxPoints","bufferGeometry","type","normalGeometry","hulls","modifier","hull","simplified","WeakMap","Box3","SpatialMetrics","objectFilter","_onObjectTraverse","_objectExpandFunction","objectExpansion","expandByObjectGeometry","expandByObjectHull","expandByObjectBox","vector","_vector","mesh","updateWorldMatrix","_getCoordinateSystemTransform","expandByPoint","getAttribute","itemSize","getX","getY","getZ","box","_box","boundingBox","computeBoundingBox","union","mat4","_mat4","coordinateSystem","getInverse","transitioner","matrixWorldTarget","multiply","relativeToAbsolute","relativePosition","out","center","_center","_size","getCenter","getSize","multiplyScalar","absoluteToRelative","absolutePosition","sub","divide","isFinite","rotateY180","setFromAxisAngle","PI","VisualFrustum","left","leftClamped","minClamped","top","topClamped","maxClamped","right","rightClamped","bottom","bottomClamped","near","nearClamped","far","farClamped","horizontal","horizontalClamped","vertical","verticalClamped","depth","depthClamped","diagonal","minDirection","getCartesianForSphericalDirection","maxDirection","angleTo","RAD2DEG","diagonalClamped","getClampedCenter","getClampedSize","getPositionForOffset","getClampedPositionForOffset","setFromPerspectiveProjectionMatrix","projectionMatrix","inverseProjection","_applyClamping","m","isMesh","vertexPosition","_vec3","localToReferenceFrame","metrics","vertexVisualPosition","getVisualPositionForCartesianPosition","_boxPoints","p","minClamp","maxClamp","_metrics","has","sphericalDirection","visualElevationRadians","DEG2RAD","visualAzimuthRadians","sin","cos","getSphericalDirectionForCartesian","cartesian","asin","atan2","getSphericalPositionForCartesian","getCartesianForSphericalPosition","sphericalPosition","visualDirection","getMatrixWorld","matrixWorldGetter","getCartesianForVisualDirection","isCamera","applyQuaternion","getVisualDirectionForCartesian","cartesianPosition","getCartesianForVisualPosition","visualPosition","getPositionOf","setFromMatrixPosition","invMatrixWorld","getDistanceOf","result","getDirectionOf","lengthSq","getWorldDirectionOf","transformDirection","getClosestOrthogonalOrientationOf","viewToObjectMat","extractRotation","orientation","setFromRotationMatrix","forwardDirection","upDirection","distForward","distUp","closestForwardDirection","closestUpDirection","directions","dir","dist","lookAt","getOrientationOf","rotMat","targetWorldOrientation","inverseThisWorldOrientation","inverse","multiplyQuaternions","getVisualDirectionOf","getVisualAngleOf","getBoundsOf","getVisualFrustumOf","_visualFrustum","camera","getVisualOffsetOf","layout","isBoundingContext","LayoutFit","contain","contain3d","cover","cover3d","fill","fill3d","Layout","computedInnerBounds","fit","_fit","fitTargets","prototypeAccessors","invalidateBounds","_boundsValid","resetLayout","absolute","relative","resetPose","setScalar","quaternion","scale","reset","isPassive","forceBoundsExclusion","updateMatrix","bounds","computedBounds","matrix","updateInnerBounds","updateOuterBounds","computedOuterBounds","clip","clipMax","clipMin","minSize","minRelativeSize","minAbsoluteSize","innerSize","layoutScale","adjustScaleForFit","finalSize","multiplyVectors","orient","makeRotationFromQuaternion","halfFinalSize","divideScalar","layoutAlignOffset","fitAlign","innerAlignOffset","layoutPosition","compose","inner","parentBounds","parent","cameraParent","projectionMatrixInverse","projectionZ","sizeScale","fitScale","_fitScale","clamp","ax","ay","az","lerp","easing","e","defined","obj","TransitionTarget","value","duration","Transitionable","config","current","update","deltaTime","changePercent","_updateConfig","queue","targetQueue","_changePercent","_computePercentChange","multiplier","threshold","_delayTime","delay","committedTarget","_debounceTime","_waitTime","debounce","maxWait","elapsed","shift","_setCurrent","previousTarget","_addTargetInfluence","alpha","s","pos","decompose","sPos","sQuat","sScale","tPos","tQuat","tScale","slerp","amount","_c","_cBlack","minAmount","maxAmount","range","ePos","eQuat","eScale","posPercent","equals","quatPercent","scalePercent","percent","r","g","minPercent","maxPercent","_config","Transitioner","DEFAULT_CONFIG","LocalMatrixTransitionable","autoRange","synchronizeComponents","matrixLocal","active","_active","disableAllTransitions","transitionable","customTransitionables","autoActive","_setPropertyAtPath","_setParent","path","parentTarget","originalMatrixWorld","inverseParentMatrixWorld","easeInOut","curr","separator","self","properties","split","reduce","lastPropertKey","property","Vector3","Vector2","BackSide","DoubleSide","Face3","Plane","Line3","Sphere","Matrix4","THREE.Box3","THREE.Vector3","THREE.Mesh","THREE.Matrix4","xyzFields","THREE.BufferAttribute","THREE.LineBasicMaterial","THREE.Box3Helper","THREE.Ray","computeBoundsTree","disposeBoundsTree","raycast","acceleratedRaycast","_s","force","_inUpdateWorldMatrix","updateParents","updateChildren","updateLayout","matrixAutoUpdate","multiplyMatrices","defineProperty","getLayout","writable","enumerable","getTransitioner","LayoutHelper","Box3Helper","_transitional","_target","innerAutoUpdate","_transitionalBoxHelper","_targetBoxHelper","material","color","setStyle","parents","Behavior","AdaptivityManager","addBehavior","behavior","behaviors","_getBehaviors","init","getBehaviors","scene","currentScene","currentCamera","currentDeltaTime","ensureUpdate","clearUpdateFlag","_didUpdate","Error","postUpdate","Symbol","AdaptiveClippingBehavior","cameraMetrics","objectMetrics","objectDistance","objectBounds","_boxA","occluders","occluder","occluderDistance","occlusionTime","occluderBounds","_boxB","intersectsBox","occluderInfluenceDelay","occluderCenter"],"mappings":"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"}