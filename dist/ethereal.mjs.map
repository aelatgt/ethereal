{"version":3,"file":"ethereal.mjs","sources":["../src/utils.ts","../src/metrics/QuickHull.js","../src/metrics/ConvexGeometry.ts","../src/metrics/SimplifyModifier.js","../src/metrics/SpatialMetrics.ts","../src/layout/Layout.ts","../node_modules/@popmotion/easing/dist/easing.es.js","../src/layout/Transitioner.ts","../node_modules/three-mesh-bvh/src/Utils/ThreeIntersectionUtilities.js","../node_modules/three-mesh-bvh/src/Utils/RayIntersectTriUtlities.js","../node_modules/three-mesh-bvh/src/Utils/ArrayBoxUtilities.js","../node_modules/three-mesh-bvh/src/Utils/SeparatingAxisBounds.js","../node_modules/three-mesh-bvh/src/Utils/MathUtilities.js","../node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js","../node_modules/three-mesh-bvh/src/Utils/OrientedBox.js","../node_modules/three-mesh-bvh/src/MeshBVHNode.js","../node_modules/three-mesh-bvh/src/Constants.js","../node_modules/three-mesh-bvh/src/BVHConstructionContext.js","../node_modules/three-mesh-bvh/src/MeshBVH.js","../node_modules/three-mesh-bvh/src/MeshBVHVisualizer.js","../node_modules/three-mesh-bvh/src/index.js","../src/THREE_Extensions.ts","../src/layout/LayoutHelper.ts","../src/adaptivity/Behavior.ts","../src/adaptivity/AdaptivityManager.ts","../src/adaptivity/AdaptiveClippingBehavior.ts"],"sourcesContent":["import * as THREE from 'three'\n\nexport const V_00 = Object.freeze(new THREE.Vector2)\nexport const V_11 = Object.freeze(new THREE.Vector2)\nexport const V_000 = Object.freeze(new THREE.Vector3)\nexport const V_100 = Object.freeze(new THREE.Vector3(1,0,0))\nexport const V_010 = Object.freeze(new THREE.Vector3(0,1,0))\nexport const V_001 = Object.freeze(new THREE.Vector3(0,0,1))\nexport const V_111 = Object.freeze(new THREE.Vector3(1,1,1))\nexport const Q_IDENTITY = Object.freeze(new THREE.Quaternion)\n\nconst next = Promise.resolve()\n\nexport class Pool<T> {\n\n  constructor(private _factory:() => T, private _reset:(t:T) => T) {}\n\n  private _pool = [] as T[]\n  private _unpooled = new Set<T>()\n  private _nextAutoPool?:Promise<void>\n\n  get() { \n    const object = this._pool.pop() || this._reset(this._factory())\n    this._unpooled.add(object)\n    if (!this._nextAutoPool) this._nextAutoPool = next.then(this._autoPool)\n    return object\n  }\n\n  pool(o:T) {\n    this._pool.push(o)\n    this._unpooled.delete(o)\n    this._reset(o)\n  }\n\n  private _poolAll() {\n    if (this._unpooled.size === 0) return\n    for (const o of this._unpooled) this.pool(o)\n  }\n\n  private _autoPool = () => {\n    this._nextAutoPool = undefined\n    this._poolAll()\n  }\n}\n\nexport const vectors2 = new Pool<THREE.Vector2>(\n  () => new THREE.Vector2, \n  (vec) => vec.set(0,0)\n)\n\nexport const vectors = new Pool<THREE.Vector3>(\n    () => new THREE.Vector3, \n    (vec) => vec.set(0,0,0)\n)\n\nexport const vectors4 = new Pool<THREE.Vector4>(\n    () => new THREE.Vector4, \n    (vec) => vec.set(0,0,0,1)\n)\n\nexport const quaternions = new Pool<THREE.Quaternion>(\n    () => new THREE.Quaternion, \n    (quat) => quat.set(0,0,0,1)\n)\n\nexport const matrices3 = new Pool<THREE.Matrix3>(\n  () => new THREE.Matrix3, \n  (mat) => mat.identity()\n)\n\nexport const matrices = new Pool<THREE.Matrix4>(\n    () => new THREE.Matrix4, \n    (mat) => mat.identity()\n)\n\nexport function traverse(\n  object: THREE.Object3D,\n  each: (node: THREE.Object3D) => boolean,\n  bind?: any\n) {\n  if (!each.call(bind, object)) return\n  for (let child of object.children) {\n    traverse(child, each, bind)\n  }\n}","import * as THREE from 'three'\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n *\n */\n\n\nvar Visible = 0;\nvar Deleted = 1;\n\nvar v1 = new THREE.Vector3();\n\nexport function QuickHull() {\n\n\tthis.tolerance = - 1;\n\n\tthis.faces = []; // the generated faces of the convex hull\n\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\n\n\t// the vertex lists work as follows:\n\t//\n\t// let 'a' and 'b' be 'Face' instances\n\t// let 'v' be points wrapped as instance of 'Vertex'\n\t//\n\t//     [v, v, ..., v, v, v, ...]\n\t//      ^             ^\n\t//      |             |\n\t//  a.outside     b.outside\n\t//\n\tthis.assigned = new VertexList();\n\tthis.unassigned = new VertexList();\n\n\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\n\n}\n\nObject.assign( QuickHull.prototype, {\n\n\tsetFromPoints: function ( points ) {\n\n\t\tif ( Array.isArray( points ) !== true ) {\n\n\t\t\tconsole.error( 'THREE.QuickHull: Points parameter is not an array.' );\n\n\t\t}\n\n\t\tif ( points.length < 4 ) {\n\n\t\t\tconsole.error( 'THREE.QuickHull: The algorithm needs at least four points.' );\n\n\t\t}\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.vertices.push( new VertexNode( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.compute();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\tvar points = [];\n\n\t\tobject.updateMatrixWorld( true );\n\n\t\tobject.traverse( function ( node ) {\n\n\t\t\tvar i, l, point;\n\n\t\t\tvar geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tpoint = vertices[ i ].clone();\n\t\t\t\t\t\tpoint.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tpoint = new THREE.Vector3();\n\n\t\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.setFromPoints( points );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar faces = this.faces;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// compute signed distance and check on what half space the point lies\n\n\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectRay: function ( ray, target ) {\n\n\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n\n\t\tvar faces = this.faces;\n\n\t\tvar tNear = - Infinity;\n\t\tvar tFar = Infinity;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// interpret faces as planes for the further computation\n\n\t\t\tvar vN = face.distanceToPoint( ray.origin );\n\t\t\tvar vD = face.normal.dot( ray.direction );\n\n\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\n\n\t\t\tif ( vN > 0 && vD >= 0 ) return null;\n\n\t\t\t// compute the distance from the rayâ€™s origin to the intersection with the plane\n\n\t\t\tvar t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\n\n\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\n\t\t\t// lies \"behind\" the origin\n\n\t\t\tif ( t <= 0 ) continue;\n\n\t\t\t// now categorized plane as front-facing or back-facing\n\n\t\t\tif ( vD > 0 ) {\n\n\t\t\t\t//  plane faces away from the ray, so this plane is a back-face\n\n\t\t\t\ttFar = Math.min( t, tFar );\n\n\t\t\t} else {\n\n\t\t\t\t// front-face\n\n\t\t\t\ttNear = Math.max( t, tNear );\n\n\t\t\t}\n\n\t\t\tif ( tNear > tFar ) {\n\n\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// evaluate intersection point\n\n\t\t// always try tNear first since its the closer intersection point\n\n\t\tif ( tNear !== - Infinity ) {\n\n\t\t\tray.at( tNear, target );\n\n\t\t} else {\n\n\t\t\tray.at( tFar, target );\n\n\t\t}\n\n\t\treturn target;\n\n\t},\n\n\tintersectsRay: function ( ray ) {\n\n\t\treturn this.intersectRay( ray, v1 ) !== null;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.faces = [];\n\t\tthis.vertices = [];\n\n\t\treturn this;\n\n\t},\n\n\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\taddVertexToFace: function ( vertex, face ) {\n\n\t\tvertex.face = face;\n\n\t\tif ( face.outside === null ) {\n\n\t\t\tthis.assigned.append( vertex );\n\n\t\t} else {\n\n\t\t\tthis.assigned.insertBefore( face.outside, vertex );\n\n\t\t}\n\n\t\tface.outside = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\tremoveVertexFromFace: function ( vertex, face ) {\n\n\t\tif ( vertex === face.outside ) {\n\n\t\t\t// fix face.outside link\n\n\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\n\n\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\n\n\t\t\t\tface.outside = vertex.next;\n\n\t\t\t} else {\n\n\t\t\t\t// vertex was the only outside vertex that face had\n\n\t\t\t\tface.outside = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.assigned.remove( vertex );\n\n\t\treturn this;\n\n\t},\n\n\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\tremoveAllVerticesFromFace: function ( face ) {\n\n\t\tif ( face.outside !== null ) {\n\n\t\t\t// reference to the first and last vertex of this face\n\n\t\t\tvar start = face.outside;\n\t\t\tvar end = face.outside;\n\n\t\t\twhile ( end.next !== null && end.next.face === face ) {\n\n\t\t\t\tend = end.next;\n\n\t\t\t}\n\n\t\t\tthis.assigned.removeSubList( start, end );\n\n\t\t\t// fix references\n\n\t\t\tstart.prev = end.next = null;\n\t\t\tface.outside = null;\n\n\t\t\treturn start;\n\n\t\t}\n\n\t},\n\n\t// Removes all the visible vertices that 'face' is able to see\n\n\tdeleteFaceVertices: function ( face, absorbingFace ) {\n\n\t\tvar faceVertices = this.removeAllVerticesFromFace( face );\n\n\t\tif ( faceVertices !== undefined ) {\n\n\t\t\tif ( absorbingFace === undefined ) {\n\n\t\t\t\t// mark the vertices to be reassigned to some other face\n\n\t\t\t\tthis.unassigned.appendChain( faceVertices );\n\n\n\t\t\t} else {\n\n\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\n\n\t\t\t\tvar vertex = faceVertices;\n\n\t\t\t\tdo {\n\n\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n\t\t\t\t\t// will be changed by upcoming method calls\n\n\t\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\t\tvar distance = absorbingFace.distanceToPoint( vertex.point );\n\n\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\n\n\t\t\t\t\tif ( distance > this.tolerance ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.unassigned.append( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// now assign next vertex\n\n\t\t\t\t\tvertex = nextVertex;\n\n\t\t\t\t} while ( vertex !== null );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\tresolveUnassignedPoints: function ( newFaces ) {\n\n\t\tif ( this.unassigned.isEmpty() === false ) {\n\n\t\t\tvar vertex = this.unassigned.first();\n\n\t\t\tdo {\n\n\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\n\n\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\tvar maxDistance = this.tolerance;\n\n\t\t\t\tvar maxFace = null;\n\n\t\t\t\tfor ( var i = 0; i < newFaces.length; i ++ ) {\n\n\t\t\t\t\tvar face = newFaces[ i ];\n\n\t\t\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\t\t\tvar distance = face.distanceToPoint( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tmaxFace = face;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\n\n\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t}\n\n\t\t\t\tvertex = nextVertex;\n\n\t\t\t} while ( vertex !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Computes the extremes of a simplex which will be the initial hull\n\n\tcomputeExtremes: function () {\n\n\t\tvar min = new THREE.Vector3();\n\t\tvar max = new THREE.Vector3();\n\n\t\tvar minVertices = [];\n\t\tvar maxVertices = [];\n\n\t\tvar i, l, j;\n\n\t\t// initially assume that the first vertex is the min/max\n\n\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\n\n\t\t}\n\n\t\tmin.copy( this.vertices[ 0 ].point );\n\t\tmax.copy( this.vertices[ 0 ].point );\n\n\t\t// compute the min/max vertex on all six directions\n\n\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvar point = vertex.point;\n\n\t\t\t// update the min coordinates\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\n\n\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tminVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the max coordinates\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\n\n\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tmaxVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use min/max vectors to compute an optimal epsilon\n\n\t\tthis.tolerance = 3 * Number.EPSILON * (\n\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\n\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\n\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\n\t\t);\n\n\t\treturn { min: minVertices, max: maxVertices };\n\n\t},\n\n\t// Computes the initial simplex assigning to its faces all the points\n\t// that are candidates to form part of the hull\n\n\tcomputeInitialHull: function () {\n\n\t\tvar line3, plane, closestPoint;\n\n\t\treturn function computeInitialHull() {\n\n\t\t\tif ( line3 === undefined ) {\n\n\t\t\t\tline3 = new THREE.Line3();\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar vertex, vertices = this.vertices;\n\t\t\tvar extremes = this.computeExtremes();\n\t\t\tvar min = extremes.min;\n\t\t\tvar max = extremes.max;\n\n\t\t\tvar v0, v1, v2, v3;\n\t\t\tvar i, l, j;\n\n\t\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n\t\t\t// (max.x - min.x)\n\t\t\t// (max.y - min.y)\n\t\t\t// (max.z - min.z)\n\n\t\t\tvar distance, maxDistance = 0;\n\t\t\tvar index = 0;\n\n\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\tdistance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tindex = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tv0 = min[ index ];\n\t\t\tv1 = max[ index ];\n\n\t\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n\t\t\tmaxDistance = 0;\n\t\t\tline3.set( v0.point, v1.point );\n\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\n\n\t\t\t\t\tline3.closestPointToPoint( vertex.point, true, closestPoint );\n\n\t\t\t\t\tdistance = closestPoint.distanceToSquared( vertex.point );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tv2 = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\t\t\tmaxDistance = - 1;\n\t\t\tplane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\n\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\n\n\t\t\t\t\tdistance = Math.abs( plane.distanceToPoint( vertex.point ) );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tv3 = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\n\t\t\tif ( plane.distanceToPoint( v3.point ) < 0 ) {\n\n\t\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tFace.create( v0, v1, v2 ),\n\t\t\t\t\tFace.create( v3, v1, v0 ),\n\t\t\t\t\tFace.create( v3, v2, v1 ),\n\t\t\t\t\tFace.create( v3, v0, v2 )\n\t\t\t\t);\n\n\t\t\t\t// set the twin edge\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\n\n\t\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tFace.create( v0, v2, v1 ),\n\t\t\t\t\tFace.create( v3, v0, v1 ),\n\t\t\t\t\tFace.create( v3, v1, v2 ),\n\t\t\t\t\tFace.create( v3, v2, v0 )\n\t\t\t\t);\n\n\t\t\t\t// set the twin edge\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\n\n\t\t\t\t\t// join face[ i ] with face[ i + 1 ]\n\n\t\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// the initial hull is the tetrahedron\n\n\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ] );\n\n\t\t\t}\n\n\t\t\t// initial assignment of vertices to the faces of the tetrahedron\n\n\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\n\n\t\t\t\t\tmaxDistance = this.tolerance;\n\t\t\t\t\tvar maxFace = null;\n\n\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\tdistance = this.faces[ j ].distanceToPoint( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tmaxFace = this.faces[ j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\t// Removes inactive faces\n\n\treindexFaces: function () {\n\n\t\tvar activeFaces = [];\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\tactiveFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.faces = activeFaces;\n\n\t\treturn this;\n\n\t},\n\n\t// Finds the next vertex to create faces with the current hull\n\n\tnextVertexToAdd: function () {\n\n\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n\n\t\tif ( this.assigned.isEmpty() === false ) {\n\n\t\t\tvar eyeVertex, maxDistance = 0;\n\n\t\t\t// grap the first available face and start with the first visible vertex of that face\n\n\t\t\tvar eyeFace = this.assigned.first().face;\n\t\t\tvar vertex = eyeFace.outside;\n\n\t\t\t// now calculate the farthest vertex that face can see\n\n\t\t\tdo {\n\n\t\t\t\tvar distance = eyeFace.distanceToPoint( vertex.point );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\teyeVertex = vertex;\n\n\t\t\t\t}\n\n\t\t\t\tvertex = vertex.next;\n\n\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\n\n\t\t\treturn eyeVertex;\n\n\t\t}\n\n\t},\n\n\t// Computes a chain of half edges in CCW order called the 'horizon'.\n\t// For an edge to be part of the horizon it must join a face that can see\n\t// 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\tcomputeHorizon: function ( eyePoint, crossEdge, face, horizon ) {\n\n\t\t// moves face's vertices to the 'unassigned' vertex list\n\n\t\tthis.deleteFaceVertices( face );\n\n\t\tface.mark = Deleted;\n\n\t\tvar edge;\n\n\t\tif ( crossEdge === null ) {\n\n\t\t\tedge = crossEdge = face.getEdge( 0 );\n\n\t\t} else {\n\n\t\t\t// start from the next edge since 'crossEdge' was already analyzed\n\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\n\n\t\t\tedge = crossEdge.next;\n\n\t\t}\n\n\t\tdo {\n\n\t\t\tvar twinEdge = edge.twin;\n\t\t\tvar oppositeFace = twinEdge.face;\n\n\t\t\tif ( oppositeFace.mark === Visible ) {\n\n\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\n\n\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\n\n\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\n\n\t\t\t\t\thorizon.push( edge );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tedge = edge.next;\n\n\t\t} while ( edge !== crossEdge );\n\n\t\treturn this;\n\n\t},\n\n\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\taddAdjoiningFace: function ( eyeVertex, horizonEdge ) {\n\n\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\n\n\t\tvar face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\n\n\t\tthis.faces.push( face );\n\n\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\n\n\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\n\n\n\t},\n\n\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\n\t//  horizon opposite face and the face on the left/right\n\n\taddNewFaces: function ( eyeVertex, horizon ) {\n\n\t\tthis.newFaces = [];\n\n\t\tvar firstSideEdge = null;\n\t\tvar previousSideEdge = null;\n\n\t\tfor ( var i = 0; i < horizon.length; i ++ ) {\n\n\t\t\tvar horizonEdge = horizon[ i ];\n\n\t\t\t// returns the right side edge\n\n\t\t\tvar sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\n\n\t\t\tif ( firstSideEdge === null ) {\n\n\t\t\t\tfirstSideEdge = sideEdge;\n\n\t\t\t} else {\n\n\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n\n\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\n\n\t\t\t}\n\n\t\t\tthis.newFaces.push( sideEdge.face );\n\t\t\tpreviousSideEdge = sideEdge;\n\n\t\t}\n\n\t\t// perform final join of new faces\n\n\t\tfirstSideEdge.next.setTwin( previousSideEdge );\n\n\t\treturn this;\n\n\t},\n\n\t// Adds a vertex to the hull\n\n\taddVertexToHull: function ( eyeVertex ) {\n\n\t\tvar horizon = [];\n\n\t\tthis.unassigned.clear();\n\n\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\n\n\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\n\n\t\tthis.addNewFaces( eyeVertex, horizon );\n\n\t\t// reassign 'unassigned' vertices to the new faces\n\n\t\tthis.resolveUnassignedPoints( this.newFaces );\n\n\t\treturn\tthis;\n\n\t},\n\n\tcleanup: function () {\n\n\t\tthis.assigned.clear();\n\t\tthis.unassigned.clear();\n\t\tthis.newFaces = [];\n\n\t\treturn this;\n\n\t},\n\n\tcompute: function () {\n\n\t\tvar vertex;\n\n\t\tthis.computeInitialHull();\n\n\t\t// add all available vertices gradually to the hull\n\n\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\n\n\t\t\tthis.addVertexToHull( vertex );\n\n\t\t}\n\n\t\tthis.reindexFaces();\n\n\t\tthis.cleanup();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n//\n\nfunction Face() {\n\n\tthis.normal = new THREE.Vector3();\n\tthis.midpoint = new THREE.Vector3();\n\tthis.area = 0;\n\n\tthis.constant = 0; // signed distance from face to the origin\n\tthis.outside = null; // reference to a vertex in a vertex list this face can see\n\tthis.mark = Visible;\n\tthis.edge = null;\n\n}\n\nObject.assign( Face, {\n\n\tcreate: function ( a, b, c ) {\n\n\t\tvar face = new Face();\n\n\t\tvar e0 = new HalfEdge( a, face );\n\t\tvar e1 = new HalfEdge( b, face );\n\t\tvar e2 = new HalfEdge( c, face );\n\n\t\t// join edges\n\n\t\te0.next = e2.prev = e1;\n\t\te1.next = e0.prev = e2;\n\t\te2.next = e1.prev = e0;\n\n\t\t// main half edge reference\n\n\t\tface.edge = e0;\n\n\t\treturn face.compute();\n\n\t}\n\n} );\n\nObject.assign( Face.prototype, {\n\n\tgetEdge: function ( i ) {\n\n\t\tvar edge = this.edge;\n\n\t\twhile ( i > 0 ) {\n\n\t\t\tedge = edge.next;\n\t\t\ti --;\n\n\t\t}\n\n\t\twhile ( i < 0 ) {\n\n\t\t\tedge = edge.prev;\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn edge;\n\n\t},\n\n\tcompute: function () {\n\n\t\tvar triangle;\n\n\t\treturn function compute() {\n\n\t\t\tif ( triangle === undefined ) triangle = new THREE.Triangle();\n\n\t\t\tvar a = this.edge.tail();\n\t\t\tvar b = this.edge.head();\n\t\t\tvar c = this.edge.next.head();\n\n\t\t\ttriangle.set( a.point, b.point, c.point );\n\n\t\t\ttriangle.getNormal( this.normal );\n\t\t\ttriangle.getMidpoint( this.midpoint );\n\t\t\tthis.area = triangle.getArea();\n\n\t\t\tthis.constant = this.normal.dot( this.midpoint );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) - this.constant;\n\n\t}\n\n} );\n\n// Entity for a Doubly-Connected Edge List (DCEL).\n\nfunction HalfEdge( vertex, face ) {\n\n\tthis.vertex = vertex;\n\tthis.prev = null;\n\tthis.next = null;\n\tthis.twin = null;\n\tthis.face = face;\n\n}\n\nObject.assign( HalfEdge.prototype, {\n\n\thead: function () {\n\n\t\treturn this.vertex;\n\n\t},\n\n\ttail: function () {\n\n\t\treturn this.prev ? this.prev.vertex : null;\n\n\t},\n\n\tlength: function () {\n\n\t\tvar head = this.head();\n\t\tvar tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceTo( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t},\n\n\tlengthSquared: function () {\n\n\t\tvar head = this.head();\n\t\tvar tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceToSquared( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t},\n\n\tsetTwin: function ( edge ) {\n\n\t\tthis.twin = edge;\n\t\tedge.twin = this;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// A vertex as a double linked list node.\n\nfunction VertexNode( point ) {\n\n\tthis.point = point;\n\tthis.prev = null;\n\tthis.next = null;\n\tthis.face = null; // the face that is able to see this vertex\n\n}\n\n// A double linked list that contains vertex nodes.\n\nfunction VertexList() {\n\n\tthis.head = null;\n\tthis.tail = null;\n\n}\n\nObject.assign( VertexList.prototype, {\n\n\tfirst: function () {\n\n\t\treturn this.head;\n\n\t},\n\n\tlast: function () {\n\n\t\treturn this.tail;\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.head = this.tail = null;\n\n\t\treturn this;\n\n\t},\n\n\t// Inserts a vertex before the target vertex\n\n\tinsertBefore: function ( target, vertex ) {\n\n\t\tvertex.prev = target.prev;\n\t\tvertex.next = target;\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex;\n\n\t\t}\n\n\t\ttarget.prev = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Inserts a vertex after the target vertex\n\n\tinsertAfter: function ( target, vertex ) {\n\n\t\tvertex.prev = target;\n\t\tvertex.next = target.next;\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex;\n\n\t\t}\n\n\t\ttarget.next = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Appends a vertex to the end of the linked list\n\n\tappend: function ( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\t\tvertex.next = null; // the tail has no subsequent vertex\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Appends a chain of vertices where 'vertex' is the head.\n\n\tappendChain: function ( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\n\t\t// ensure that the 'tail' reference points to the last vertex of the chain\n\n\t\twhile ( vertex.next !== null ) {\n\n\t\t\tvertex = vertex.next;\n\n\t\t}\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a vertex from the linked list\n\n\tremove: function ( vertex ) {\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex.next;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex.next;\n\n\t\t}\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex.prev;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\tremoveSubList: function ( a, b ) {\n\n\t\tif ( a.prev === null ) {\n\n\t\t\tthis.head = b.next;\n\n\t\t} else {\n\n\t\t\ta.prev.next = b.next;\n\n\t\t}\n\n\t\tif ( b.next === null ) {\n\n\t\t\tthis.tail = a.prev;\n\n\t\t} else {\n\n\t\t\tb.next.prev = a.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\treturn this.head === null;\n\n\t}\n\n} );","/**\n * @author Mugen87 / https://github.com/Mugen87\n * \n * adapted for Typescript by Gheric Speiginer\n */\n\nimport * as THREE from 'three'\nimport {QuickHull} from './QuickHull'\n\n// ConvexGeometry\nexport class ConvexGeometry extends THREE.Geometry {\n\n    constructor(public points:THREE.Vector3[]) {\n        super()\n        this.fromBufferGeometry( new ConvexBufferGeometry( points ) );\n        this.mergeVertices();\n    }\n\n}\n\n// ConvexBufferGeometry\n\nexport class ConvexBufferGeometry extends THREE.BufferGeometry { \n\n    constructor(public points:THREE.Vector3[]) {\n        super()\n\n        // buffers\n\n        var vertices = [] as number[];\n        var normals = [] as number[];\n\n        // execute QuickHull\n\n        if ( QuickHull === undefined ) {\n\n            console.error( 'THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull' );\n\n        }\n\n        var quickHull = new (QuickHull as any)().setFromPoints( points );\n\n        // generate vertices and normals\n\n        var faces = quickHull.faces;\n\n        for ( var i = 0; i < faces.length; i ++ ) {\n\n            var face = faces[ i ];\n            var edge = face.edge;\n\n            // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n            do {\n\n                var point = edge.head().point;\n\n                vertices.push( point.x, point.y, point.z );\n                normals.push( face.normal.x, face.normal.y, face.normal.z );\n\n                edge = edge.next;\n\n            } while ( edge !== face.edge );\n\n        }\n\n        // build geometry\n\n        this.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        this.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n    }\n}","/*\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n *\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nimport * as THREE from 'three'\n\nexport var SimplifyModifier = function () {};\n\n( function () {\n\n\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\tfunction pushIfUnique( array, object ) {\n\n\t\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n\t}\n\n\tfunction removeFromArray( array, object ) {\n\n\t\tvar k = array.indexOf( object );\n\t\tif ( k > - 1 ) array.splice( k, 1 );\n\n\t}\n\n\tfunction computeEdgeCollapseCost( u, v ) {\n\n\t\t// if we collapse edge uv by moving u to v then how\n\t\t// much different will the model change, i.e. the \"error\".\n\n\t\tvar edgelength = v.position.distanceTo( u.position );\n\t\tvar curvature = 0;\n\n\t\tvar sideFaces = [];\n\t\tvar i, il = u.faces.length, face, sideFace;\n\n\t\t// find the \"sides\" triangles that are on the edge uv\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tface = u.faces[ i ];\n\n\t\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\t\tsideFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use the triangle facing most away from the sides\n\t\t// to determine our curvature term\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tvar minCurvature = 1;\n\t\t\tface = u.faces[ i ];\n\n\t\t\tfor ( var j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\t\tsideFace = sideFaces[ j ];\n\t\t\t\t// use dot product of face normals.\n\t\t\t\tvar dotProd = face.normal.dot( sideFace.normal );\n\t\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t\t}\n\n\t\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t\t}\n\n\t\t// crude approach in attempt to preserve borders\n\t\t// though it seems not to be totally correct\n\t\tvar borders = 0;\n\t\tif ( sideFaces.length < 2 ) {\n\n\t\t\t// we add some arbitrary cost for borders,\n\t\t\t// borders += 10;\n\t\t\tcurvature = 1;\n\n\t\t}\n\n\t\tvar amt = edgelength * curvature + borders;\n\n\t\treturn amt;\n\n\t}\n\n\tfunction computeEdgeCostAtVertex( v ) {\n\n\t\t// compute the edge collapse cost for all edges that start\n\t\t// from vertex v.  Since we are only interested in reducing\n\t\t// the object by selecting the min cost edge at each step, we\n\t\t// only cache the cost of the least cost edge at this vertex\n\t\t// (in member variable collapse) as well as the value of the\n\t\t// cost (in member variable collapseCost).\n\n\t\tif ( v.neighbors.length === 0 ) {\n\n\t\t\t// collapse if no neighbors.\n\t\t\tv.collapseNeighbor = null;\n\t\t\tv.collapseCost = - 0.01;\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tv.collapseCost = 100000;\n\t\tv.collapseNeighbor = null;\n\n\t\t// search all neighboring edges for \"least cost\" edge\n\t\tfor ( var i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\t\tvar collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.collapseCost = collapseCost;\n\t\t\t\tv.minCost = collapseCost;\n\t\t\t\tv.totalCost = 0;\n\t\t\t\tv.costCount = 0;\n\n\t\t\t}\n\n\t\t\tv.costCount ++;\n\t\t\tv.totalCost += collapseCost;\n\n\t\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.minCost = collapseCost;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// we average the cost of collapsing at this vertex\n\t\tv.collapseCost = v.totalCost / v.costCount;\n\t\t// v.collapseCost = v.minCost;\n\n\t}\n\n\tfunction removeVertex( v, vertices ) {\n\n\t\tconsole.assert( v.faces.length === 0 );\n\n\t\twhile ( v.neighbors.length ) {\n\n\t\t\tvar n = v.neighbors.pop();\n\t\t\tremoveFromArray( n.neighbors, v );\n\n\t\t}\n\n\t\tremoveFromArray( vertices, v );\n\n\t}\n\n\tfunction removeFace( f, faces ) {\n\n\t\tremoveFromArray( faces, f );\n\n\t\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\t\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\t\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t\t// TODO optimize this!\n\t\tvar vs = [ f.v1, f.v2, f.v3 ];\n\t\tvar v1, v2;\n\n\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\tv1 = vs[ i ];\n\t\t\tv2 = vs[ ( i + 1 ) % 3 ];\n\n\t\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\t\tv1.removeIfNonNeighbor( v2 );\n\t\t\tv2.removeIfNonNeighbor( v1 );\n\n\t\t}\n\n\t}\n\n\tfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t\t// Collapse the edge uv by moving vertex u onto v\n\n\t\tif ( ! v ) {\n\n\t\t\t// u is a vertex all by itself so just delete it..\n\t\t\tremoveVertex( u, vertices );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar i;\n\t\tvar tmpVertices = [];\n\n\t\tfor ( i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t\t}\n\n\n\t\t// delete triangles on edge uv:\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tif ( u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update remaining triangles to have v instead of u\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t\t}\n\n\n\t\tremoveVertex( u, vertices );\n\n\t\t// recompute the edge collapse costs in neighborhood\n\t\tfor ( i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t\t}\n\n\t}\n\n\n\n\tfunction minimumCostEdge( vertices ) {\n\n\t\t// O(n * n) approach. TODO optimize this\n\n\t\tvar least = vertices[ 0 ];\n\n\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\t\tleast = vertices[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn least;\n\n\t}\n\n\t// we use a triangle class to represent structure of face slightly differently\n\n\tfunction Triangle( v1, v2, v3, a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t\tthis.normal = new THREE.Vector3();\n\n\t\tthis.computeNormal();\n\n\t\tv1.faces.push( this );\n\t\tv1.addUniqueNeighbor( v2 );\n\t\tv1.addUniqueNeighbor( v3 );\n\n\t\tv2.faces.push( this );\n\t\tv2.addUniqueNeighbor( v1 );\n\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\tv3.faces.push( this );\n\t\tv3.addUniqueNeighbor( v1 );\n\t\tv3.addUniqueNeighbor( v2 );\n\n\t}\n\n\tTriangle.prototype.computeNormal = function () {\n\n\t\tvar vA = this.v1.position;\n\t\tvar vB = this.v2.position;\n\t\tvar vC = this.v3.position;\n\n\t\tcb.subVectors( vC, vB );\n\t\tab.subVectors( vA, vB );\n\t\tcb.cross( ab ).normalize();\n\n\t\tthis.normal.copy( cb );\n\n\t};\n\n\tTriangle.prototype.hasVertex = function ( v ) {\n\n\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t};\n\n\tTriangle.prototype.replaceVertex = function ( oldv, newv ) {\n\n\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\tremoveFromArray( oldv.faces, this );\n\t\tnewv.faces.push( this );\n\n\n\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\tthis.computeNormal();\n\n\t};\n\n\tfunction Vertex( v, id ) {\n\n\t\tthis.position = v;\n\n\t\tthis.id = id; // old index id\n\n\t\tthis.faces = []; // faces vertex is connected\n\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t}\n\n\tVertex.prototype.addUniqueNeighbor = function ( vertex ) {\n\n\t\tpushIfUnique( this.neighbors, vertex );\n\n\t};\n\n\tVertex.prototype.removeIfNonNeighbor = function ( n ) {\n\n\t\tvar neighbors = this.neighbors;\n\t\tvar faces = this.faces;\n\n\t\tvar offset = neighbors.indexOf( n );\n\t\tif ( offset === - 1 ) return;\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t}\n\n\t\tneighbors.splice( offset, 1 );\n\n\t};\n\n\tSimplifyModifier.prototype.modify = function ( geometry, count ) {\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t}\n\n\t\tgeometry.mergeVertices();\n\n\t\tvar oldVertices = geometry.vertices; // Three Position\n\t\tvar oldFaces = geometry.faces; // Three Face\n\n\t\t// conversion\n\t\tvar vertices = [];\n\t\tvar faces = [];\n\n\t\tvar i, il;\n\n\t\t//\n\t\t// put data of original geometry in different data structures\n\t\t//\n\n\t\t// add vertices\n\n\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = new Vertex( oldVertices[ i ], i );\n\t\t\tvertices.push( vertex );\n\n\t\t}\n\n\t\t// add faces\n\n\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\tvar face = oldFaces[ i ];\n\n\t\t\tvar a = face.a;\n\t\t\tvar b = face.b;\n\t\t\tvar c = face.c;\n\n\t\t\tvar triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\tfaces.push( triangle );\n\n\t\t}\n\n\t\t// compute all edge collapse costs\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t}\n\n\t\tvar nextVertex;\n\n\t\tvar z = count;\n\n\t\twhile ( z -- ) {\n\n\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t}\n\n\t\t//\n\n\t\tvar simplifiedGeometry = new THREE.BufferGeometry();\n\t\tvar position = [];\n\t\tvar index = [];\n\n\t\t//\n\n\t\tfor ( i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tvar vertex = vertices[ i ].position;\n\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = vertices.indexOf( face.v1 );\n\t\t\tvar b = vertices.indexOf( face.v2 );\n\t\t\tvar c = vertices.indexOf( face.v3 );\n\n\t\t\tindex.push( a, b, c );\n\n\t\t}\n\n\t\t//\n\n\t\tsimplifiedGeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\tsimplifiedGeometry.setIndex( index );\n\n\t\treturn simplifiedGeometry;\n\n\t};\n\n} )();\n","import * as THREE from 'three'\nimport {vectors2, vectors, quaternions, matrices, traverse, V_000, V_001, V_010} from '../utils'\nimport {ConvexGeometry} from './ConvexGeometry'\nimport {SimplifyModifier} from './SimplifyModifier'\n\nexport class SimplifiedHull {\n    static hulls = new WeakMap<THREE.Geometry|THREE.BufferGeometry, THREE.Geometry|undefined>()\n  \n    static compute(geometry:THREE.Geometry|THREE.BufferGeometry, maxPoints = 30) {\n      const bufferGeometry = (geometry as THREE.BufferGeometry).type === 'BufferGeometry' ? \n        geometry as THREE.BufferGeometry : null\n      const normalGeometry = bufferGeometry ? \n        new THREE.Geometry().fromBufferGeometry(bufferGeometry) : geometry as THREE.Geometry\n      if (normalGeometry.vertices.length < maxPoints) {\n        this.hulls.set(geometry, normalGeometry)\n        return normalGeometry\n      }\n    \n      const modifier = new (SimplifyModifier as any)()\n      let hull = new ConvexGeometry(normalGeometry.vertices) as THREE.Geometry\n      const count = hull.vertices.length\n      if (count > maxPoints) {\n        const simplified = modifier.modify( hull, hull.vertices.length - maxPoints )\n        hull = new THREE.Geometry().fromBufferGeometry(simplified)\n      }\n      this.hulls.set(geometry, hull)\n      return hull\n    } \n    \n    static get(geometry:THREE.Geometry|THREE.BufferGeometry) {\n        return this.hulls.get(geometry) || geometry\n    }\n}\n\nexport class Box3 extends THREE.Box3 {\n    objectFilter? = SpatialMetrics.objectFilter\n    objectExpansion = 'box' as 'geometry'|'hull'|'box'\n    coordinateSystem = undefined as THREE.Object3D|undefined\n\n    private _objectExpandFunction:(o:THREE.Object3D)=>void\n\n    private _onObjectTraverse( node: THREE.Object3D, ) {\n        if (this.objectFilter && !this.objectFilter(node)) return false\n        this._objectExpandFunction.call(this, node)\n        return true\n    }\n\n    setFromObject( object:THREE.Object3D ) {\n\n        this.makeEmpty()\n\n        switch (this.objectExpansion) {\n            case 'geometry': this._objectExpandFunction = this.expandByObjectGeometry; break;\n            case 'hull': this._objectExpandFunction = this.expandByObjectHull; break;\n            case 'box':   \n            default: this._objectExpandFunction = this.expandByObjectBox; break;\n        }\n\n        this._objectExpandFunction.call(this, object)\n        for (const c of object.children) {\n            traverse(c, this._onObjectTraverse, this)\n        }\n\n        return this\n    }\n\n    private _vector = new THREE.Vector3\n    private _mat4 = new THREE.Matrix4\n\n    expandByObjectGeometry ( node: THREE.Object3D ) {\n        let i, l\n        const vector = this._vector\n        const mesh = node as THREE.Mesh\n\t\tnode.updateWorldMatrix( false, false )\n\t\tvar geometry = mesh.geometry as THREE.Geometry&THREE.BufferGeometry\n\t\tif ( geometry !== undefined ) {\n            const mat = this._getCoordinateSystemTransform(node)\n\t\t\tif ( geometry.isGeometry ) {\n\t\t\t\tvar vertices = geometry.vertices\n\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\t\t\t\t\tvector.copy( vertices[ i ] )\n\t\t\t\t\tvector.applyMatrix4( mat )\n\t\t\t\t\tthis.expandByPoint( vector )\n\t\t\t\t}\n\t\t\t} else if ( geometry.isBufferGeometry ) {\n\t\t\t\tvar attribute = geometry.attributes.position\n\t\t\t\tif ( attribute !== undefined ) {\n\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\t\t\t\t\t\tvector.fromBufferAttribute( attribute as any, i ).applyMatrix4( mat )\n\t\t\t\t\t\tthis.expandByPoint( vector )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this\n    }\n\n    expandByObjectHull( node: THREE.Object3D ) {\n        const mesh = node as THREE.Mesh\n        const vector = this._vector\n        let geometry = mesh.geometry\n        if (!geometry) return this\n        const mat = this._getCoordinateSystemTransform(node) \n        geometry = SimplifiedHull.get(geometry)\n        if (geometry && 'vertices' in geometry) {\n            const vertices = geometry.vertices    \n            for (let i = 0; i < vertices.length; ++i) {\n                const v = vertices[i]\n                vector.copy( v ).applyMatrix4( mat )\n                this.expandByPoint( vector )\n            }\n        } else {\n            const vertices = geometry.getAttribute('position')  \n            for (let i = 0; i < vertices.count; i+=vertices.itemSize) {\n                vector.set( vertices.getX(i), vertices.getY(i), vertices.getZ(i) ).applyMatrix4( mat )\n                this.expandByPoint( vector )\n            }\n        }\n        return this\n    }\n\n    private _box = new THREE.Box3\n\n    expandByObjectBox ( node:THREE.Object3D ) {\n        const box = this._box\n        const mesh = node as THREE.Mesh\n        const geometry = mesh.geometry\n        if (!geometry) return this\n        if ( geometry.boundingBox === null ) {\n            geometry.computeBoundingBox()\n        }\n        box.copy( geometry.boundingBox )\n        box.applyMatrix4( this._getCoordinateSystemTransform(node) )\n        this.union( box )\n        return this\n    }\n\n    private _getCoordinateSystemTransform(node: THREE.Object3D) {\n        const mat4 = this._mat4\n        if (this.coordinateSystem) {\n            mat4.getInverse(this.coordinateSystem.transitioner.matrixWorldTarget).multiply( node.transitioner.matrixWorldTarget )\n        } else {\n            mat4.copy( node.transitioner.matrixWorldTarget )\n        }\n        return mat4\n    }\n\n    private _center = new THREE.Vector3\n    private _size = new THREE.Vector3\n\n    relativeToAbsolute(relativePosition:THREE.Vector3, out = relativePosition) {\n        if (!this.isEmpty()) {\n            const center = this._center\n            const size = this._size\n            this.getCenter(center)\n            this.getSize(size)\n            out.copy(relativePosition).multiply(size).add(center)\n        } else {\n            out.copy(relativePosition).multiplyScalar(0)\n        }\n        // if (!isFinite(out.x)) out.x = 0\n        // if (!isFinite(out.y)) out.y = 0\n        // if (!isFinite(out.z)) out.z = 0\n        return out\n    }\n\n    absoluteToRelative(absolutePosition:THREE.Vector3, out = absolutePosition) {\n        if (!this.isEmpty()) {  \n            const center = this._center\n            const size = this._size\n            this.getCenter(center)\n            this.getSize(size)\n            out.copy(absolutePosition).sub(center).divide(size)\n        } else {\n            out.copy(absolutePosition).multiplyScalar(0)\n        }\n        // if (!isFinite(out.x)) out.x = 0\n        // if (!isFinite(out.y)) out.y = 0\n        // if (!isFinite(out.z)) out.z = 0\n        return out\n    }\n\n    isEmpty() {\n        return !isFinite(this.min.x) && !isFinite(this.min.y) && !isFinite(this.min.z) &&\n        !isFinite(this.max.x) && !isFinite(this.max.y) && !isFinite(this.max.z)\n    }\n}\n\nconst rotateY180 = new THREE.Quaternion().setFromAxisAngle(V_010, Math.PI)\n\n/**\n * A visual viewing frustum, with angles specified in DEGREES\n */\nexport class VisualFrustum {\n    \n    objectFilter? = SpatialMetrics.objectFilter\n    objectExpansion = 'box' as 'geometry'|'hull'|'box'\n    private _objectExpandFunction:(o:THREE.Object3D)=>void\n\n    min = new THREE.Vector3(Infinity,Infinity,Infinity)\n    max = new THREE.Vector3(-Infinity,-Infinity,-Infinity)\n    minClamped = new THREE.Vector3\n    maxClamped = new THREE.Vector3\n\n    minClamp?:THREE.Vector3\n    maxClamp?:THREE.Vector3\n\n    constructor(public coordinateSystem: THREE.Object3D) {}\n\n    get left() {\n        if (this.isEmpty()) return 0\n        return this.min.x\n    }\n\n    get leftClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.x\n    } \n\n    get top() {\n        if (this.isEmpty()) return 0\n        return this.max.y\n    }\n\n    get topClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.y\n    }\n\n    get right() {\n        if (this.isEmpty()) return 0\n        return this.max.x   \n    }\n\n    get rightClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.x   \n    }\n\n    get bottom() {\n        if (this.isEmpty()) return 0\n        return this.min.y\n    }\n\n    get bottomClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.y \n    }\n\n    get near() {\n        if (this.isEmpty()) return 0\n        return this.min.z\n    }\n\n    get nearClamped() {\n        if (this.isEmpty()) return 0\n        return this.minClamped.z\n    }\n\n    get far() {\n        if (this.isEmpty()) return 0\n        return this.max.z\n    }\n\n    get farClamped() {\n        if (this.isEmpty()) return 0\n        return this.maxClamped.z\n    }\n\n    get horizontal() {\n        if (this.isEmpty()) return 0\n        return this.right - this.left\n    }\n\n    get horizontalClamped() {\n        if (this.isEmpty()) return 0\n        return this.rightClamped - this.leftClamped\n    }\n\n    get vertical() {\n        if (this.isEmpty()) return 0\n        return this.top - this.bottom\n    }\n\n    get verticalClamped() {\n        if (this.isEmpty()) return 0\n        return this.topClamped - this.bottomClamped\n    }\n\n    get depth() {\n        if (this.isEmpty()) return 0\n        return this.far - this.near\n    }\n\n    get depthClamped() {\n        if (this.isEmpty()) return 0\n        return this.farClamped - this.nearClamped\n    }\n\n    get diagonal() {\n        if (this.isEmpty()) return 0\n        const minDirection = SpatialMetrics.getCartesianForSphericalDirection(this.min, vectors.get())\n        const maxDirection = SpatialMetrics.getCartesianForSphericalDirection(this.max, vectors.get())\n        const diagonal = minDirection.angleTo(maxDirection)\n        vectors.pool(minDirection)\n        vectors.pool(maxDirection)\n        return diagonal * THREE.Math.RAD2DEG\n    }\n\n    get diagonalClamped() {\n        if (this.isEmpty()) return 0\n        const minDirection = SpatialMetrics.getCartesianForSphericalDirection(this.minClamped, vectors.get())\n        const maxDirection = SpatialMetrics.getCartesianForSphericalDirection(this.maxClamped, vectors.get())\n        const diagonal = minDirection.angleTo(maxDirection)\n        vectors.pool(minDirection)\n        vectors.pool(maxDirection)\n        return diagonal * THREE.Math.RAD2DEG\n    }\n\n\tisEmpty(){\n\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z\n\t}\n\n    getCenter(out:THREE.Vector3) {\n        return out.set( \n            this.right - this.horizontal / 2, \n            this.top - this.vertical / 2,\n            this.far - this.depth / 2,\n        )\n    }\n\n    getClampedCenter(out:THREE.Vector3) {\n        return out.set( \n            this.rightClamped - this.horizontalClamped / 2, \n            this.topClamped - this.verticalClamped / 2,\n            this.farClamped - this.depthClamped / 2,\n        )\n    }\n\n    getSize(out:THREE.Vector3) {\n        return out.set(\n            this.horizontal, \n            this.vertical, \n            this.depth\n        )\n    }\n\n    getClampedSize(out:THREE.Vector3) {\n        return out.set(\n            this.horizontalClamped, \n            this.verticalClamped, \n            this.depthClamped\n        )\n    }\n\n    getPositionForOffset(offset:THREE.Vector3, out:THREE.Vector3) {\n        const center = this.getCenter(vectors.get())\n        const size = this.getSize(vectors.get())\n        out.copy(offset).multiplyScalar(0.5).multiply(size).add(center)\n        vectors.pool(center)\n        vectors.pool(size)\n        return out\n    }\n\n    getClampedPositionForOffset(offset:THREE.Vector3, out:THREE.Vector3) {\n        const center = this.getClampedCenter(vectors.get())\n        const size = this.getClampedSize(vectors.get())\n        out.copy(offset).multiplyScalar(0.5).multiply(size).add(center)\n        vectors.pool(center) \n        vectors.pool(size)\n        return out\n    }\n    \n    setFromPerspectiveProjectionMatrix(projectionMatrix:THREE.Matrix4) {\n        const inverseProjection = matrices.get().getInverse(projectionMatrix)\n        const vec = vectors.get()\n        this.min.x = -vec.set(-1,0,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.max.x = vec.set(1,0,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.min.y = -vec.set(0,-1,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.max.y = vec.set(0,1,-1).applyMatrix4(inverseProjection).angleTo(V_001) * THREE.Math.RAD2DEG\n        this.min.z = -vec.set(0,0,-1).applyMatrix4(inverseProjection).z\n        this.max.z = -vec.set(0,0,1).applyMatrix4(inverseProjection).z\n        matrices.pool(inverseProjection)\n        vectors.pool(vec)\n        this._applyClamping()\n    }\n\n    makeEmpty() {\n        this.min.set(Infinity,Infinity,Infinity)\n        this.max.set(-Infinity,-Infinity,-Infinity)\n    }\n\n    setFromObject( object:THREE.Object3D ) {\n\n        this.makeEmpty()\n\n        switch (this.objectExpansion) {\n            case 'geometry': //this._objectExpandFunction = this.expandByObjectGeometry; break;\n            case 'hull': this._objectExpandFunction = this.expandByObjectHull; break;\n            case 'box':   \n            default: this._objectExpandFunction = this.expandByObjectBox; break;\n        }\n\n        this._objectExpandFunction.call(this, object)\n        for (const c of object.children) {\n            traverse(c, this._onObjectTraverse, this)\n        }\n\n        return this\n    }\n    \n    private _onObjectTraverse( node: THREE.Object3D, ) {\n        if (this.objectFilter && !this.objectFilter(node)) return false\n        this._objectExpandFunction.call(this, node)\n        return true\n    }\n\n    private _vec3 = new THREE.Vector3\n    private _mat4 = new THREE.Matrix4\n\n    private expandByObjectHull(object:THREE.Object3D) {\n        const m = object as THREE.Mesh\n        if (!m.isMesh) return\n\n        const coordinateSystem = this.coordinateSystem\n        const vertexPosition = this._vec3\n        const localToReferenceFrame = this._mat4.getInverse(coordinateSystem.matrixWorld).multiply(m.matrixWorld)\n        const hull = SimplifiedHull.get(m.geometry)!\n        const metrics = SpatialMetrics.get(coordinateSystem)\n\n        if ('vertices' in hull) {\n            for (const vertex of hull.vertices) {\n                vertexPosition.copy(vertex).applyMatrix4(localToReferenceFrame)\n                const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(vertexPosition, vertexPosition)\n                this.min.min(vertexVisualPosition)\n                this.max.max(vertexVisualPosition)\n            }\n        } else {\n            const vertices = hull.getAttribute('position')\n            for (let i = 0; i < vertices.count; i += vertices.itemSize) {\n                vertexPosition.set(vertices.getX(i), vertices.getY(i), vertices.getZ(i)).applyMatrix4(localToReferenceFrame)\n                const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(vertexPosition, vertexPosition)\n                this.min.min(vertexVisualPosition)\n                this.max.max(vertexVisualPosition)\n            }\n        }\n\n        this._applyClamping()\n    }\n\n    private _boxPoints = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ] as THREE.Vector3[]\n\n    expandByObjectBox ( node:THREE.Object3D ) {\n        const mat4 = this._mat4\n        const mesh = node as THREE.Mesh\n        const geometry = mesh.geometry\n        if (!geometry) return this\n\n        if ( geometry.boundingBox === null ) {\n            geometry.computeBoundingBox()\n        }\n    \n        const box = geometry.boundingBox\n        const points = this._boxPoints\n\t\tpoints[ 0 ].set( box.min.x, box.min.y, box.min.z ) // 000\n\t\tpoints[ 1 ].set( box.min.x, box.min.y, box.max.z ) // 001\n\t\tpoints[ 2 ].set( box.min.x, box.max.y, box.min.z ) // 010\n\t\tpoints[ 3 ].set( box.min.x, box.max.y, box.max.z ) // 011\n\t\tpoints[ 4 ].set( box.max.x, box.min.y, box.min.z ) // 100\n\t\tpoints[ 5 ].set( box.max.x, box.min.y, box.max.z ) // 101\n\t\tpoints[ 6 ].set( box.max.x, box.max.y, box.min.z ) // 110\n        points[ 7 ].set( box.max.x, box.max.y, box.max.z ) // 111\n\n        const coordinateSystem = this.coordinateSystem\n        const metrics = SpatialMetrics.get(coordinateSystem)\n        const localToReferenceFrame = mat4.getInverse(coordinateSystem.matrixWorld).multiply(mesh.matrixWorld)\n\n        for (const p of points) {\n            p.applyMatrix4(localToReferenceFrame)\n            const vertexVisualPosition = metrics.getVisualPositionForCartesianPosition(p, p)\n            this.min.min(vertexVisualPosition)\n            this.max.max(vertexVisualPosition)\n        }\n        \n        this._applyClamping()\n    }\n\n    private _applyClamping() {\n        this.minClamped.copy(this.min)\n        this.maxClamped.copy(this.max)\n        if (this.minClamp) this.minClamped.min(this.minClamp)\n        if (this.maxClamp) this.maxClamped.max(this.maxClamp)\n    }\n\n}\n\n/**\n * Calculate spatial metrics between a primary object and a target object.\n *\n * The results are always in one of two *local* coordinate systems:\n * `object-space` -\n *      Local *cartesian* coordinate system [X,Y,Z]. By convention, this local coordinate system is\n *      interpreted in two different ways, depending on whether or not the object is a camera:\n *          Typical objects: [+X = left, +Y = up, +Z = forward]\n *          Camera objects: [+X = right, +Y = up, -Z = forward]\n * `visual-space` -\n *      Local *spherical* coordinate system [azimuth, elevation, distance], where:\n *          `azimuth` (-180 to 180 DEGREES) an angle around the horizontal plane\n *              (increasing from left to right, with 0deg being aligned with this object's natural `forward` vector)\n *          `elevation` (-90 to 90 DEGREES ) an angle above or below the horizontal plane\n *              (increases from below to above, with 0deg at the horizon)\n *          `distance` is distance along the direction defined by the azimuth and elevation\n *      Unlike object-space, visual-space is consistent for camera and non-camera objects.\n */\nexport class SpatialMetrics {\n\n    public matrixWorldGetter = 'target' as 'current' | 'target'\n\n    private static _metrics = new WeakMap<THREE.Object3D, SpatialMetrics>()\n\n    public static objectFilter = (o:THREE.Object3D) => !o.layout.isBoundingContext()\n\n    static get(o:THREE.Object3D) {\n        if (this._metrics.has(o)) return this._metrics.get(o)!\n        this._metrics.set(o, new SpatialMetrics(o))\n        return this._metrics.get(o)!\n    }\n\n    static getCartesianForSphericalDirection(sphericalDirection: THREE.Vector2|THREE.Vector3, out: THREE.Vector3) { \n        const visualElevationRadians = THREE.Math.DEG2RAD * sphericalDirection.y\n        const visualAzimuthRadians = THREE.Math.DEG2RAD * sphericalDirection.x\n        const y = Math.sin(visualElevationRadians)\n        const x = Math.cos(visualElevationRadians) * Math.sin(visualAzimuthRadians)\n        const z = - Math.cos(visualElevationRadians) * Math.cos(visualAzimuthRadians)\n        out.set(x, y, z).normalize()\n        return out\n    }\n\n    static getSphericalDirectionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector2) {\n        const direction = vectors.get().copy(cartesian).normalize()\n        out.y = Math.asin(direction.y) * THREE.Math.RAD2DEG\n        out.x = Math.atan2(direction.x, -direction.z) * THREE.Math.RAD2DEG\n        vectors.pool(direction)\n        return out\n    }\n\n    static getSphericalPositionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector3) {\n        const distance = cartesian.length()\n        const direction = out.copy(cartesian).normalize()\n        out.y = Math.asin(direction.y) * THREE.Math.RAD2DEG\n        out.x = Math.atan2(direction.x, -direction.z) * THREE.Math.RAD2DEG\n        out.z = distance\n        return out\n    }\n\n    static getCartesianForSphericalPosition(sphericalPosition:THREE.Vector3, out: THREE.Vector3) {\n        const distance = sphericalPosition.z\n        const visualDirection = vectors2.get().set(sphericalPosition.x, sphericalPosition.y)\n        SpatialMetrics.getCartesianForSphericalDirection(visualDirection, out).multiplyScalar(distance)\n        vectors2.pool(visualDirection)\n        return out\n    }\n\n    private constructor(public object: THREE.Object3D) {}\n\n    private getMatrixWorld(o:THREE.Object3D) {\n        return this.matrixWorldGetter === 'current' ? \n            o.matrixWorld : o.transitioner.matrixWorldTarget\n    }\n\n    getCartesianForVisualDirection(visualDirection: THREE.Vector2, out: THREE.Vector3) {\n        SpatialMetrics.getCartesianForSphericalDirection(visualDirection, out)\n        if (!(this.object as THREE.Camera).isCamera) { out.applyQuaternion(rotateY180) }\n        return out\n    }\n\n    getVisualDirectionForCartesian(cartesian: THREE.Vector3, out: THREE.Vector2) {\n        const cartesianPosition = vectors.get().copy(cartesian)\n        if (!(this.object as THREE.Camera).isCamera) { cartesianPosition.applyQuaternion(rotateY180) }\n        SpatialMetrics.getSphericalDirectionForCartesian(cartesianPosition, out)\n        vectors.pool(cartesianPosition)\n        return out\n    }\n\n    getVisualPositionForCartesianPosition(cartesianPosition: THREE.Vector3, out: THREE.Vector3) {\n        const position = out.copy(cartesianPosition)\n        if (!(this.object as THREE.Camera).isCamera) { position.applyQuaternion(rotateY180) }\n        SpatialMetrics.getSphericalPositionForCartesian(position, out)\n        return out\n    }\n\n    getCartesianForVisualPosition(visualPosition:THREE.Vector3, out: THREE.Vector3) {\n        const distance = visualPosition.z\n        const visualDirection = vectors2.get().set(visualPosition.x, visualPosition.y)\n        this.getCartesianForVisualDirection(visualDirection, out).multiplyScalar(distance)\n        vectors2.pool(visualDirection)\n        return out\n    }\n\n    /**\n     * Calculate the local position of target in `object space`\n     */\n    getPositionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        out.setFromMatrixPosition(this.getMatrixWorld(target))  \n        const invMatrixWorld = matrices.get().getInverse(this.getMatrixWorld(this.object))\n        out.applyMatrix4(invMatrixWorld)\n        matrices.pool(invMatrixWorld)\n        return out\n    }\n\n    /**\n     * Calculate the local distance of the target object\n     * (Note: this is the same for both `object-space` and `visual-space`)\n     */\n    getDistanceOf(target: THREE.Object3D) {\n        const vec = vectors.get()\n        const result = this.getPositionOf(target, vec).length()\n        vectors.pool(vec)\n        return result\n    }\n\n    /**\n     * Calculate the local direction of the target object in `object-space`\n     *\n     * Remember, by convention:\n     *     Normal objects: [+X = left, +Y = up, +Z = forward]\n     *     Camera objects: [+X = right, +Y = up, -Z = forward]\n     * Special Case: if both objects are at the same *exact* position,\n     *      the result is a `forward` vector ([0,0,-1] for cameras, [0,0,1] for other objects)\n     */\n    getDirectionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        const position = this.getPositionOf(target, out)\n        const distance = position.lengthSq()\n        if (distance === 0 || !isFinite(distance)) { // if distance is 0\n            if ((this.object as THREE.Camera).isCamera) { return out.set(0, 0, -1) }\n            return out.set(0, 0, 1)\n        }\n        return position.normalize()\n    }\n\n    /**\n     * Get the world direction of the target object.\n     *\n     * Special Case: if both objects are at the same *exact* position,\n     *      the result is a `forward` vector ([0,0,-1] for cameras, [0,0,1] for other objects),\n     *      transformed into world coordinates\n     */\n    getWorldDirectionOf(target: THREE.Object3D, out: THREE.Vector3) {\n        return this.getDirectionOf(target, out).transformDirection(this.getMatrixWorld(this.object))\n    }\n\n    getClosestOrthogonalOrientationOf(target: THREE.Object3D, out: THREE.Quaternion) {\n        const o = this.object\n        const viewToObjectMat = (o ? matrices.get().getInverse(this.getMatrixWorld(o)) : matrices.get())\n                .multiply(this.getMatrixWorld(target))\n        const mat = viewToObjectMat.extractRotation(viewToObjectMat)\n        const orientation = out.setFromRotationMatrix(mat)\n\n        const forwardDirection = vectors.get().set(0,0,1).applyQuaternion(orientation)\n        const upDirection = vectors.get().set(0,1,0).applyQuaternion(orientation)\n\n        let distForward = Infinity\n        let distUp = Infinity\n        let closestForwardDirection!:THREE.Vector3\n        let closestUpDirection!:THREE.Vector3\n\n        for (const dir of directions) {\n            let dist = upDirection.distanceToSquared(dir)\n            if (dist < distUp) {\n                distUp = dist\n                closestUpDirection = dir\n            }\n        }\n\n        for (const dir of directions) {\n            // avoid having forward & up defined on the same axis\n            if (dir.x && closestUpDirection.x) continue\n            if (dir.y && closestUpDirection.y) continue\n            if (dir.z && closestUpDirection.z) continue\n            let dist = forwardDirection.distanceToSquared(dir)\n            if (dist < distForward) {\n                distForward = dist\n                closestForwardDirection = dir\n            }\n        }\n\n        mat.identity()\n        mat.lookAt(closestForwardDirection, V_000, closestUpDirection)\n        orientation.setFromRotationMatrix(mat)\n        matrices.pool(mat)\n        o.updateMatrixWorld()\n    }\n\n    /**\n     * Set a position for the *target object*,\n     * based on the visual-space of *this object*.\n     *\n     * If the object has no bounding sphere, or if a visualSize is not specified,\n     * then the current distance will be assumed.\n     *\n     * @param target\n     * @param visualDirection the desired visual direction to the target\n     * @param visualSize the desired visual size of the target (in DEGREES)\n     * @param alpha a linear interpolation value (default is 1)\n     */\n    // setPositionFor( target: THREE.Object3D,\n    //                 visualDirection: THREE.Vector2,\n    //                 visualSize?: number,\n    //                 alpha = 1) {\n    //     let distance: number\n    //     if (typeof visualSize === 'number' && visualSize > 0) {\n    //         distance = this.computeDistanceFor(target, visualSize)\n    //     } else {\n    //         distance = this.getDistanceOf(target)\n    //     }\n    //     const start = vectors.get().copy(target.position)\n    //     const end = target.position\n    //     this.getCartesianForVisualDirection(visualDirection, end)\n    //     end.transformDirection(this.object.matrixWorld).multiplyScalar(distance)\n    //     target.parent && target.parent.worldToLocal(end)\n    //     target.position.copy(start.lerp(end, alpha))\n    //     vectors.pool(start)\n    // }\n\n    /**\n     * Set a new scale for the target that\n     * would make it have the desired visual size\n     * in this object's `visual-space`.\n     *\n     * @param target\n     * @param visualSize the desired visual size of the target (in DEGREES)\n     * @param alpha a linear interpolation value (default is 1)\n     */\n    // setScaleFor(target: THREE.Object3D, visualSize: number, alpha = 1) {\n    //     const idealDistance = this.computeDistanceFor(target, visualSize)\n    //     const currentDistance = this.getDistanceOf(target)\n    //     const distanceScale = idealDistance / currentDistance\n    //     const start = vectors.get().copy(target.scale)\n    //     const end = target.scale\n    //     if (isFinite(distanceScale)) { end.multiplyScalar(distanceScale) }\n    //     target.scale.copy(start.lerp(end, alpha))\n    //     vectors.pool(start)\n    // }\n\n    // /**\n    //  * Perform a look-at operation on the target object, based\n    //  * on this object's local up direction.\n    //  * @param target\n    //  */\n    // setOrientationFor(target: THREE.Object3D, alpha = 1) {\n    //     const localObjectUp = vectors.get().set(0, 1, 0)\n    //     const savedTargetUp = vectors.get().copy(target.up)\n    //     const globalObjectUp = localObjectUp.transformDirection(this.object.matrixWorld)\n    //     target.up.copy(globalObjectUp)\n    //     const start = quaternions.get().copy(target.quaternion)\n    //     const lookAtVector = vectors.get().setFromMatrixPosition(this.object.matrixWorld)\n    //     target.lookAt(lookAtVector)\n    //     target.up.copy(savedTargetUp)\n    //     const end = target.quaternion\n    //     target.quaternion.copy(start.slerp(end, alpha))\n    //     vectors.pool(localObjectUp, savedTargetUp, lookAtVector)\n    //     quaternions.pool(start)\n    // }\n\n\n    // computeDistanceFor(target: THREE.Object3D, visualSize: number): number {\n    //     if (visualSize < 0 || visualSize > 360) { throw new Error('Invalid visualSize, must be between [0-360]') }\n    //     const targetMatrixWorldInverse = matrices.get().getInverse(this.getMatrixWorld(target))\n    //     const frustum = this.getVisualFrustumOf(target)\n    //     return 0\n    //     // if (sphereRadius === 0) { return this.getDistanceOf(target) }\n\n    //     // if (visualSize > 180) {\n    //     //     // special case: linearly decrease distance with increasing visual size within the bounding sphere.\n    //     //     return (360 - visualSize / 180) * sphereRadius\n    //     // }\n\n    //     // // see https://stackoverflow.com/questions/21648630/radius-of-projected-sphere-in-screen-space\n    //     // return sphereRadius / Math.sin( THREE.Math.DEG2RAD * visualSize / 2 )\n    // }\n\n    getOrientationOf(target: THREE.Object3D, out: THREE.Quaternion) {\n        const rotMat = matrices.get()\n        const targetWorldOrientation = quaternions.get().setFromRotationMatrix(rotMat.extractRotation(this.getMatrixWorld(target)))\n        const inverseThisWorldOrientation = quaternions.get().setFromRotationMatrix(rotMat.extractRotation(this.getMatrixWorld(this.object))).inverse()\n        out.multiplyQuaternions(inverseThisWorldOrientation, targetWorldOrientation)\n        quaternions.pool(targetWorldOrientation) \n        quaternions.pool(inverseThisWorldOrientation)\n        matrices.pool(rotMat)\n        return out\n    } \n\n    /**\n     * Calculate the visual direction towards the target object.\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If pointing directly towards the target object, the direction is [0,0] (forward)\n     * If pointing directly opposite of the target object, the direction is [0,-180] (backwards)\n     * Special Case: if both are at the same exact position, the direction is [0,0] (forward)\n     */\n    getVisualDirectionOf(target: THREE.Object3D, out: THREE.Vector2) {\n        const direction = this.getDirectionOf(target, vectors.get())\n        const visualDirection = this.getVisualDirectionForCartesian(direction, out)\n        vectors.pool(direction)\n        return visualDirection\n    }\n\n\n    /**\n     * Calculate the visual angle towards the target object.\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If the target object is to the right of the forward vector, the angle is 0\n     * If the target object is above the forward vector, the angle is 90\n     * If the target object is to the left of the forward vector, then angle is 180\n     * If the target object is below the forward vector, the angle is 270\n     * If pointing directly towards the target object, the angle is 90 (up)\n     * If pointing directly opposite of the target object, the direction is [0,-180] (backwards)\n     * Special Case: if both are at the same exact position, the direction is [0,0] (forward)\n     */\n    getVisualAngleOf(target: THREE.Object3D, out: THREE.Vector2) {\n        const direction = this.getDirectionOf(target, vectors.get())\n        const visualDirection = this.getVisualDirectionForCartesian(direction, out)\n        vectors.pool(direction)\n        return visualDirection\n    }\n\n    /**\n     * Calculate the bounds of the target object, in the local `object-space` coordinate system. \n     * @param target \n     * @param out \n     */\n    getBoundsOf(target: THREE.Object3D, out = this._box) {\n        if (out === this._box) {\n            out.objectFilter = SpatialMetrics.objectFilter\n            out.objectExpansion = 'box'\n        }\n        out.coordinateSystem = this.object\n        return out.setFromObject(target)\n    }\n    private _box = new Box3\n\n\n    private _visualFrustum = new VisualFrustum(this.object)\n    getVisualFrustumOf(target: THREE.Object3D = this.object, out = this._visualFrustum) {\n        if (out === this._visualFrustum) out.objectFilter = SpatialMetrics.objectFilter\n        const camera = target as THREE.Camera\n        if (camera.isCamera) out.setFromPerspectiveProjectionMatrix(camera.projectionMatrix)\n        else out.setFromObject(target)\n        return out\n    }\n\n    // /**\n    //  * Calculate the visual bounds of the target object, in the local `visual-space` coordinate system\n    //  * @param target \n    //  * @param out \n    //  */\n    // getVisualBoundsOf(target: THREE.Object3D, out: VisualBounds) {\n    //     const direction = this.getDirectionOf(target, vectors.get())\n    //     const visualDirection = this.getVisualDirectionOf(target, vectors2.get())\n    //     const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //     const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //     const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //     _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //     this.getVisualPointFromCartesianPoint(_box.min, out.leftBottomNear)\n    //     this.getVisualPointFromCartesianPoint(_box.max, out.rightTopFar)\n        \n    //     matrices.pool(objectMatrixWorldInverse)\n    // }\n\n    /**\n     * Calculate the angular offset (in DEGREES) between this object's forward vector,\n     * and the direction towards the target object (as calculated by getDirectionOf).\n     * Assumes that a normal object faces +Z, and a camera faces -Z.\n     *\n     * If pointing directly towards the target object, the visual offset is 0\n     * If pointing directly opposite of the target object, the visual offset is 180\n     * Special Case: if both are at the same position, the visual offset is 180\n     */\n    getVisualOffsetOf(target: THREE.Object3D): number {\n        const direction = this.getDirectionOf(target, vectors.get())\n        if (!(this.object as THREE.Camera).isCamera) { direction.applyQuaternion(rotateY180) }\n        const result = V_001.angleTo(direction) * THREE.Math.RAD2DEG\n        vectors.pool(direction)\n        return result\n    }\n\n    /**\n     * Calculate the field of view of the target object as seen by this object.\n     *\n     * The `visual size` grows from 0 to 180 as the visual bouding box of the target grows in our\n     * field of view.\n     * Once we are inside the bounding box, the `visual size` continues to\n     * increase linearly, from 180 to 360 at the center of the bounding box.\n     * If the target object has no bounding sphere defined, the result is 0.\n     *\n     * @returns visual size of the target object in DEGREES, from [0-360], in horizontal and vertical dimensions\n     */\n    // getVisualSizeOf(target: THREE.Object3D, out:THREE.Vector2) {\n    //     const direction = this.getDirectionOf(target, vectors.get())\n    //     const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //     const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //     const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //     const facingBox = _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //     const facingBoxSize = facingBox.getSize(vectors.get())\n    //     // const linearSize = mode === 'horizontal' ? facingBoxSize.x : facingBoxSize.y\n    //     // const distance = this.getDistanceOf(target)\n    //     const near = \n    //     out.x = 2 * Math.atan2(facingBoxSize.x / 2, distance) * THREE.Math.RAD2DEG\n    //     out.y = 2 * Math.atan2(facingBoxSize.y / 2, distance) * THREE.Math.RAD2DEG\n    //     vectors.pool(direction, facingBoxSize)\n    //     matrices.pool(rotation, rotatedMatrixWorld)\n    //     return out\n\n    //     // const objectMatrixWorldInverse = matrices.get().getInverse(this.object.matrixWorld)\n    //     // _box.setFromObjectBoxes(target, objectMatrixWorldInverse)\n    //     // matrices.pool(objectMatrixWorldInverse)\n    //     // const sphere = _box.getBoundingSphere(_sphere)\n    //     // const sphereRadius = sphere.radius\n    //     // if (sphereRadius <= 0) { return 0 }\n    //     // const sphereDistance = this.getDistanceOf(target)\n    //     // if (sphereDistance <= sphereRadius) {\n    //     //     return 180 + (180 * sphereDistance / sphereRadius)\n    //     // } // we are inside the bounding sphere\n    //     // // see https://stackoverflow.com/questions/21648630/radius-of-projected-sphere-in-screen-space\n    //     // return 2 * Math.asin(sphereRadius / sphereDistance) * 180 / Math.PI\n    // }\n\n    // getVisualWidthOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const width = size.x\n    //     vectors2.pool(size)\n    //     return width\n    // }\n\n    // getVisualHeightOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const height = size.y\n    //     vectors2.pool(size)\n    //     return height\n    // }\n\n    // getVisualDiameterOf(target: THREE.Object3D) {\n    //     const size = this.getVisualSizeOf(target, vectors2.get())\n    //     const length = size.length()\n    //     vectors2.pool(size)\n    //     return length\n    // }\n\n    /**\n     * Calculate the perspective visual frustum which bounds the the target object.\n     * If no target is specified and the current object is a camera, returns \n     * a perspective visual frustum for the camera (assuming it is a perspective camera)\n     */\n    // getVisualFrustum(target:THREE.Object3D=this.object): VisualFrustum {\n    //     if (!this._visualFrustum) { this._visualFrustum =  new VisualFrustum }\n    //     const out = this._visualFrustum\n    //     const camera = this.object as THREE.Camera\n    //     if (camera.isCamera) { \n    //         const invProjection = matrices.get().getInverse(camera.projectionMatrix, true)\n    //         out.setFromBoundsMatrix(invProjection)\n    //         matrices.pool(invProjection)\n    //     } else {\n    //         const direction = this.getDirectionOf(target, vectors.get())\n    //         const rotation = matrices.get().lookAt(V_000, direction, V_010)\n    //         const rotatedMatrixWorld = matrices.get().multiplyMatrices(rotation, this.object.matrixWorld)\n    //         const rotatedMatrixWorldInverse = rotatedMatrixWorld.getInverse(rotatedMatrixWorld)\n    //         const facingBox = _box.setFromObjectBoxes(target, rotatedMatrixWorldInverse)\n    //         const facingBoxSize = facingBox.getSize(vectors.get())\n    //         const near = facingBox.min.z\n    //         const far = facingBox.max.z\n    //         const left = facingBox.min.x\n    //         out.x = 2 * Math.atan2(facingBoxSize.x / 2, distance) * THREE.Math.RAD2DEG\n    //         out.y = 2 * Math.atan2(facingBoxSize.y / 2, distance) * THREE.Math.RAD2DEG\n    //         matrices.get().makePerspective()\n    //     }\n    //     return out\n    // }\n\n}\n\n\nconst directions = [\n    new THREE.Vector3( 1, 0, 0),\n    new THREE.Vector3( 0, 1, 0), \n    new THREE.Vector3( 0, 0, 1), \n    new THREE.Vector3(-1, 0, 0), \n    new THREE.Vector3( 0,-1, 0), \n    new THREE.Vector3( 0, 0,-1), \n]\n\n\n// export function getMetrics(obj: THREE.Object3D) : SpatialMetrics {\n//     if (_metricsMap.has(obj)) return _metricsMap.get(obj)!\n//     const metrics = new SpatialMetrics(obj)\n//     _metricsMap.set(obj, metrics)\n//     return metrics\n// }","import * as THREE from 'three'\nimport { SpatialMetrics, Box3 } from '../metrics/SpatialMetrics'\n\nexport const LayoutFit = {\n    contain: 'contain',\n    contain3d: 'contain3d',\n    cover: 'cover',\n    cover3d: 'cover3d',\n    fill: 'fill',\n    fill3d: 'fill3d',\n}\n\nconst FIT_CONTAIN_3D = {\n    contain: 0,\n    contain3d: 1,\n    cover: 0,\n    cover3d: 0,\n    fill: 0,\n    fill3d: 0,\n}\n\nexport type LayoutFitType = keyof typeof LayoutFit\n\nexport type LayoutX = number|'center'|'left'|'right'\nexport type LayoutY = number|'center'|'top'|'bottom'\nexport type LayoutZ = number|'center'|'front'|'back'\n\nconst scratchV_1 = new THREE.Vector3\nconst scratchV_2 = new THREE.Vector3\nconst scratchV_3 = new THREE.Vector3\nconst scratchV_4 = new THREE.Vector3\nconst scratchV_5 = new THREE.Vector3\nconst scratchV_6 = new THREE.Vector3\nconst scratchV_7 = new THREE.Vector3\nconst scratchMat_1 = new THREE.Matrix4\n\n/**\n * Extend THREE.Object3D functionality with 3D layout functionality.\n * \n * Features include:\n *  - automatic bounds computation\n *  - modify alignment, origin, and size with respect to bounds and parent bounds\n *  - pose & layout transitions\n */\nexport class Layout {\n\n    /**\n     * Force local layout bounds to be excluded from the parent bounding context \n     * (effectively, forces a new bounding context)\n     */\n    forceBoundsExclusion = false\n\n    /**\n     * Specifies the degree to which the layout properties (`absolute`, and `relative`) influence \n     * the final transform. At 0, the layout properties have no effect. At 1, they have\n     * their full intended effect. \n     */\n    weight = 1\n    \n    /**\n     * Specify absolute layout bounds. A mininum or maximum boundary\n     * can be set to `NaN` in any dimension to remain unspecified. \n     * \n     * Note: any specified `relative` and `absolute` bounds\n     * are combined to determine `computedBounds`\n     */\n    absolute =  new Box3\n\n    /**\n     * Specify relative layout bounds, with -0.5 to 0.5 spanning the \n     * range of `computedOuterBounds` for each dimension. A mininum or \n     * maximum boundary can be set to `NaN` in any dimension to remain \n     * unspecified. \n     * \n     * Note: any specified `relative` and `absolute` bounds\n     * are combined to determine `computedBounds`\n     */\n    relative = new Box3\n\n    /**\n     * Specify the orientation of the layout. Default is identity. \n     */\n    orientation = new THREE.Quaternion\n\n    /**\n     * \n     */\n    minRelativeSize = new THREE.Vector3\n\n    /**\n     * \n     */\n    minAbsoluteSize = new THREE.Vector3\n\n    /** \n     * Specifies how the object should fit within `absolute` and `relative` bounds,\n     * which determines the `computedBounds`\n    */\n    set fit(fit:LayoutFitType) {\n        this._fit = fit\n        for (const id in this.fitTargets) this.fitTargets[id as LayoutFitType] = 0\n        this.fitTargets[fit] = 1\n    }\n    get fit() {\n        return this._fit\n    }\n    private _fit = 'contain' as LayoutFitType\n\n    /** Used internally. */\n    fitTargets = {\n        contain: 1,\n        contain3d: 0,\n        cover: 0,\n        cover3d: 0,\n        fill: 0,\n        fill3d: 0,\n    }\n\n    /**\n     * \n     */\n    fitAlign = new THREE.Vector3\n\n    clip = new Box3\n\n    inner = new Box3\n    innerAutoUpdate = true\n\n    computedBounds = new Box3\n    computedInnerBounds = new Box3\n    computedOuterBounds = new Box3\n    computedClipBounds = new Box3\n\n    public matrix = new THREE.Matrix4\n\n    private _boundsValid = false\n\n    constructor(public object:THREE.Object3D) {\n        this.computedInnerBounds.objectFilter = SpatialMetrics.objectFilter\n        this.computedInnerBounds.objectExpansion = 'box'\n        this.computedInnerBounds.coordinateSystem = object\n    }\n\n    invalidateBounds() {\n        this._boundsValid = false\n    }\n\n    resetLayout() {\n        this.fit = 'contain'\n        this.absolute.makeEmpty()\n        this.relative.makeEmpty()\n    }\n\n    resetPose() {\n        this.object.position.setScalar(0)\n        this.object.quaternion.set(0,0,0,1)\n        this.object.scale.setScalar(1)\n    }\n\n    reset() {\n        this.resetLayout()\n        this.resetPose()\n    }\n\n    /**\n     * If true, the layout properties are effectively noop\n     */\n    isPassive() {\n        return this.absolute.isEmpty() && this.relative.isEmpty()\n    }\n\n    /**\n     * If true, the `object` should not be included in the bounding calculation\n     * for any parent layouts.\n     */\n    isBoundingContext() {\n        if (this.forceBoundsExclusion) return true\n        if (!this.isPassive()) {\n            this.forceBoundsExclusion = true\n            return true\n        }\n        return false\n    }\n\n    updateMatrix() {\n        const bounds = this.computedBounds\n        \n        if (this.isPassive()) {\n            this.matrix.identity()\n            return\n        }\n\n        if (!this._boundsValid) {\n            Layout.updateInnerBounds(this.object)\n            Layout.updateOuterBounds(this.object)\n            if (this.computedInnerBounds.isEmpty()) {\n                this.computedInnerBounds.copy(this.computedOuterBounds)\n            }\n            this._boundsValid = true\n        }\n\n        const {absolute, relative, fitTargets, orientation, computedInnerBounds, computedOuterBounds, clip} = this\n        \n        // combine relative and absolute bounds\n\n        bounds.makeEmpty()\n        computedOuterBounds.relativeToAbsolute(relative.min, bounds.min)\n        computedOuterBounds.relativeToAbsolute(relative.max, bounds.max)\n        if (isFinite(absolute.min.x)) bounds.min.x = (isFinite(bounds.min.x) ? bounds.min.x : 0) + absolute.min.x\n        if (isFinite(absolute.min.y)) bounds.min.y = (isFinite(bounds.min.y) ? bounds.min.y : 0) + absolute.min.y\n        if (isFinite(absolute.min.z)) bounds.min.z = (isFinite(bounds.min.z) ? bounds.min.z : 0) + absolute.min.z\n        if (isFinite(absolute.max.x)) bounds.max.x = (isFinite(bounds.max.x) ? bounds.max.x : 0) + absolute.max.x\n        if (isFinite(absolute.max.y)) bounds.max.y = (isFinite(bounds.max.y) ? bounds.max.y : 0) + absolute.max.y\n        if (isFinite(absolute.max.z)) bounds.max.z = (isFinite(bounds.max.z) ? bounds.max.z : 0) + absolute.max.z\n\n        // apply clip\n\n        if (!clip.isEmpty()) {\n            // const clipMax = vectors.get().copy(clip.max)//.subVectors(clip.max, bounds.max).min(V_000)\n            // const clipMin = vectors.get().copy(clip.min)//.subVectors(clip.min, bounds.min).max(V_000)\n            const clipMax = computedInnerBounds.absoluteToRelative(clip.max, scratchV_1)//.subVectors(clip.max, bounds.max).min(V_000)\n            const clipMin = computedInnerBounds.absoluteToRelative(clip.min,Â scratchV_2)//.subVectors(clip.min, bounds.min).max(V_000)\n            bounds.relativeToAbsolute(clipMax, clipMax)//.subVectors(clip.max, bounds.max).min(V_000)\n            bounds.relativeToAbsolute(clipMin, clipMin)//.subVectors(clip.min, bounds.min).max(V_000)\n            if (!isFinite(clipMax.x)) clipMax.x = Infinity\n            if (!isFinite(clipMax.y)) clipMax.y = Infinity\n            if (!isFinite(clipMax.z)) clipMax.z = Infinity\n            if (!isFinite(clipMin.x)) clipMin.x = -Infinity\n            if (!isFinite(clipMin.y)) clipMin.y = -Infinity\n            if (!isFinite(clipMin.z)) clipMin.z = -Infinity\n            bounds.max.min(clipMax)\n            bounds.min.max(clipMin)\n        }\n\n        // compute min size\n        const minSize = computedOuterBounds.getSize(scratchV_1)\n            .multiply(this.minRelativeSize).max(this.minAbsoluteSize)\n\n        // compute final size\n        const innerSize = computedInnerBounds.getSize(scratchV_2)\n        const layoutScale = bounds.getSize(scratchV_3).max(minSize).divide(innerSize)\n        Layout.adjustScaleForFit(fitTargets, layoutScale)\n        const finalSize = scratchV_4.multiplyVectors(innerSize, layoutScale)\n        finalSize.x = Math.abs(finalSize.x)\n        finalSize.y = Math.abs(finalSize.y)\n        finalSize.z = Math.abs(finalSize.z)\n\n        if (!isFinite(bounds.min.x) && !isFinite(bounds.max.x)) {\n            bounds.max.x = finalSize.x / 2\n            bounds.min.x = - bounds.max.x\n        }\n        if (!isFinite(bounds.min.y) && !isFinite(bounds.max.y)) {\n            bounds.max.y = finalSize.y / 2\n            bounds.min.y = - bounds.max.y\n        }\n        if (!isFinite(bounds.min.z) && !isFinite(bounds.max.z)) {\n            bounds.max.z = finalSize.z / 2\n            bounds.min.z = - bounds.max.z\n        }\n        if (!isFinite(bounds.max.x)) bounds.max.x = bounds.min.x + finalSize.x\n        if (!isFinite(bounds.max.y)) bounds.max.y = bounds.min.y + finalSize.y\n        if (!isFinite(bounds.max.z)) bounds.max.z = bounds.min.z + finalSize.z\n        if (!isFinite(bounds.min.x)) bounds.min.x = bounds.max.x - finalSize.x\n        if (!isFinite(bounds.min.y)) bounds.min.y = bounds.max.y - finalSize.y\n        if (!isFinite(bounds.min.z)) bounds.min.z = bounds.max.z - finalSize.z\n\n        const orient = scratchMat_1.makeRotationFromQuaternion(orientation)\n        const halfFinalSize = finalSize.divideScalar(2)\n\n        const layoutAlignOffset = bounds.relativeToAbsolute(this.fitAlign, scratchV_5)\n        bounds.min.copy(layoutAlignOffset).sub(halfFinalSize)\n        bounds.max.copy(layoutAlignOffset).add(halfFinalSize)\n        bounds.applyMatrix4(orient)\n\n        const innerAlignOffset = computedInnerBounds.relativeToAbsolute(this.fitAlign, scratchV_6)\n        innerAlignOffset.multiply(layoutScale).applyMatrix4(orient)\n        bounds.min.sub(innerAlignOffset)\n        bounds.max.sub(innerAlignOffset)\n\n        // compose layout matrix\n\n        const layoutPosition = bounds.getCenter(scratchV_7)\n        this.matrix.compose(layoutPosition, orientation, layoutScale)\n\n        // vectors.pool(innerAlignOffset)\n    }\n\n    public static updateInnerBounds(o:THREE.Object3D) {\n        const layout = o.layout\n        const bounds = layout.computedInnerBounds\n        if (layout._boundsValid) return bounds\n        bounds.coordinateSystem = o\n        bounds.setFromObject(o).union(layout.inner)\n        if (bounds.min.x === bounds.max.x) bounds.max.x += 1e-10\n        if (bounds.min.y === bounds.max.y) bounds.max.y += 1e-10\n        if (bounds.min.z === bounds.max.z) bounds.max.z += 1e-10\n        return bounds\n    }\n    \n    public static updateOuterBounds(o:THREE.Object3D) {\n        const layout = o.layout\n        const parentBounds = layout.computedOuterBounds\n\n        if (layout._boundsValid) return parentBounds\n\n        const parent = o.parent\n        const cameraParent = parent as THREE.Camera\n        if (cameraParent && cameraParent.isCamera) {\n            const position = scratchV_1.setFromMatrixPosition(o.matrix)\n            const projectionMatrixInverse = scratchMat_1.getInverse(cameraParent.projectionMatrix)\n            const near = parentBounds.min.set(0,0,-1).applyMatrix4(projectionMatrixInverse).z\n            const projectionZ = parentBounds.min.set(0,0,position.z).applyMatrix4(cameraParent.projectionMatrix).z\n            parentBounds.min.set(-1, -1, projectionZ)\n            parentBounds.max.set(1, 1, projectionZ)\n            parentBounds.min.applyMatrix4(projectionMatrixInverse)\n            parentBounds.max.applyMatrix4(projectionMatrixInverse)\n            parentBounds.min.z = 0\n            parentBounds.max.z = near - position.z\n        } else if (parent) {\n            parentBounds.copy(parent.layout.computedInnerBounds)\n        } else {\n            parentBounds.makeEmpty()\n        }\n\n        const orient = scratchMat_1.makeRotationFromQuaternion(layout.orientation)\n        parentBounds.applyMatrix4(orient.getInverse(orient))\n        return parentBounds\n    }\n\n    public static _fitScale = new THREE.Vector3\n    public static adjustScaleForFit(fitTargets:typeof Layout.prototype.fitTargets, sizeScale:THREE.Vector3) {\n        const fitScale = this._fitScale\n        const out = sizeScale\n        const min = 1e-10\n        const max = 1e10\n\n        if (!isFinite(out.x) && !isFinite(out.y) && !isFinite(out.z)) {\n            out.setScalar(1)\n            return out\n        }\n        \n        if (!isFinite(out.x)) out.x = max\n        if (!isFinite(out.y)) out.y = max\n        if (!isFinite(out.z)) out.z = max\n        out.x = out.x < 0 ? THREE.Math.clamp(out.x, -max, -min) : THREE.Math.clamp(out.x, min, max)\n        out.y = out.y < 0 ? THREE.Math.clamp(out.y, -max, -min) : THREE.Math.clamp(out.y, min, max)\n        out.z = out.z < 0 ? THREE.Math.clamp(out.z, -max, -min) : THREE.Math.clamp(out.z, min, max)\n        \n        const {x,y,z} = out\n        const ax = Math.abs(x)\n        const ay = Math.abs(y)\n        const az = Math.abs(z)\n\n        // fill3d: allow all dimensions to fill layout size\n        if (fitTargets.fill3d) {\n            // no-op\n        }\n\n        // fill (2D): set z to average of x and y\n        if (fitTargets.fill) {\n            fitScale.set(x, y, x + y / 2)\n            out.lerp(fitScale, fitTargets.fill)\n        }\n\n        // contain (2D): set all dimensions to smallest of x or y\n        if (fitTargets.contain) {\n            if (ax < ay) {\n                fitScale.set(x, x, x)\n            } else {\n                fitScale.set(y, y, y)\n            }\n            out.lerp(fitScale, fitTargets.contain)\n        }\n\n        // contain3d: set all dimensions to smallest of x or y or z\n        if (fitTargets.contain3d) {\n            if (ax < ay && ax < az) {\n                fitScale.set(x, x, x)\n            } else if (ay < ax && ay < az) {\n                fitScale.set(y, y, y)\n            } else {\n                fitScale.set(z, z, z)\n            }\n            out.lerp(fitScale, fitTargets.contain3d)\n        }\n\n        // cover (2D): set all dimensions to largest of x or y\n        if (fitTargets.cover) {\n            if (ax > ay) {\n                fitScale.set(x, x, x)\n            } else {\n                fitScale.set(y, y, y)\n            }\n            out.lerp(fitScale, fitTargets.cover)\n        }\n\n        // cover (3D): set all dimensions to largest of x or y or z\n        if (fitTargets.cover3d) {\n            if (ax > ay && ax > az) {\n                fitScale.set(x, x, x)\n            } else if (ay > ax && ay > az) {\n                fitScale.set(y, y, y)\n            } else {\n                fitScale.set(z, z, z)\n            }\n            out.lerp(fitScale, fitTargets.cover3d)\n        }\n\n        // clamp between 1e-10 and 1e10\n        if (!isFinite(out.x)) out.x = min\n        if (!isFinite(out.y)) out.y = min\n        if (!isFinite(out.z)) out.z = min\n        out.x = out.x < 0 ? THREE.Math.clamp(out.x, -max, -min) : THREE.Math.clamp(out.x, min, max)\n        out.y = out.y < 0 ? THREE.Math.clamp(out.y, -max, -min) : THREE.Math.clamp(out.y, min, max)\n        out.z = out.z < 0 ? THREE.Math.clamp(out.z, -max, -min) : THREE.Math.clamp(out.z, min, max)\n        return out\n    }\n}\n\n// function isNaN(a:number) {\n//     return a !== a\n// }","var DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nvar reversed = function (easing) {\n    return function (p) {\n        return 1 - easing(1 - p);\n    };\n};\nvar mirrored = function (easing) {\n    return function (p) {\n        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n    };\n};\nvar createReversedEasing = reversed;\nvar createMirroredEasing = mirrored;\nvar createExpoIn = function (power) {\n    return function (p) {\n        return Math.pow(p, power);\n    };\n};\nvar createBackIn = function (power) {\n    return function (p) {\n        return p * p * ((power + 1) * p - power);\n    };\n};\nvar createAnticipateEasing = function (power) {\n    var backEasing = createBackIn(power);\n    return function (p) {\n        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n    };\n};\nvar linear = function (p) {\n    return p;\n};\nvar easeIn = /*#__PURE__*/createExpoIn(2);\nvar easeOut = /*#__PURE__*/reversed(easeIn);\nvar easeInOut = /*#__PURE__*/mirrored(easeIn);\nvar circIn = function (p) {\n    return 1 - Math.sin(Math.acos(p));\n};\nvar circOut = /*#__PURE__*/reversed(circIn);\nvar circInOut = /*#__PURE__*/mirrored(circOut);\nvar backIn = /*#__PURE__*/createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nvar backOut = /*#__PURE__*/reversed(backIn);\nvar backInOut = /*#__PURE__*/mirrored(backIn);\nvar anticipate = /*#__PURE__*/createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nvar ca = 4356.0 / 361.0;\nvar cb = 35442.0 / 1805.0;\nvar cc = 16061.0 / 1805.0;\nvar bounceOut = function (p) {\n    var p2 = p * p;\n    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\nvar bounceIn = function (p) {\n    return 1.0 - bounceOut(1.0 - p);\n};\nvar bounceInOut = function (p) {\n    return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n};\nvar NEWTON_ITERATIONS = 8;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar K_SPLINE_TABLE_SIZE = 11;\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nvar FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined';\nvar a = function (a1, a2) {\n    return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\nvar b = function (a1, a2) {\n    return 3.0 * a2 - 6.0 * a1;\n};\nvar c = function (a1) {\n    return 3.0 * a1;\n};\nvar getSlope = function (t, a1, a2) {\n    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\nvar calcBezier = function (t, a1, a2) {\n    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n    var binarySubdivide = function (aX, aA, aB) {\n        var i = 0;\n        var currentX;\n        var currentT;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            } else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    };\n    var newtonRaphsonIterate = function (aX, aGuessT) {\n        var i = 0;\n        var currentSlope = 0;\n        var currentX;\n        for (; i < NEWTON_ITERATIONS; ++i) {\n            currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    };\n    var calcSampleValues = function () {\n        for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\n            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n        }\n    };\n    var getTForX = function (aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = K_SPLINE_TABLE_SIZE - 1;\n        var dist = 0.0;\n        var guessForT = 0.0;\n        var initialSlope = 0.0;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += K_SAMPLE_STEP_SIZE;\n        }\n        --currentSample;\n        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n        initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n        }\n    };\n    calcSampleValues();\n    var resolver = function (aX) {\n        var returnValue;\n        if (mX1 === mY1 && mX2 === mY2) {\n            returnValue = aX;\n        } else if (aX === 0) {\n            returnValue = 0;\n        } else if (aX === 1) {\n            returnValue = 1;\n        } else {\n            returnValue = calcBezier(getTForX(aX), mY1, mY2);\n        }\n        return returnValue;\n    };\n    return resolver;\n}\n\nexport { reversed, mirrored, createReversedEasing, createMirroredEasing, createExpoIn, createBackIn, createAnticipateEasing, linear, easeIn, easeOut, easeInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate, bounceOut, bounceIn, bounceInOut, cubicBezier };\n","import * as THREE from 'three'\nimport { V_00, V_000, Q_IDENTITY } from '../utils'\nimport * as e from '@popmotion/easing'\n\n// redecalre popmotion types here so that the consumer doesn't have to \n// add '@popmotion/easing' as a dependency to get the types\n/**\n * Easing functions from '@popmotion/easing'\n */\nnamespace Easings {\n    export declare type Easing = (v: number) => number;\n    export declare type EasingModifier = (easing: Easing) => Easing;\n    export declare const reversed: EasingModifier;\n    export declare const mirrored: EasingModifier;\n    export declare const createReversedEasing: EasingModifier;\n    export declare const createMirroredEasing: EasingModifier;\n    export declare const createExpoIn: (power: number) => Easing;\n    export declare const createBackIn: (power: number) => Easing;\n    export declare const createAnticipateEasing: (power: number) => Easing;\n    export declare const linear: Easing;\n    export declare const easeIn: Easing;\n    export declare const easeOut: Easing;\n    export declare const easeInOut: Easing;\n    export declare const circIn: Easing;\n    export declare const circOut: Easing;\n    export declare const circInOut: Easing;\n    export declare const backIn: Easing;\n    export declare const backOut: Easing;\n    export declare const backInOut: Easing;\n    export declare const anticipate: Easing;\n    export declare const bounceOut: (p: number) => number;\n    export declare const bounceIn: (p: number) => number;\n    export declare const bounceInOut: (p: number) => number;\n    export declare function cubicBezier(mX1: number, mY1: number, mX2: number, mY2: number): (aX: number) => number;\n}\n\nconst easing = (e as any) as typeof Easings\n\nexport {easing}\n\nfunction defined(...obj:any[]) {\n    for (const o of obj) {\n        if (typeof o !== 'undefined') return o\n    }\n}\n\ntype WidenLiteral<T> = T extends number ? number : T\n\nexport type Multiplier<T> = number | (T extends THREE.Matrix4 ? {position?:number,scale?:number,quaternion?:number} : never)\n\nexport class TransitionTarget<T extends ValueType = ValueType>{\n    constructor(\n        public value: T,\n        public duration: number,\n        public easing: (number) => number\n    ) {}\n    public elapsed: 0\n}\n\ntype ValueTypes = number|THREE.Vector2|THREE.Vector3|THREE.Quaternion|THREE.Color|THREE.Matrix4|THREE.Box3\nexport type ValueType<T extends ValueTypes=ValueTypes> = WidenLiteral<T>\n\nexport type ValueRange<T> = T extends THREE.Vector2|THREE.Vector3 ? T : \n    T extends THREE.Matrix4|THREE.Box3 ? THREE.Vector3 : \n    T extends number ? number : never\n\nexport type TransitionableConstructorKeys = \n    'target'|'multiplier'|'duration'|'easing'|'threshold'|\n    'delay'|'debounce'|'maxWait'|'path'\nexport type TransitionerConstructOptions<T extends ValueType> = Pick<Transitionable<T>, TransitionableConstructorKeys>\n\nexport type TransitionableConfig = Pick<Transitionable<ValueType>,'delay'|'debounce'|'maxWait'|'multiplier'|'duration'|'easing'|'threshold'>\n\n\nconst scratchV2 = new THREE.Vector2\nconst scratchP_1 = new THREE.Vector3\nconst scratchP_2 = new THREE.Vector3\nconst scratchP_3 = new THREE.Vector3\nconst scratchQ_1 = new THREE.Quaternion\nconst scratchQ_2 = new THREE.Quaternion\nconst scratchQ_3 = new THREE.Quaternion\nconst scratchS_1 = new THREE.Vector3\nconst scratchS_2 = new THREE.Vector3\nconst scratchS_3 = new THREE.Vector3\nconst scratchMat_1 = new THREE.Matrix4\nconst scratchMat_2 = new THREE.Matrix4\n\nexport class Transitionable<T extends ValueType = ValueType> {\n\n    constructor(config:TransitionerConstructOptions<T>) {\n        Object.assign(this, config)\n        const t = this.target\n        if (typeof this.current === 'undefined') \n            this.current = (typeof t === 'number' ? t : (t as any).clone()) as  WidenLiteral<T>\n        if (typeof this.start === 'undefined') \n            this.start = (typeof t === 'number' ? t : (t as any).clone()) as  WidenLiteral<T>\n    }\n\n    /**\n     * The desired target value\n     */\n    target: WidenLiteral<T>\n\n    /**\n     * The current value\n     */\n    current : WidenLiteral<T>\n\n    /**\n     * The start value\n     */\n    start : WidenLiteral<T>\n\n    /**\n     * The property path that should be used to store the current value\n     */\n    path? : string\n    \n    /**\n     * The typical range of the target value, used to determine percentage change\n     */\n    range: ValueRange<T>\n    /**\n     * The target value awaiting to be added to the `targetQueue`\n     */\n    committedTarget?: WidenLiteral<T>\n    /**\n     * A multiplier to influence the speed of the transition\n     */\n    multiplier?: number = undefined\n    /**\n     * The duration of the easing function\n     */\n    duration?: number  = undefined\n    /**\n     * The easing function \n     */\n    easing?: (alpha:number) => number = undefined\n    /**\n     * The percentage that the `target` must differ from the `committedTarget`, \n     * the last target added to the `targetQueue`, or the `current` value  (in  that order)\n     * before it is considered \"changed\". Depends on `range` being defined. \n     */\n    threshold?: number = undefined\n    /**\n     * The number of seconds in which the `target` value must remain \"changed\" before it\n     * becomes the `committedTarget`\n     */\n    delay?: number = undefined\n    /**\n     * The number of seconds in which the `committedTarget` must \n     * remain stable before it is pushed to the `targetQueue`\n     */\n    debounce?: number = undefined\n    /**\n     * The maximum number of seconds to wait before the `committedTarget`\n     * is pushed to the `targetQueue`\n     */\n    maxWait?: number = undefined\n    /**\n     * The queue of committed target values that are still influencing the current value\n     * (whose durations have not yet been exceeded)\n     */\n    targetQueue: TransitionTarget<WidenLiteral<T>>[] = []\n\n    _delayTime = 0\n    _debounceTime = 0\n    _waitTime = 0\n\n    _changePercent = 0\n\n    /**\n     * \n     */\n    update(deltaTime:number, c?:TransitionableConfig, changePercent?:number) {\n        const config = this._updateConfig(c)\n        const queue = this.targetQueue\n        const target = this.target\n        this._changePercent = changePercent = typeof changePercent === 'number' ? changePercent : this._computePercentChange()\n        deltaTime *= config.multiplier\n        \n        if (changePercent >= config.threshold) {\n            if (this._delayTime > config.delay) {\n                if (typeof target === 'number') this.committedTarget = target as any\n                else {\n                    if (this.committedTarget) (this.committedTarget as any).copy(target)\n                    else this.committedTarget = (target as any).clone()\n                }\n                this._delayTime = 0\n                this._debounceTime = 0\n            }\n            this._delayTime += deltaTime\n        } else {\n            if (typeof this.committedTarget !== 'undefined') this._delayTime = 0\n            this._debounceTime += deltaTime\n        }\n\n        if (typeof this.committedTarget !== 'undefined') {\n            this._waitTime += deltaTime\n            if (this._debounceTime >= config.debounce || this._waitTime >= config.maxWait) {\n                queue.push({\n                    value: this.committedTarget,\n                    easing: config.easing,\n                    duration: config.duration,\n                    elapsed: 0\n                })\n                this.committedTarget = undefined\n                this._waitTime = 0\n            }\n        }\n        \n        while (queue.length && queue[0].elapsed >= queue[0].duration) {\n            this.start = queue.shift()!.value\n        }\n        \n        this._setCurrent(this.start)\n        let previousTarget = this.start\n        for (const t of queue) {\n            t.elapsed += deltaTime\n            this._addTargetInfluence(previousTarget, t)\n            previousTarget = t.value\n        }\n    }\n\n    private static _c = new THREE.Color\n    private static _cBlack = new THREE.Color(0,0,0)\n\n    private _addTargetInfluence(start:WidenLiteral<T>, target:TransitionTarget<WidenLiteral<T>>) {\n        const alpha = target.duration > 0 ? target.easing( Math.min(target.elapsed, target.duration) / target.duration) : 1\n\n        if (typeof target.value !== 'number' && 'isMatrix4' in target.value) {\n            const c = this.current as THREE.Matrix4\n            const s = start as THREE.Matrix4\n            const e = target.value as THREE.Matrix4\n\n            const pos = scratchP_1\n            const quat = scratchQ_1\n            const scale = scratchS_1\n            c.decompose(pos, quat, scale)\n\n            const sPos = scratchP_2\n            const sQuat = scratchQ_2\n            const sScale = scratchS_2\n            s.decompose(sPos, sQuat, sScale)\n    \n            const tPos = scratchP_3\n            const tQuat = scratchQ_3\n            const tScale = scratchS_3\n            e.decompose(tPos, tQuat, tScale)\n    \n            pos.add(tPos.sub(sPos).lerp(V_000, 1-alpha))\n            quat.multiply(sQuat.inverse().multiply(tQuat).slerp(Q_IDENTITY, 1-alpha)).normalize()\n            scale.add(tScale.sub(sScale).lerp(V_000, 1-alpha))\n            return\n        }\n\n        if (typeof target.value === 'number') {\n            this.current += THREE.Math.lerp(0, target.value-(startÂ as number), alpha) as any\n            return\n        } \n        \n        if ('isVector3' in target.value) {\n            const c = this.current as THREE.Vector3\n            const s = start as THREE.Vector3\n            const e = target.value as THREE.Vector3\n            const amount = scratchP_1.copy(e).sub(s).lerp(V_000, 1-alpha)\n            c.add(amount)\n            return\n        } \n        \n        if ('isVector2' in target.value) {\n            const c = this.current as THREE.Vector2\n            const s = start as THREE.Vector2\n            const e = target.value as THREE.Vector2\n            const amount = scratchV2.copy(e).sub(s).lerp(V_00, 1-alpha)\n            c.add(amount)\n            return\n        } \n        \n        if ('isQuaternion' in target.value) {\n            const c = this.current as THREE.Quaternion\n            const s = start as THREE.Quaternion\n            const e = target.value as THREE.Quaternion\n            const amount = scratchQ_1.copy(s).inverse().multiply(e).slerp(Q_IDENTITY, 1-alpha)\n            c.multiply(amount).normalize()\n            return\n        } \n        \n        if ('isColor' in target.value) {\n            const c = this.current as THREE.Color\n            const s = start as THREE.Color\n            const e = target.value as THREE.Color\n            const amount = Transitionable._c.copy(e).sub(s).lerp(Transitionable._cBlack, 1-alpha)\n            c.add(amount)\n            return\n        } \n        \n        if ('isBox3' in target.value) {\n            const c = this.current as THREE.Box3\n            const s = start as THREE.Box3\n            const e = target.value as THREE.Box3\n            const minAmount = scratchP_1.copy(e.min).sub(s.min).lerp(V_000, 1-alpha)\n            const maxAmount = scratchP_2.copy(e.max).sub(s.max).lerp(V_000, 1-alpha)\n            if (isFinite(c.min.x)) c.min.x = 0\n            if (isFinite(c.min.y)) c.min.y = 0\n            if (isFinite(c.min.z)) c.min.z = 0\n            if (isFinite(c.max.x)) c.max.x = 0\n            if (isFinite(c.max.y)) c.max.y = 0\n            if (isFinite(c.max.z)) c.max.z = 0\n            c.min.add(minAmount)\n            c.max.add(maxAmount)\n            return\n        }\n    }\n\n    _setCurrent(value:WidenLiteral<T>) {\n        if (typeof value === 'number') {\n            this.current = value\n        } else {\n            (this.current as any).copy(value)\n        }\n    }\n\n    _computePercentChange() {\n\n        const end = this.target as ValueType\n        const start = this.committedTarget || (this.targetQueue[0] && this.targetQueue[0].value) || this.current\n\n        if (typeof start === 'number') {\n            const s = start as number\n            const e = end as number\n            return Math.abs(e - s / ((this.range as number) || 1))\n        } \n\n        if ('isMatrix4' in start) {\n            const s = start as THREE.Matrix4\n            const e = end as THREE.Matrix4\n            const sPos = scratchP_1\n            const sQuat = scratchQ_1\n            const sScale = scratchS_1\n            s.decompose(sPos, sQuat, sScale)\n            const ePos = scratchP_2\n            const eQuat = scratchQ_2\n            const eScale = scratchS_2\n            e.decompose(ePos, eQuat, eScale)\n\n            const posPercent = sPos.equals(ePos) ? 0 : Infinity\n\n            const quatPercent = Math.abs(sQuat.angleTo(eQuat) / Math.PI)\n\n            const scalePercent = sScale.equals(eScale) ? 0 : Infinity\n\n            return Math.max(posPercent, quatPercent, scalePercent)\n        }\n        \n        if ('isVector3' in start) {\n            const s = start as THREE.Vector3\n            const e = end as THREE.Vector3\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const percent = scratchP_1.subVectors(e, s).divide(this.range as THREE.Vector3)\n            const {x,y,z} = percent\n            return Math.max(Math.abs(x||0),Math.abs(y||0),Math.abs(z||0))\n        } \n        \n        if ('isVector2' in start) {\n            const s = start as THREE.Vector2\n            const e = end as THREE.Vector2\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const percent = scratchV2.subVectors(e, s).divide(this.range as THREE.Vector2)\n            const {x,y} = percent\n            return Math.max(Math.abs(x||0),Math.abs(y||0))\n        } \n        \n        if ('isQuaternion' in start) {\n            const s = start as THREE.Quaternion\n            const e = end as THREE.Quaternion\n            return Math.abs(s.angleTo(e) / Math.PI)\n        } \n        \n        if ('isColor' in start) {\n            const s = start as THREE.Color\n            const e = end as THREE.Color\n            return Math.max(\n                Math.abs(e.r - s.r), \n                Math.abs(e.g - s.r), \n                Math.abs(e.b - s.r)\n            )\n        } \n        \n        if ('isBox3' in start) {\n            const s = start as THREE.Box3\n            const e = end as THREE.Box3\n            if (!this.range) return e.equals(s) ? 0 : Infinity\n            const size = this.range as ValueRange<THREE.Box3>\n            const minPercent = scratchP_1.subVectors(e.min, s.min).divide(size)\n            const maxPercent = scratchP_2.subVectors(e.max, s.max).divide(size)\n            const min = Math.max(Math.abs(minPercent.x||0), Math.abs(minPercent.y||0), Math.abs(minPercent.z||0))\n            const max = Math.max(Math.abs(maxPercent.x||0), Math.abs(maxPercent.y||0), Math.abs(maxPercent.z||0))\n            return Math.max(min, max)\n        }\n\n        return Infinity\n    }\n\n    protected _config = {} as Required<TransitionableConfig>\n\n    protected _updateConfig(c?:TransitionableConfig) {\n        this._config.multiplier = defined(this.multiplier, c && c.multiplier, Transitioner.DEFAULT_CONFIG.multiplier)\n        this._config.duration = defined(this.duration, c && c.duration, Transitioner.DEFAULT_CONFIG.duration)\n        this._config.easing = defined(this.easing, c && c.easing, Transitioner.DEFAULT_CONFIG.easing)\n        this._config.threshold = defined(this.threshold, c && c.threshold, Transitioner.DEFAULT_CONFIG.threshold)\n        this._config.delay = defined(this.delay, c && c.delay, Transitioner.DEFAULT_CONFIG.delay)\n        this._config.debounce = defined(this.debounce, c && c.debounce, Transitioner.DEFAULT_CONFIG.debounce) \n        this._config.maxWait = defined(this.maxWait, c && c.maxWait, Transitioner.DEFAULT_CONFIG.maxWait)\n        return this._config\n    }\n\n}\n\nexport class LocalMatrixTransitionable extends Transitionable<THREE.Matrix4> {\n    constructor(public object:THREE.Object3D) {\n        super({ target: new THREE.Matrix4 })\n    }\n\n    position = new Transitionable({target: new THREE.Vector3})\n    quaternion = new Transitionable({target: new THREE.Quaternion})\n    scale = new Transitionable({target: new THREE.Vector3(1,1,1)})\n\n    autoRange = true\n    synchronizeComponents = true\n\n    update(deltaTime:number, c?:TransitionableConfig) {\n        this._updateConfig(c)\n        const {position, quaternion, scale, _config} = this\n\n        if (this.autoRange) {\n            if (!position.range) position.range = new THREE.Vector3\n            if (!scale.range) scale.range = new THREE.Vector3\n            this.object.layout.computedOuterBounds.getSize(position.range)\n            this.object.layout.computedOuterBounds.getSize(scale.range).divide(position.range)\n            if (!isFinite(scale.range.x) || scale.range.x === 0) scale.range.x = 1\n            if (!isFinite(scale.range.y) || scale.range.y === 0) scale.range.y = 1\n            if (!isFinite(scale.range.z) || scale.range.z === 0) scale.range.z = 1\n        }\n        \n        this.target.decompose(position.target, quaternion.target, scale.target)\n        this.current.decompose(position.current, quaternion.current, scale.current)\n        \n        let changePercent:number|undefined = undefined\n        if (this.synchronizeComponents) {\n            changePercent = Math.max(\n                position._computePercentChange(), \n                quaternion._computePercentChange(), \n                scale._computePercentChange()\n            )\n        }\n\n        position.update(deltaTime, _config, changePercent)\n        quaternion.update(deltaTime, _config, changePercent)\n        scale.update(deltaTime, _config, changePercent)\n        this.current.compose(position.current, quaternion.current, scale.current)\n    }\n}\n\n/**\n * Enables smooth interpolation of various kinds of values, with hysteresis\n */\nexport class Transitioner {\n\n    static disableAllTransitions = false\n\n    static DEFAULT_CONFIG:Required<TransitionableConfig> = {\n        multiplier: 1,\n        duration: 1.5,\n        easing: easing.easeInOut,\n        threshold: 1e-2,\n        delay: 0,\n        debounce: 0,\n        maxWait: 4\n    }\n\n    /**\n     * The amount of time (in milliseconds) it takes to smoothly \n     * damp towards the target.\n     * \n     * By defualt, based on a progress threshold of 0.96\n     * \n     * progress = 1 - Math.exp(-time)\n     * time = - Math.log(1-progress)\n     */\n    static NATURAL_DURATION = - Math.log(1 - 0.95)\n    \n    /**\n     * \n     */\n    set active(active:boolean) {\n        this._active = active\n    }\n    get active() {\n        return this._active && !Transitioner.disableAllTransitions\n    }\n    private _active = false\n\n    /**\n     * Specifies the desired parent coordinate system.\n     */\n    parentTarget : THREE.Object3D|null = null\n\n    /**\n     * The local matrix transitionable\n     */\n    matrixLocal:LocalMatrixTransitionable\n    \n    /**\n     * The target world matrix, automatically computed from pose/layout properties\n     */\n    matrixWorldTarget = new THREE.Matrix4\n\n    /**\n     * A multiplier to influence the speed of the transition\n     */\n    multiplier? : number = undefined\n    \n    /**\n     * The duration of the easing function\n     */\n    duration? : number = undefined\n\n    /**\n     * The easing function \n     */\n    easing? : (alpha:number) => number = undefined\n\n    /**\n     * The percentage that the `target` must differ from the `committedTarget`, \n     * the last target added to the `targetQueue`, or the `current` value  (in  that order)\n     * before it is considered \"changed\"\n     */\n    threshold? : number = undefined\n\n    /**\n     * The number of seconds in which the `target` value must remain \"changed\" before it\n     * becomes the `committedTarget`\n     */\n    delay? : number = undefined\n\n    /**\n     * The number of seconds in which the `committedTarget` must \n     * remain stable before it is pushed to the `targetQueue`\n     */\n    debounce? : number = undefined\n\n    /**\n     * The maximum number of seconds to wait before the `committedTarget`\n     * is pushed to the `targetQueue`\n     */\n    maxWait? : number = undefined\n\n    /**\n     * \n     */\n    customTransitionables = [] as Transitionable[]\n\n    /**\n     * \n     * @param object \n     */\n    constructor(public object:THREE.Object3D) {\n        this.matrixLocal = new LocalMatrixTransitionable(this.object)\n    }\n\n    /**\n     * Add a transitionable\n     * @param transitionable \n     */\n    add<T extends ValueType>(transitionable:TransitionerConstructOptions<T>|Transitionable<T>) : Transitionable<T> {\n        const t = transitionable instanceof Transitionable ? \n            transitionable : new Transitionable(transitionable)\n        this.customTransitionables.push(t)\n        return t\n    }\n\n    /**\n     * Transitions pose, layout, and/or custom properties associated with an Object3D instance.\n     * \n     * When the transitioner is active, the object's pose (`position`, `quaternion`, and `scale`)\n     * and layout (`layout.absolute`, `layout.relative`, etc.) properties are treated as \n     * target values, and their corresponding target matrices are maintained in the transitioner \n     * instance (e.g., `transitioner.matrix`, `transitioner.layoutMatrix`). Meanwhile, the object's \n     * pose/layout matrices (`matrix` and `layout.matrix`) will only be updated when this `update` \n     * method is called).\n     * \n     * If `targetParent` is set and differs from the current `object.parent`, \n     * this method will smoothly switch to the new coordinate system. \n     */\n    update(deltaTime:number, autoActive=true) {\n\n        if (!this.active && autoActive) this.active = true\n\n        if (!this.active) { \n            this.matrixLocal.current.copy(this.matrixLocal.target)\n            for (const t of this.customTransitionables) {\n                t._setCurrent(t.target)\n                this._setPropertyAtPath(t)\n            }\n            return\n        }\n\n        // refresh matrix targets if necessary\n        if (autoActive) this.object.updateWorldMatrix(true, true)\n        this._setParent()\n\n        // update transitionables\n        deltaTime = Math.max(deltaTime, 1e-10) // in case multiplier is Infinity\n        this.matrixLocal.update(deltaTime, this)\n        for (const t of this.customTransitionables) {\n            t.update(deltaTime, this)\n            this._setPropertyAtPath(t)\n        }\n\n        this.object.updateWorldMatrix(false, true)\n    }\n\n    private _setPropertyAtPath(t:Transitionable) {\n        if (t.path) {\n            if (typeof t.current === 'number') {\n                set(t.path, this.object, t.current)\n            } else {\n                resolve(t.path, this.object).copy(t.current)\n            }\n        }\n    }\n\n    /**\n     * Ensure that this `object` is attached to the `targetParent` Object3D instance. \n     * When the `transitioner` is active, this method ensures a smooth transition \n     * to another coordinate system. If the `object` is already attached to the \n     * `targetParent`, this method is effectively noop.\n     */\n    private _setParent() {\n        const parent = this.parentTarget\n        const o = this.object\n        if (!parent) return\n        if (o.parent !== parent) {\n            o.updateWorldMatrix(true, true)\n            const originalMatrixWorld = scratchMat_1.copy(o.matrixWorld)\n            o.parent && o.parent.remove(o)\n            parent && parent.add(o)\n            parent.updateWorldMatrix(true, true)\n            const inverseParentMatrixWorld = parent ? scratchMat_2.getInverse(parent.matrixWorld) : scratchMat_2.identity()\n            o.matrix.copy(inverseParentMatrixWorld.multiply(originalMatrixWorld))\n            // const transitioner = o.layout.transitioner\n            // if (transitioner.active) {\n            //     transitioner.layout.weight = 0\n            //     o.matrix.decompose(transitioner.position, transitioner.quaternion, transitioner.scale)\n            // } else {\n            // }\n            o.matrix.decompose(o.position, o.quaternion, o.scale)\n        }\n    }\n}\n\nconst next = (prev, curr) => prev && prev[curr]\n\nfunction resolve(path:string, obj=self as any, separator='.') {\n    var properties = Array.isArray(path) ? path : path.split(separator)\n    return properties.reduce(next, obj)\n}\n\nfunction set(path:string, obj=self as any, value:any, separator='.') {\n    var properties = Array.isArray(path) ? path : path.split(separator)\n    var lastPropertKey = properties.pop()\n    const property = properties.reduce(next, obj)\n    property[lastPropertKey] = value\n}","import { Vector3, Vector2, Triangle, DoubleSide, BackSide, Face3 } from 'three';\r\n\r\n// Ripped and modified From THREE.js Mesh raycast\r\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\r\nvar vA = new Vector3();\r\nvar vB = new Vector3();\r\nvar vC = new Vector3();\r\n\r\nvar uvA = new Vector2();\r\nvar uvB = new Vector2();\r\nvar uvC = new Vector2();\r\n\r\nvar intersectionPoint = new Vector3();\r\nvar intersectionPointWorld = new Vector3();\r\n\r\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\tvar intersect;\r\n\tif ( material.side === BackSide ) {\r\n\r\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t} else {\r\n\r\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t}\r\n\r\n\tif ( intersect === null ) return null;\r\n\r\n\tintersectionPointWorld.copy( point );\r\n\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\treturn {\r\n\t\tdistance: distance,\r\n\t\tpoint: intersectionPointWorld.clone(),\r\n\t\tobject: object\r\n\t};\r\n\r\n}\r\n\r\nfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\r\n\r\n\tvA.fromBufferAttribute( position, a );\r\n\tvB.fromBufferAttribute( position, b );\r\n\tvC.fromBufferAttribute( position, c );\r\n\r\n\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tif ( uv ) {\r\n\r\n\t\t\tuvA.fromBufferAttribute( uv, a );\r\n\t\t\tuvB.fromBufferAttribute( uv, b );\r\n\t\t\tuvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\tintersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2( ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = new Vector3();\r\n\t\tintersection.face = new Face3( a, b, c, Triangle.getNormal( vA, vB, vC, normal ) );\r\n\t\tintersection.faceIndex = a;\r\n\r\n\t}\r\n\r\n\treturn intersection;\r\n\r\n}\r\n\r\n\r\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\r\nfunction intersectTri( mesh, geo, raycaster, ray, tri, intersections ) {\r\n\r\n\tconst triOffset = tri * 3;\r\n\tconst a = geo.index.getX( triOffset );\r\n\tconst b = geo.index.getX( triOffset + 1 );\r\n\tconst c = geo.index.getX( triOffset + 2 );\r\n\r\n\tconst intersection = checkBufferGeometryIntersection( mesh, raycaster, ray, geo.attributes.position, geo.attributes.uv, a, b, c );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tintersection.faceIndex = tri;\r\n\t\tif ( intersections ) intersections.push( intersection );\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nexport { intersectTri };\r\n","import { intersectTri } from './ThreeIntersectionUtilities.js';\r\n\r\nexport function intersectTris( mesh, geo, raycaster, ray, offset, count, intersections ) {\r\n\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tintersectTri( mesh, geo, raycaster, ray, i, intersections );\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport function intersectClosestTri( mesh, geo, raycaster, ray, offset, count ) {\r\n\r\n\tlet dist = Infinity;\r\n\tlet res = null;\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tconst intersection = intersectTri( mesh, geo, raycaster, ray, i );\r\n\t\tif ( intersection && intersection.distance < dist ) {\r\n\r\n\t\t\tres = intersection;\r\n\t\t\tdist = intersection.distance;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn res;\r\n\r\n};\r\n","// Returns a Float32Array representing the bounds data for box.\r\nexport function boxToArray( bx ) {\r\n\r\n\tconst arr = new Float32Array( 6 );\r\n\r\n\tarr[ 0 ] = bx.min.x;\r\n\tarr[ 1 ] = bx.min.y;\r\n\tarr[ 2 ] = bx.min.z;\r\n\r\n\tarr[ 3 ] = bx.max.x;\r\n\tarr[ 4 ] = bx.max.y;\r\n\tarr[ 5 ] = bx.max.z;\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\nexport function arrayToBox( arr, target ) {\r\n\r\n\ttarget.min.x = arr[ 0 ];\r\n\ttarget.min.y = arr[ 1 ];\r\n\ttarget.min.z = arr[ 2 ];\r\n\r\n\ttarget.max.x = arr[ 3 ];\r\n\ttarget.max.y = arr[ 4 ];\r\n\ttarget.max.z = arr[ 5 ];\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nexport function getLongestEdgeIndex( bounds ) {\r\n\r\n\tlet splitDimIdx = - 1;\r\n\tlet splitDist = - Infinity;\r\n\r\n\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\r\n\t\tif ( dist > splitDist ) {\r\n\r\n\t\t\tsplitDist = dist;\r\n\t\t\tsplitDimIdx = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitDimIdx;\r\n\r\n}\r\n","import { Vector3 } from 'three';\r\n\r\nexport class SeparatingAxisBounds {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.min = Infinity;\r\n\t\tthis.max = - Infinity;\r\n\r\n\t}\r\n\r\n\tsetFromPointsField( points, field ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = p[ field ];\r\n\t\t\tmin = Math.min( val, min );\r\n\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\r\n\t}\r\n\r\n\tsetFromPoints( axis, points ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = axis.dot( p );\r\n\t\t\tmin = Math.min( val, min );\r\n\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tisSeparated( other ) {\r\n\r\n\t\treturn this.min > other.max || other.min > this.max;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\r\n\r\n\tconst p = new Vector3();\r\n\treturn function setFromBox( axis, box ) {\r\n\r\n\t\tconst boxMin = box.min;\r\n\t\tconst boxMax = box.max;\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\r\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\r\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\r\n\r\n\t\t\t\t\tconst val = axis.dot( p );\r\n\t\t\t\t\tmin = Math.min( val, min );\r\n\t\t\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const areIntersecting = ( function () {\r\n\r\n\tconst cacheSatBounds = new SeparatingAxisBounds();\r\n\treturn function areIntersecting( shape1, shape2 ) {\r\n\r\n\t\tconst points1 = shape1.points;\r\n\t\tconst satAxes1 = shape1.satAxes;\r\n\t\tconst satBounds1 = shape1.satBounds;\r\n\r\n\t\tconst points2 = shape2.points;\r\n\t\tconst satAxes2 = shape2.satAxes;\r\n\t\tconst satBounds2 = shape2.satBounds;\r\n\r\n\t\t// check axes of the first shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check axes of the second shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n","import { Vector3, Vector2, Plane, Line3 } from 'three';\r\nexport const closestPointLineToLine = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst v02 = new Vector3();\r\n\treturn function closestPointLineToLine( l1, l2, result ) {\r\n\r\n\t\tconst v0 = l1.start;\r\n\t\tconst v10 = dir1;\r\n\t\tconst v2 = l2.start;\r\n\t\tconst v32 = dir2;\r\n\r\n\t\tv02.subVectors( v0, v2 );\r\n\t\tdir1.subVectors( l1.end, l2.start );\r\n\t\tdir2.subVectors( l2.end, l2.start );\r\n\r\n\t\t// float d0232 = v02.Dot(v32);\r\n\t\tconst d0232 = v02.dot( v32 );\r\n\r\n\t\t// float d3210 = v32.Dot(v10);\r\n\t\tconst d3210 = v32.dot( v10 );\r\n\r\n\t\t// float d3232 = v32.Dot(v32);\r\n\t\tconst d3232 = v32.dot( v32 );\r\n\r\n\t\t// float d0210 = v02.Dot(v10);\r\n\t\tconst d0210 = v02.dot( v10 );\r\n\r\n\t\t// float d1010 = v10.Dot(v10);\r\n\t\tconst d1010 = v10.dot( v10 );\r\n\r\n\t\t// float denom = d1010*d3232 - d3210*d3210;\r\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\r\n\r\n\t\tlet d, d2;\r\n\t\tif ( denom !== 0 ) {\r\n\r\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\r\n\r\n\t\t} else {\r\n\r\n\t\t\td = 0;\r\n\r\n\t\t}\r\n\r\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\r\n\r\n\t\tresult.x = d;\r\n\t\tresult.y = d2;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const closestPointsSegmentToSegment = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\r\n\tconst paramResult = new Vector2();\r\n\tconst temp1 = new Vector3();\r\n\tconst temp2 = new Vector3();\r\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\r\n\r\n\t\tclosestPointLineToLine( l1, l2, paramResult );\r\n\r\n\t\tlet d = paramResult.x;\r\n\t\tlet d2 = paramResult.y;\r\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\tl1.at( d, target1 );\r\n\t\t\tl2.at( d2, target2 );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d >= 0 && d <= 1 ) {\r\n\r\n\t\t\t// Only d2 is out of bounds.\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tl2.at( 0, target2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl2.at( 1, target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\t// Only d is out of bounds.\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tl1.at( 0, target1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl1.at( 1, target1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Both u and u2 are out of bounds.\r\n\t\t\tlet p;\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tp = l1.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = l1.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet p2;\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tp2 = l2.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp2 = l2.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst closestPoint = temp1;\r\n\t\t\tconst closestPoint2 = temp2;\r\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\r\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\r\n\r\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\r\n\r\n\t\t\t\ttarget1.copy( closestPoint );\r\n\t\t\t\ttarget2.copy( p2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttarget1.copy( p );\r\n\t\t\t\ttarget2.copy( closestPoint2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nexport const sphereIntersectTriangle = ( function () {\r\n\r\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\r\n\tconst closestPointTemp = new Vector3();\r\n\tconst projectedPointTemp = new Vector3();\r\n\tconst planeTemp = new Plane();\r\n\tconst lineTemp = new Line3();\r\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\r\n\r\n\t\tconst { radius, center } = sphere;\r\n\t\tconst { a, b, c } = triangle;\r\n\r\n\t\t// phase 1\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = b;\r\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = b;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\t// phase 2\r\n\t\tconst plane = triangle.getPlane( planeTemp );\r\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\r\n\t\tif ( dp <= radius ) {\r\n\r\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\r\n\t\t\tconst cp = triangle.containsPoint( pp );\r\n\t\t\tif ( cp ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n} )();\r\n","import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.update = ( function () {\r\n\r\n\tconst arr = new Array( 3 );\r\n\treturn function update( ) {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\r\n\t\tarr[ 0 ] = this.a;\r\n\t\tarr[ 1 ] = this.b;\r\n\t\tarr[ 2 ] = this.c;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, arr );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, arr );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, arr );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, arr );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n","import { Box3, Vector3, Matrix4, Sphere, Line3 } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { SeparatingAxisTriangle } from './SeparatingAxisTriangle.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class OrientedBox extends Box3 {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isOrientedBox = true;\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.invMatrix = new Matrix4();\r\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\r\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.sphere = new Sphere();\r\n\r\n\t}\r\n\r\n\tset( min, max, matrix ) {\r\n\r\n\t\tsuper.set( min, max );\r\n\t\tthis.matrix = matrix;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\t\tthis.matrix.copy( other.matrix );\r\n\r\n\t}\r\n\r\n}\r\n\r\nOrientedBox.prototype.update = ( function () {\r\n\r\n\treturn function update() {\r\n\r\n\t\tconst matrix = this.matrix;\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\tconst points = this.points;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\r\n\t\t\t\t\tconst v = points[ i ];\r\n\t\t\t\t\tv.x = x ? max.x : min.x;\r\n\t\t\t\t\tv.y = y ? max.y : min.y;\r\n\t\t\t\t\tv.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tv.applyMatrix4( matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst minVec = points[ 0 ];\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst index = 1 << i;\r\n\t\t\tconst pi = points[ index ];\r\n\r\n\t\t\taxis.subVectors( minVec, pi );\r\n\t\t\tsb.setFromPoints( axis, points );\r\n\r\n\t\t}\r\n\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\r\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\r\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\r\n\r\n\t\tthis.invMatrix.getInverse( this.matrix );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsBox = ( function () {\r\n\r\n\tconst aabbBounds = new SeparatingAxisBounds();\r\n\treturn function intersectsBox( box ) {\r\n\r\n\t\tif ( ! box.intersectsSphere( this.sphere ) ) return false;\r\n\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\r\n\t\taabbBounds.min = min.x;\r\n\t\taabbBounds.max = max.x;\r\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.y;\r\n\t\taabbBounds.max = max.y;\r\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.z;\r\n\t\taabbBounds.max = max.z;\r\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\taabbBounds.setFromBox( axis, box );\r\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri = new SeparatingAxisTriangle();\r\n\tconst pointsArr = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\tif ( ! triangle.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri.copy( triangle );\r\n\t\t\tsaTri.update();\r\n\t\t\ttriangle = saTri;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\r\n\t\tpointsArr[ 0 ] = triangle.a;\r\n\t\tpointsArr[ 1 ] = triangle.b;\r\n\t\tpointsArr[ 2 ] = triangle.c;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst sa = satAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst triSatBounds = triangle.satBounds;\r\n\t\tconst triSatAxes = triangle.satAxes;\r\n\t\tconst points = this.points;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = triSatBounds[ i ];\r\n\t\t\tconst sa = triSatAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.closestPointToPoint = ( function () {\r\n\r\n\treturn function closestPointToPoint( point, target1 ) {\r\n\r\n\t\ttarget1\r\n\t\t\t.copy( point )\r\n\t\t\t.applyMatrix4( this.invMatrix )\r\n\t\t\t.clamp( this.min, this.max )\r\n\t\t\t.applyMatrix4( this.matrix );\r\n\r\n\t\treturn target1;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nOrientedBox.prototype.distanceToBox = ( function () {\r\n\r\n\tconst xyzFields = [ 'x', 'y', 'z' ];\r\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\r\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\r\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.intersectsBox( box ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tbox.getCenter( point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tconst threshold2 = threshold * threshold;\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst points = this.points;\r\n\r\n\r\n\t\t// iterate over every edge and compare distances\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check over all these points\r\n\t\tfor ( let i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tpoint2.copy( p ).clamp( min, max );\r\n\r\n\t\t\tconst dist = p.distanceToSquared( point2 );\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( p );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate and check all line segment distances\r\n\t\tlet count = 0;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\r\n\r\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\r\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\t\t// get obb line segments\r\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst p1 = points[ index ];\r\n\t\t\t\t\tconst p2 = points[ index2 ];\r\n\t\t\t\t\tconst line1 = segments1[ count ];\r\n\t\t\t\t\tline1.set( p1, p2 );\r\n\r\n\r\n\t\t\t\t\t// get aabb line segments\r\n\t\t\t\t\tconst f1 = xyzFields[ i ];\r\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\r\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\r\n\t\t\t\t\tconst line2 = segments2[ count ];\r\n\t\t\t\t\tconst start = line2.start;\r\n\t\t\t\t\tconst end = line2.end;\r\n\r\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\r\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\r\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check all the other boxes point\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\r\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\r\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\r\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 12; i ++ ) {\r\n\r\n\t\t\tconst l1 = segments1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\r\n\r\n\t\t\t\tconst l2 = segments2[ i2 ];\r\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\r\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n","\r\nimport * as THREE from 'three';\r\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtlities.js';\r\nimport { arrayToBox } from './Utils/ArrayBoxUtilities.js';\r\nimport { OrientedBox } from './Utils/OrientedBox.js';\r\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\r\nimport { sphereIntersectTriangle } from './Utils/MathUtilities.js';\r\n\r\nconst boundingBox = new THREE.Box3();\r\nconst boxIntersection = new THREE.Vector3();\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\nfunction setTriangle( tri, i, index, pos ) {\r\n\r\n\tconst ta = tri.a;\r\n\tconst tb = tri.b;\r\n\tconst tc = tri.c;\r\n\r\n\tlet i3 = index.getX( i );\r\n\tta.x = pos.getX( i3 );\r\n\tta.y = pos.getY( i3 );\r\n\tta.z = pos.getZ( i3 );\r\n\r\n\ti3 = index.getX( i + 1 );\r\n\ttb.x = pos.getX( i3 );\r\n\ttb.y = pos.getY( i3 );\r\n\ttb.z = pos.getZ( i3 );\r\n\r\n\ti3 = index.getX( i + 2 );\r\n\ttc.x = pos.getX( i3 );\r\n\ttc.y = pos.getY( i3 );\r\n\ttc.z = pos.getZ( i3 );\r\n\r\n}\r\n\r\nexport default\r\nclass MeshBVHNode {\r\n\r\n\tconstructor() {\r\n\r\n\t\t// internal nodes have boundingData, left, right, and splitAxis\r\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\r\n\r\n\t}\r\n\r\n\tintersectRay( ray, target ) {\r\n\r\n\t\tarrayToBox( this.boundingData, boundingBox );\r\n\r\n\t\treturn ray.intersectBox( boundingBox, target );\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tif ( this.count ) intersectTris( mesh, mesh.geometry, raycaster, ray, this.offset, this.count, intersects );\r\n\t\telse {\r\n\r\n\t\t\tif ( this.left.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.left.raycast( mesh, raycaster, ray, intersects );\r\n\t\t\tif ( this.right.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.right.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tif ( this.count ) {\r\n\r\n\t\t\treturn intersectClosestTri( mesh, mesh.geometry, raycaster, ray, this.offset, this.count );\r\n\r\n\t\t} else {\r\n\r\n\r\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\r\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\r\n\t\t\tconst splitAxis = this.splitAxis;\r\n\t\t\tconst xyzAxis = xyzFields[ splitAxis ];\r\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\r\n\t\t\tconst leftToRight = rayDir >= 0;\r\n\r\n\t\t\t// c1 is the child to check first\r\n\t\t\tlet c1, c2;\r\n\t\t\tif ( leftToRight ) {\r\n\r\n\t\t\t\tc1 = this.left;\r\n\t\t\t\tc2 = this.right;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tc1 = this.right;\r\n\t\t\t\tc2 = this.left;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst c1Intersection = c1.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c1Result = c1Intersection ? c1.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\r\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\r\n\t\t\tif ( c1Result ) {\r\n\r\n\t\t\t\t// check only along the split axis\r\n\t\t\t\tconst rayOrig = ray.origin[ xyzAxis ];\r\n\t\t\t\tconst toPoint = rayOrig - c1Result.point[ xyzAxis ];\r\n\t\t\t\tconst toChild1 = rayOrig - c2.boundingData[ splitAxis ];\r\n\t\t\t\tconst toChild2 = rayOrig - c2.boundingData[ splitAxis + 3 ];\r\n\r\n\t\t\t\tconst toPointSq = toPoint * toPoint;\r\n\t\t\t\tif ( toPointSq <= toChild1 * toChild1 && toPointSq <= toChild2 * toChild2 ) {\r\n\r\n\t\t\t\t\treturn c1Result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\r\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\r\n\t\t\tconst c2Intersection = c2.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c2Result = c2Intersection ? c2.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\tif ( c1Result && c2Result ) {\r\n\r\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn c1Result || c2Result || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nMeshBVHNode.prototype.shapecast = ( function () {\r\n\r\n\tconst triangle = new SeparatingAxisTriangle();\r\n\tconst cachedBox1 = new THREE.Box3();\r\n\tconst cachedBox2 = new THREE.Box3();\r\n\treturn function shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc = null, nodeScoreFunc = null ) {\r\n\r\n\t\tif ( this.count && intersectsTriangleFunc ) {\r\n\r\n\t\t\tconst geometry = mesh.geometry;\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst pos = geometry.attributes.position;\r\n\t\t\tconst offset = this.offset;\r\n\t\t\tconst count = this.count;\r\n\r\n\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\tsetTriangle( triangle, i, index, pos );\r\n\t\t\t\ttriangle.update();\r\n\r\n\t\t\t\tif ( intersectsTriangleFunc( triangle, i, i + 1, i + 2 ) ) {\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = this.left;\r\n\t\t\tconst right = this.right;\r\n\t\t\tlet c1 = left;\r\n\t\t\tlet c2 = right;\r\n\r\n\t\t\tlet score1, score2;\r\n\t\t\tlet box1, box2;\r\n\t\t\tif ( nodeScoreFunc ) {\r\n\r\n\t\t\t\tbox1 = cachedBox1;\r\n\t\t\t\tbox2 = cachedBox2;\r\n\r\n\t\t\t\tarrayToBox( c1.boundingData, box1 );\r\n\t\t\t\tarrayToBox( c2.boundingData, box2 );\r\n\r\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\r\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\r\n\r\n\t\t\t\tif ( score2 < score1 ) {\r\n\r\n\t\t\t\t\tc1 = right;\r\n\t\t\t\t\tc2 = left;\r\n\r\n\t\t\t\t\tconst temp = score1;\r\n\t\t\t\t\tscore1 = score2;\r\n\t\t\t\t\tscore2 = temp;\r\n\r\n\t\t\t\t\tconst tempBox = box1;\r\n\t\t\t\t\tbox1 = box2;\r\n\t\t\t\t\tbox2 = tempBox;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! box1 ) {\r\n\r\n\t\t\t\tbox1 = cachedBox1;\r\n\t\t\t\tarrayToBox( c1.boundingData, box1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isC1Leaf = ! ! c1.count;\r\n\t\t\tconst c1Intersection =\r\n\t\t\t\tintersectsBoundsFunc( box1, isC1Leaf, score1, c1 ) &&\r\n\t\t\t\tc1.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, nodeScoreFunc );\r\n\r\n\t\t\tif ( c1Intersection ) return true;\r\n\r\n\r\n\t\t\tif ( ! box2 ) {\r\n\r\n\t\t\t\tbox2 = cachedBox2;\r\n\t\t\t\tarrayToBox( c2.boundingData, box2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isC2Leaf = ! ! c2.count;\r\n\t\t\tconst c2Intersection =\r\n\t\t\t\tintersectsBoundsFunc( box2, isC2Leaf, score2, c2 ) &&\r\n\t\t\t\tc2.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, nodeScoreFunc );\r\n\r\n\t\t\tif ( c2Intersection ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsGeometry = ( function () {\r\n\r\n\tconst triangle = new SeparatingAxisTriangle();\r\n\tconst triangle2 = new SeparatingAxisTriangle();\r\n\tconst cachedMesh = new THREE.Mesh();\r\n\tconst invertedMat = new THREE.Matrix4();\r\n\r\n\tconst obb = new OrientedBox();\r\n\tconst obb2 = new OrientedBox();\r\n\r\n\treturn function intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb = null ) {\r\n\r\n\t\tif ( cachedObb === null ) {\r\n\r\n\t\t\tif ( ! geometry.boundingBox ) {\r\n\r\n\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobb.set( geometry.boundingBox.min, geometry.boundingBox.max, geometryToBvh );\r\n\t\t\tobb.update();\r\n\t\t\tcachedObb = obb;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.count ) {\r\n\r\n\t\t\tconst thisGeometry = mesh.geometry;\r\n\t\t\tconst thisIndex = thisGeometry.index;\r\n\t\t\tconst thisPos = thisGeometry.attributes.position;\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst pos = geometry.attributes.position;\r\n\r\n\t\t\tconst offset = this.offset;\r\n\t\t\tconst count = this.count;\r\n\r\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\r\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\r\n\t\t\t// here.\r\n\t\t\tinvertedMat.getInverse( geometryToBvh );\r\n\r\n\t\t\tif ( geometry.boundsTree ) {\r\n\r\n\t\t\t\tfunction triangleCallback( tri ) {\r\n\r\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri.update();\r\n\r\n\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\r\n\t\t\t\t\t\ttriangle2.update();\r\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarrayToBox( this.boundingData, obb2 );\r\n\t\t\t\tobb2.matrix.copy( invertedMat );\r\n\t\t\t\tobb2.update();\r\n\r\n\t\t\t\tcachedMesh.geometry = geometry;\r\n\t\t\t\tconst res = geometry.boundsTree.shapecast( cachedMesh, box => obb2.intersectsBox( box ), triangleCallback );\r\n\t\t\t\tcachedMesh.geometry = null;\r\n\r\n\t\t\t\treturn res;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\r\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.update();\r\n\r\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\r\n\t\t\t\t\t\ttriangle2.update();\r\n\r\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = this.left;\r\n\t\t\tconst right = this.right;\r\n\r\n\t\t\tarrayToBox( left.boundingData, boundingBox );\r\n\t\t\tconst leftIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tleft.intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( leftIntersection ) return true;\r\n\r\n\r\n\t\t\tarrayToBox( right.boundingData, boundingBox );\r\n\t\t\tconst rightIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tright.intersectsGeometry( mesh, geometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( rightIntersection ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsBox = ( function () {\r\n\r\n\tconst obb = new OrientedBox();\r\n\r\n\treturn function intersectsBox( mesh, box, boxToBvh ) {\r\n\r\n\t\tobb.set( box.min, box.max, boxToBvh );\r\n\t\tobb.update();\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\tbox => obb.intersectsBox( box ),\r\n\t\t\ttri => obb.intersectsTriangle( tri )\r\n\t\t);\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.intersectsSphere = ( function () {\r\n\r\n\treturn function intersectsSphere( mesh, sphere ) {\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\tbox => sphere.intersectsBox( box ),\r\n\t\t\ttri => sphereIntersectTriangle( sphere, tri )\r\n\t\t);\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.closestPointToPoint = ( function () {\r\n\r\n\t// early out if under minThreshold\r\n\t// skip checking if over maxThreshold\r\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t// returns Infinity if no value found\r\n\r\n\tconst temp = new THREE.Vector3();\r\n\treturn function closestPointToPoint( mesh, point, target = null, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tthis.shapecast(\r\n\r\n\t\t\tmesh,\r\n\t\t\t( box, isLeaf, score ) => score < closestDistance && score < maxThreshold,\r\n\t\t\ttri => {\r\n\r\n\t\t\t\ttri.closestPointToPoint( point, temp );\r\n\t\t\t\tconst dist = point.distanceTo( temp );\r\n\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\tif ( target ) target.copy( temp );\r\n\t\t\t\t\tclosestDistance = dist;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( dist < minThreshold ) return true;\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tbox => box.distanceToPoint( point )\r\n\r\n\t\t);\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nMeshBVHNode.prototype.closestPointToGeometry = ( function () {\r\n\r\n\t// early out if under minThreshold\r\n\t// skip checking if over maxThreshold\r\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t// returns Infinity if no value found\r\n\r\n\tconst tri2 = new SeparatingAxisTriangle();\r\n\tconst obb = new OrientedBox();\r\n\r\n\tconst temp1 = new THREE.Vector3();\r\n\tconst temp2 = new THREE.Vector3();\r\n\treturn function closestPointToGeometry( mesh, geometry, geometryToBvh, target1 = null, target2 = null, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tif ( ! geometry.boundingBox ) geometry.computeBoundingBox();\r\n\t\tobb.set( geometry.boundingBox.min, geometry.boundingBox.max, geometryToBvh );\r\n\t\tobb.update();\r\n\r\n\t\tconst pos = geometry.attributes.position;\r\n\t\tconst index = geometry.index;\r\n\r\n\t\tlet tempTarget1, tempTarget2;\r\n\t\tif ( target1 ) tempTarget1 = temp1;\r\n\t\tif ( target2 ) tempTarget2 = temp2;\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tthis.shapecast(\r\n\t\t\tmesh,\r\n\t\t\t( box, isLeaf, score ) => score < closestDistance && score < maxThreshold,\r\n\t\t\ttri => {\r\n\r\n\t\t\t\tconst sphere1 = tri.sphere;\r\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\tsetTriangle( tri2, i2, index, pos );\r\n\t\t\t\t\ttri2.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\ttri2.sphere.setFromPoints( tri2.points );\r\n\r\n\t\t\t\t\tconst sphere2 = tri2.sphere;\r\n\t\t\t\t\tconst sphereDist = sphere2.center.distanceTo( sphere1.center ) - sphere2.radius - sphere1.radius;\r\n\t\t\t\t\tif ( sphereDist > closestDistance ) continue;\r\n\r\n\t\t\t\t\ttri2.update();\r\n\r\n\t\t\t\t\tconst dist = tri.distanceToTriangle( tri2, tempTarget1, tempTarget2 );\r\n\t\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( tempTarget1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( tempTarget2 );\r\n\t\t\t\t\t\tclosestDistance = dist;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( dist < minThreshold ) return true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tbox => obb.distanceToBox( box, Math.min( closestDistance, maxThreshold ) )\r\n\r\n\t\t);\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t};\r\n\r\n} )();\r\n","// Split strategy constants\r\nexport const CENTER = 0;\r\nexport const AVERAGE = 1;\r\nexport const SAH = 2;\r\n","import * as THREE from 'three';\r\nimport { arrayToBox, getLongestEdgeIndex } from './Utils/ArrayBoxUtilities.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\r\n// result is an array of size tris.length * 6 where triangle i maps to a\r\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\r\n// representing the center and half-extent in each dimension of triangle i\r\nfunction computeBounds( geo ) {\r\n\r\n\tconst verts = geo.attributes.position.array;\r\n\tconst index = geo.index.array;\r\n\tconst triCount = index.length / 3;\r\n\tconst bounds = new Float32Array( triCount * 6 );\r\n\r\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\tconst ai = index[ 3 * tri + 0 ] * 3;\r\n\t\tconst bi = index[ 3 * tri + 1 ] * 3;\r\n\t\tconst ci = index[ 3 * tri + 2 ] * 3;\r\n\r\n\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\tconst a = verts[ ai + el ];\r\n\t\t\tconst b = verts[ bi + el ];\r\n\t\t\tconst c = verts[ ci + el ];\r\n\t\t\tconst min = Math.min( a, b, c );\r\n\t\t\tconst max = Math.max( a, b, c );\r\n\t\t\tconst halfExtents = ( max - min ) / 2;\r\n\t\t\tbounds[ tri * 6 + el * 2 + 0 ] = min + halfExtents;\r\n\t\t\tbounds[ tri * 6 + el * 2 + 1 ] = halfExtents;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn bounds;\r\n\r\n}\r\n\r\nconst boxtemp = new THREE.Box3();\r\n\r\nexport default class BVHConstructionContext {\r\n\r\n\tconstructor( geo, options ) {\r\n\r\n\t\tthis.geo = geo;\r\n\t\tthis.options = options;\r\n\t\tthis.bounds = computeBounds( geo );\r\n\r\n\t\t// SAH Initialization\r\n\t\tthis.sahplanes = null;\r\n\t\tif ( options.strategy === SAH ) {\r\n\r\n\t\t\tconst triCount = geo.index.count / 3;\r\n\t\t\tthis.sahplanes = [ new Array( triCount ), new Array( triCount ), new Array( triCount ) ];\r\n\t\t\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\t\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\t\t\tthis.sahplanes[ el ][ tri ] = { p: this.bounds[ tri * 6 + el * 2 ], tri };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// returns the average coordinate on the specified axis of the all the provided triangles\r\n\tgetAverage( offset, count, axis ) {\r\n\r\n\t\tlet avg = 0;\r\n\t\tconst bounds = this.bounds;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tavg += bounds[ i * 6 + axis * 2 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn avg / count;\r\n\r\n\t}\r\n\r\n\t// computes the union of the bounds of all of the given triangles and puts the resulting box in target\r\n\tgetBounds( offset, count, target ) {\r\n\r\n\t\tlet minx = Infinity;\r\n\t\tlet miny = Infinity;\r\n\t\tlet minz = Infinity;\r\n\t\tlet maxx = - Infinity;\r\n\t\tlet maxy = - Infinity;\r\n\t\tlet maxz = - Infinity;\r\n\t\tconst bounds = this.bounds;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tconst cx = bounds[ i * 6 + 0 ];\r\n\t\t\tconst hx = bounds[ i * 6 + 1 ];\r\n\t\t\tminx = Math.min( minx, cx - hx );\r\n\t\t\tmaxx = Math.max( maxx, cx + hx );\r\n\t\t\tconst cy = bounds[ i * 6 + 2 ];\r\n\t\t\tconst hy = bounds[ i * 6 + 3 ];\r\n\t\t\tminy = Math.min( miny, cy - hy );\r\n\t\t\tmaxy = Math.max( maxy, cy + hy );\r\n\t\t\tconst cz = bounds[ i * 6 + 4 ];\r\n\t\t\tconst hz = bounds[ i * 6 + 5 ];\r\n\t\t\tminz = Math.min( minz, cz - hz );\r\n\t\t\tmaxz = Math.max( maxz, cz + hz );\r\n\r\n\t\t}\r\n\r\n\t\ttarget[ 0 ] = minx;\r\n\t\ttarget[ 1 ] = miny;\r\n\t\ttarget[ 2 ] = minz;\r\n\r\n\t\ttarget[ 3 ] = maxx;\r\n\t\ttarget[ 4 ] = maxy;\r\n\t\ttarget[ 5 ] = maxz;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\r\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\r\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\r\n\tpartition( offset, count, split ) {\r\n\r\n\t\tlet left = offset;\r\n\t\tlet right = offset + count - 1;\r\n\t\tconst pos = split.pos;\r\n\t\tconst axisOffset = split.axis * 2;\r\n\t\tconst index = this.geo.index.array;\r\n\t\tconst bounds = this.bounds;\r\n\t\tconst sahplanes = this.sahplanes;\r\n\r\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\twhile ( true ) {\r\n\r\n\t\t\twhile ( left <= right && bounds[ left * 6 + axisOffset ] < pos ) {\r\n\r\n\t\t\t\tleft ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( left <= right && bounds[ right * 6 + axisOffset ] >= pos ) {\r\n\r\n\t\t\t\tright --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( left < right ) {\r\n\r\n\t\t\t\t// we need to swap all of the information associated with the triangles at index\r\n\t\t\t\t// left and right; that's the verts in the geometry index, the bounds,\r\n\t\t\t\t// and perhaps the SAH planes\r\n\r\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tlet t0 = index[ left * 3 + i ];\r\n\t\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\r\n\t\t\t\t\tindex[ right * 3 + i ] = t0;\r\n\t\t\t\t\tlet t1 = bounds[ left * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 0 ] = bounds[ right * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 0 ] = t1;\r\n\t\t\t\t\tlet t2 = bounds[ left * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 1 ] = bounds[ right * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 1 ] = t2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( sahplanes ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tlet t = sahplanes[ i ][ left ];\r\n\t\t\t\t\t\tsahplanes[ i ][ left ] = sahplanes[ i ][ right ];\r\n\t\t\t\t\t\tsahplanes[ i ][ right ] = t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tleft ++;\r\n\t\t\t\tright --;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn left;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetOptimalSplit( bounds, offset, count, strategy ) {\r\n\r\n\t\tlet axis = - 1;\r\n\t\tlet pos = 0;\r\n\r\n\t\t// Center\r\n\t\tif ( strategy === CENTER ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = ( bounds[ axis + 3 ] + bounds[ axis ] ) / 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === AVERAGE ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = this.getAverage( offset, count, axis );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === SAH ) {\r\n\r\n\t\t\t// Surface Area Heuristic\r\n\t\t\t// In order to make this code more terse, the x, y, and z\r\n\t\t\t// variables of various structures have been stuffed into\r\n\t\t\t// 0, 1, and 2 array indices so they can be easily computed\r\n\t\t\t// and accessed within array iteration\r\n\r\n\t\t\t// Cost values defineed for operations. We're using bounds for traversal, so\r\n\t\t\t// the cost of traversing one more layer is more than intersecting a triangle.\r\n\t\t\tconst TRAVERSAL_COST = 3;\r\n\t\t\tconst INTERSECTION_COST = 1;\r\n\t\t\tconst bb = arrayToBox( bounds, boxtemp );\r\n\r\n\t\t\t// Define the width, height, and depth of the bounds as a box\r\n\t\t\tconst dim = [\r\n\t\t\t\tbb.max.x - bb.min.x,\r\n\t\t\t\tbb.max.y - bb.min.y,\r\n\t\t\t\tbb.max.z - bb.min.z\r\n\t\t\t];\r\n\t\t\tconst sa = 2 * ( dim[ 0 ] * dim[ 1 ] + dim[ 0 ] * dim[ 2 ] + dim[ 1 ] * dim[ 2 ] );\r\n\r\n\t\t\t// Get the precalculated planes based for the triangles we're\r\n\t\t\t// testing here\r\n\t\t\tconst filteredLists = [[], [], []];\r\n\t\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\t\tfor ( let v = 0; v < 3; v ++ ) {\r\n\r\n\t\t\t\t\tfilteredLists[ v ].push( this.sahplanes[ v ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tfilteredLists.forEach( planes => planes.sort( ( a, b ) => a.p - b.p ) );\r\n\r\n\t\t\t// this bounds surface area, left bound SA, left triangles, right bound SA, right triangles\r\n\t\t\tconst getCost = ( sa, sal, nl, sar, nr ) =>\r\n\t\t\t\t  TRAVERSAL_COST + INTERSECTION_COST * ( ( sal / sa ) * nl + ( sar / sa ) * nr );\r\n\r\n\t\t\t// the cost of _not_ splitting into smaller bounds\r\n\t\t\tconst noSplitCost = INTERSECTION_COST * count;\r\n\r\n\t\t\taxis = - 1;\r\n\t\t\tlet bestCost = noSplitCost;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t// o1 and o2 represent the _other_ two axes in the\r\n\t\t\t\t// the space. So if we're checking the x (0) dimension,\r\n\t\t\t\t// then o1 and o2 would be y and z (1 and 2)\r\n\t\t\t\tconst o1 = ( i + 1 ) % 3;\r\n\t\t\t\tconst o2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\tconst bmin = bb.min[ xyzFields[ i ] ];\r\n\t\t\t\tconst bmax = bb.max[ xyzFields[ i ] ];\r\n\t\t\t\tconst planes = filteredLists[ i ];\r\n\r\n\t\t\t\t// The number of left and right triangles on either side\r\n\t\t\t\t// given the current split\r\n\t\t\t\tlet nl = 0;\r\n\t\t\t\tlet nr = count;\r\n\t\t\t\tfor ( let p = 0; p < planes.length; p ++ ) {\r\n\r\n\t\t\t\t\tconst pinfo = planes[ p ];\r\n\r\n\t\t\t\t\t// As the plane moves, we have to increment or decrement the\r\n\t\t\t\t\t// number of triangles on either side of the plane\r\n\t\t\t\t\tnl ++;\r\n\t\t\t\t\tnr --;\r\n\r\n\t\t\t\t\t// the distance from the plane to the edge of the broader bounds\r\n\t\t\t\t\tconst ldim = pinfo.p - bmin;\r\n\t\t\t\t\tconst rdim = bmax - pinfo.p;\r\n\r\n\t\t\t\t\t// same for the other two dimensions\r\n\t\t\t\t\tlet ldimo1 = dim[ o1 ], rdimo1 = dim[ o1 ];\r\n\t\t\t\t\tlet ldimo2 = dim[ o2 ], rdimo2 = dim[ o2 ];\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// compute the other bounding planes for the box\r\n\t\t\t\t\t// if only the current triangles are considered to\r\n\t\t\t\t\t// be in the box\r\n\t\t\t\t\t// This is really slow and probably not really worth it\r\n\t\t\t\t\tconst o1planes = this.sahplanes[o1];\r\n\t\t\t\t\tconst o2planes = this.sahplanes[o2];\r\n\t\t\t\t\tlet lmin = Infinity, lmax = -Infinity;\r\n\t\t\t\t\tlet rmin = Infinity, rmax = -Infinity;\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o1planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o1planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo1 = Math.min(lmax - lmin, ldimo1);\r\n\t\t\t\t\trdimo1 = Math.min(rmax - rmin, rdimo1);\r\n\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o2planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o2planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo2 = Math.min(lmax - lmin, ldimo2);\r\n\t\t\t\t\trdimo2 = Math.min(rmax - rmin, rdimo2);\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// surface areas and cost\r\n\t\t\t\t\tconst sal = 2 * ( ldimo1 * ldimo2 + ldimo1 * ldim + ldimo2 * ldim );\r\n\t\t\t\t\tconst sar = 2 * ( rdimo1 * rdimo2 + rdimo1 * rdim + rdimo2 * rdim );\r\n\t\t\t\t\tconst cost = getCost( sa, sal, nl, sar, nr );\r\n\r\n\t\t\t\t\tif ( cost < bestCost ) {\r\n\r\n\t\t\t\t\t\taxis = i;\r\n\t\t\t\t\t\tpos = pinfo.p;\r\n\t\t\t\t\t\tbestCost = cost;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { axis, pos };\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport MeshBVHNode from './MeshBVHNode.js';\r\nimport BVHConstructionContext from './BVHConstructionContext.js';\r\nimport { arrayToBox, boxToArray } from './Utils/ArrayBoxUtilities.js';\r\nimport { CENTER } from './Constants.js';\r\n\r\nexport default class MeshBVH {\r\n\r\n\tconstructor( geo, options = {} ) {\r\n\r\n\t\tif ( ! geo.isBufferGeometry ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\r\n\r\n\t\t} else if ( geo.attributes.position.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the position attribute.' );\r\n\r\n\t\t} else if ( geo.index && geo.index.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\r\n\r\n\t\t}\r\n\r\n\t\t// default options\r\n\t\toptions = Object.assign( {\r\n\r\n\t\t\tstrategy: CENTER,\r\n\t\t\tmaxDepth: 40,\r\n\t\t\tmaxLeafTris: 10,\r\n\t\t\tverbose: true\r\n\r\n\t\t}, options );\r\n\t\toptions.strategy = Math.max( 0, Math.min( 2, options.strategy ) );\r\n\r\n\t\tthis._roots = this._buildTree( geo, options );\r\n\r\n\r\n\t}\r\n\r\n\t/* Private Functions */\r\n\r\n\t_ensureIndex( geo ) {\r\n\r\n\t\tif ( ! geo.index ) {\r\n\r\n\t\t\tconst vertexCount = geo.attributes.position.count;\r\n\t\t\tconst index = new ( vertexCount > 65535 ? Uint32Array : Uint16Array )( vertexCount );\r\n\t\t\tgeo.setIndex( new THREE.BufferAttribute( index, 1 ) );\r\n\r\n\t\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\t\t\tindex[ i ] = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Computes the set of { offset, count } ranges which need independent BVH roots. Each\r\n\t// region in the geometry index that belongs to a different set of material groups requires\r\n\t// a separate BVH root, so that triangles indices belonging to one group never get swapped\r\n\t// with triangle indices belongs to another group. For example, if the groups were like this:\r\n\t//\r\n\t// [-------------------------------------------------------------]\r\n\t// |__________________|\r\n\t//   g0 = [0, 20]  |______________________||_____________________|\r\n\t//                      g1 = [16, 40]           g2 = [41, 60]\r\n\t//\r\n\t// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\r\n\t//\r\n\t_getRootIndexRanges( geo ) {\r\n\r\n\t\tif ( ! geo.groups || ! geo.groups.length ) {\r\n\r\n\t\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\r\n\r\n\t\t}\r\n\r\n\t\tconst ranges = [];\r\n\t\tconst rangeBoundaries = new Set();\r\n\t\tfor ( const group of geo.groups ) {\r\n\r\n\t\t\trangeBoundaries.add( group.start );\r\n\t\t\trangeBoundaries.add( group.start + group.count );\r\n\r\n\t\t}\r\n\r\n\t\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\r\n\t\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\r\n\t\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\r\n\r\n\t\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\r\n\t\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\r\n\r\n\t\t}\r\n\t\treturn ranges;\r\n\r\n\t}\r\n\r\n\t_buildTree( geo, options ) {\r\n\r\n\t\tthis._ensureIndex( geo );\r\n\r\n\t\tconst ctx = new BVHConstructionContext( geo, options );\r\n\t\tlet reachedMaxDepth = false;\r\n\r\n\t\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\r\n\t\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\r\n\t\tconst splitNode = ( node, offset, count, depth = 0 ) => {\r\n\r\n\t\t\tif ( depth >= options.maxDepth ) {\r\n\r\n\t\t\t\treachedMaxDepth = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// early out if we've met our capacity\r\n\t\t\tif ( count <= options.maxLeafTris || depth >= options.maxDepth ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Find where to split the volume\r\n\t\t\tconst split = ctx.getOptimalSplit( node.boundingData, offset, count, options.strategy );\r\n\t\t\tif ( split.axis === - 1 ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst splitOffset = ctx.partition( offset, count, split );\r\n\r\n\t\t\t// create the two new child nodes\r\n\t\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode.splitAxis = split.axis;\r\n\r\n\t\t\t\t// create the left child and compute its bounding box\r\n\t\t\t\tconst left = node.left = new MeshBVHNode();\r\n\t\t\t\tconst lstart = offset, lcount = splitOffset - offset;\r\n\t\t\t\tleft.boundingData = ctx.getBounds( lstart, lcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( left, lstart, lcount, depth + 1 );\r\n\r\n\t\t\t\t// repeat for right\r\n\t\t\t\tconst right = node.right = new MeshBVHNode();\r\n\t\t\t\tconst rstart = splitOffset, rcount = count - lcount;\r\n\t\t\t\tright.boundingData = ctx.getBounds( rstart, rcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( right, rstart, rcount, depth + 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\r\n\t\t};\r\n\r\n\t\tconst roots = [];\r\n\t\tconst ranges = this._getRootIndexRanges( geo );\r\n\r\n\t\tif ( ranges.length === 1 ) {\r\n\r\n\t\t\tconst root = new MeshBVHNode();\r\n\t\t\tconst range = ranges[ 0 ];\r\n\r\n\t\t\tif ( geo.boundingBox != null ) {\r\n\r\n\t\t\t\troot.boundingData = boxToArray( geo.boundingBox );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\troot.boundingData = ctx.getBounds( range.offset, range.count, new Float32Array( 6 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsplitNode( root, range.offset, range.count );\r\n\t\t\troots.push( root );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let range of ranges ) {\r\n\r\n\t\t\t\tconst root = new MeshBVHNode();\r\n\t\t\t\troot.boundingData = ctx.getBounds( range.offset, range.count, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( root, range.offset, range.count );\r\n\t\t\t\troots.push( root );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( reachedMaxDepth && options.verbose ) {\r\n\r\n\t\t\tconsole.warn( `MeshBVH: Max depth of ${ options.maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\r\n\t\t\tconsole.warn( this, geo );\r\n\r\n\t\t}\r\n\r\n\t\t// if the geometry doesn't have a bounding box, then let's politely populate it using\r\n\t\t// the work we did to determine the BVH root bounds\r\n\r\n\t\tif ( geo.boundingBox == null ) {\r\n\r\n\t\t\tconst rootBox = new THREE.Box3();\r\n\t\t\tgeo.boundingBox = new THREE.Box3();\r\n\r\n\t\t\tfor ( let root of roots ) {\r\n\r\n\t\t\t\tgeo.boundingBox.union( arrayToBox( root.boundingData, rootBox ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn roots;\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\troot.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tlet closestResult = null;\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst result = root.raycastFirst( mesh, raycaster, ray );\r\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\r\n\r\n\t\t\t\tclosestResult = result;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn closestResult;\r\n\r\n\t}\r\n\r\n\tintersectsGeometry( mesh, geometry, geomToMesh ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsGeometry( mesh, geometry, geomToMesh ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tshapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc = null, orderNodesFunc = null ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.shapecast( mesh, intersectsBoundsFunc, intersectsTriangleFunc, orderNodesFunc ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectsBox( mesh, box, boxToMesh ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsBox( mesh, box, boxToMesh ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( mesh, sphere ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tif ( root.intersectsSphere( mesh, sphere ) ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tclosestPointToGeometry( mesh, geom, matrix, target1, target2, minThreshold, maxThreshold ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst dist = root.closestPointToGeometry( mesh, geom, matrix, target1, target2, minThreshold, maxThreshold );\r\n\t\t\tif ( dist < closestDistance ) closestDistance = dist;\r\n\t\t\tif ( dist < minThreshold ) return dist;\r\n\r\n\t\t}\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t}\r\n\r\n\tdistanceToGeometry( mesh, geom, matrix, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToGeometry( mesh, geom, matrix, null, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( mesh, point, target, minThreshold, maxThreshold ) {\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst dist = root.closestPointToPoint( mesh, point, target, minThreshold, maxThreshold );\r\n\t\t\tif ( dist < closestDistance ) closestDistance = dist;\r\n\t\t\tif ( dist < minThreshold ) return dist;\r\n\r\n\t\t}\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( mesh, point, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToPoint( mesh, point, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { arrayToBox } from './Utils/ArrayBoxUtilities.js';\r\n\r\nconst wiremat = new THREE.LineBasicMaterial( { color: 0x00FF88, transparent: true, opacity: 0.3 } );\r\nconst boxGeom = new THREE.Box3Helper().geometry;\r\nlet boundingBox = new THREE.Box3();\r\n\r\nclass MeshBVHRootVisualizer extends THREE.Object3D {\r\n\r\n\tconstructor( mesh, depth = 10, group = 0 ) {\r\n\r\n\t\tsuper( 'MeshBVHRootVisualizer' );\r\n\r\n\t\tthis.depth = depth;\r\n\t\tthis._oldDepth = - 1;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boundsTree = null;\r\n\t\tthis._group = group;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tif ( this._mesh.geometry.boundsTree !== this._boundsTree || this._oldDepth !== this.depth ) {\r\n\r\n\t\t\tthis._oldDepth = this.depth;\r\n\t\t\tthis._boundsTree = this._mesh.geometry.boundsTree;\r\n\r\n\t\t\tlet requiredChildren = 0;\r\n\t\t\tif ( this._boundsTree ) {\r\n\r\n\t\t\t\tconst recurse = ( n, d ) => {\r\n\r\n\t\t\t\t\tlet isLeaf = 'count' in n;\r\n\r\n\t\t\t\t\tif ( d === this.depth ) return;\r\n\r\n\t\t\t\t\tif ( d === this.depth - 1 || isLeaf ) {\r\n\r\n\t\t\t\t\t\tlet m = requiredChildren < this.children.length ? this.children[ requiredChildren ] : null;\r\n\t\t\t\t\t\tif ( ! m ) {\r\n\r\n\t\t\t\t\t\t\tm = new THREE.LineSegments( boxGeom, wiremat );\r\n\t\t\t\t\t\t\tm.raycast = () => [];\r\n\t\t\t\t\t\t\tthis.add( m );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequiredChildren ++;\r\n\t\t\t\t\t\tarrayToBox( n.boundingData, boundingBox );\r\n\t\t\t\t\t\tboundingBox.getCenter( m.position );\r\n\t\t\t\t\t\tm.scale.subVectors( boundingBox.max, boundingBox.min ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t\tif ( m.scale.x === 0 ) m.scale.x = Number.EPSILON;\r\n\t\t\t\t\t\tif ( m.scale.y === 0 ) m.scale.y = Number.EPSILON;\r\n\t\t\t\t\t\tif ( m.scale.z === 0 ) m.scale.z = Number.EPSILON;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! isLeaf ) {\r\n\r\n\t\t\t\t\t\trecurse( n.left, d + 1 );\r\n\t\t\t\t\t\trecurse( n.right, d + 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\trecurse( this._boundsTree._roots[ this._group ], 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( this.children.length > requiredChildren ) this.remove( this.children.pop() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass MeshBVHVisualizer extends THREE.Object3D {\r\n\r\n\tconstructor( mesh, depth = 10 ) {\r\n\r\n\t\tsuper( 'MeshBVHVisualizer' );\r\n\r\n\t\tthis.depth = depth;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._roots = [];\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst bvh = this._mesh.geometry.boundsTree;\r\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\r\n\t\twhile ( this._roots.length > totalRoots ) {\r\n\r\n\t\t\tthis._roots.pop();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\r\n\r\n\t\t\tif ( i >= this._roots.length ) {\r\n\r\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this._mesh, this.depth, i );\r\n\t\t\t\tthis.add( root );\r\n\t\t\t\tthis._roots.push( root );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlet root = this._roots[ i ];\r\n\t\t\t\troot.depth = this.depth;\r\n\t\t\t\troot.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( this._mesh.position );\r\n\t\tthis.rotation.copy( this._mesh.rotation );\r\n\t\tthis.scale.copy( this._mesh.scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default MeshBVHVisualizer;\r\n","import * as THREE from 'three';\r\nimport MeshBVH from './MeshBVH.js';\r\nimport Visualizer from './MeshBVHVisualizer.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst ray = new THREE.Ray();\r\nconst tmpInverseMatrix = new THREE.Matrix4();\r\nconst origMeshRaycastFunc = THREE.Mesh.prototype.raycast;\r\n\r\nfunction acceleratedRaycast( raycaster, intersects ) {\r\n\r\n\tif ( this.geometry.boundsTree ) {\r\n\r\n\t\tif ( this.material === undefined ) return;\r\n\r\n\t\ttmpInverseMatrix.getInverse( this.matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\r\n\r\n\t\tif ( raycaster.firstHitOnly === true ) {\r\n\r\n\t\t\tconst res = this.geometry.boundsTree.raycastFirst( this, raycaster, ray );\r\n\t\t\tif ( res ) intersects.push( res );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.geometry.boundsTree.raycast( this, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction computeBoundsTree( options ) {\r\n\r\n\tthis.boundsTree = new MeshBVH( this, options );\r\n\treturn this.boundsTree;\r\n\r\n}\r\n\r\nfunction disposeBoundsTree() {\r\n\r\n\tthis.boundsTree = null;\r\n\r\n}\r\n\r\nexport {\r\n\tMeshBVH, Visualizer,\r\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\r\n\tCENTER, AVERAGE, SAH\r\n};\r\n","import * as THREE from 'three'\nimport {Layout} from './layout/Layout'\nimport {Transitioner} from './layout/Transitioner'\n\n// accelerated raycasting\nimport { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh'\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree\nTHREE.Mesh.prototype.raycast = acceleratedRaycast\ndeclare module 'three/src/core/BufferGeometry' {\n    interface BufferGeometry {\n        computeBoundsTree() : void\n        disposeBoundsTree() : void\n        boundsTree?: any\n    }\n}\n\ndeclare module 'three/src/core/Object3D' {\n    interface Object3D {\n        /**\n         * Layout properties\n         */\n        layout: Layout\n        /**\n         * When active, enables pose (position, quaternion, scale) \n         * and layout (align, origin, size) properties to be used \n         * as transition targets for smooth interpolation.\n         */\n        transitioner: Transitioner\n        updateWorldMatrix(updateParents:boolean, updateChildren:boolean, updateLayout?:boolean) : void\n    }\n}\n\nlet _s = new THREE.Vector3\nTHREE.Object3D.prototype.updateMatrix = function(this:THREE.Object3D) {\n    const {position, quaternion, scale} = this\n    _s.copy(scale) // allow scale of 0 by making it very small\n    if (_s.x === 0) _s.x = 1e-10\n    if (_s.y === 0) _s.y = 1e-10\n    if (_s.z === 0) _s.z = 1e-10\n    this.matrix.compose(position, quaternion, scale)\n}\n\n// modify updateMatrixWorld to rely on updateWorldMatrix method\nTHREE.Object3D.prototype.updateMatrixWorld = function(force) {\n    if (this._inUpdateWorldMatrix) return\n    this.updateWorldMatrix(false, true, true)\n}\n\n// modify Object3D.updateWorldMatrix to apply layout\nTHREE.Object3D.prototype.updateWorldMatrix = function(this:THREE.Object3D, updateParents:boolean, updateChildren:boolean, updateLayout=true) {\n\n    const parent = this.parent\n\n    // update parents\n\n    if ( updateParents === true && parent !== null ) {\n\n        parent.updateWorldMatrix( true, false, true )\n\n    }\n\n    // update without layout\n\n    if ( this.matrixAutoUpdate ) this.updateMatrix()\n\n    if ( this.parent === null ) {\n\n        this.matrixWorld.copy( this.matrix )\n\n    } else {\n\n        this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix )\n\n    }\n\n    // update children without layout\n\n    const children = this.children;\n\n    if ( updateChildren === true ) {\n\n        for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n            children[ i ].updateWorldMatrix( false, true, false )\n\n        }\n    }\n\n    // update and apply layout\n\n    if ( updateLayout === true ) {\n\n        updateChildren && this.layout.invalidateBounds() // only invalidate when traversing down\n        this.layout.updateMatrix()\n        const transitioner = this.transitioner as Transitioner\n        \n        transitioner.matrixLocal.target.multiplyMatrices( this.layout.matrix, this.matrix )\n        const matrixLocal = transitioner.active ? transitioner.matrixLocal.current : transitioner.matrixLocal.target\n\n        if ( parent === null ) {\n            transitioner.matrixWorldTarget.copy(transitioner.matrixLocal.target)\n            this.matrixWorld.copy(matrixLocal)\n        } else {\n            transitioner.matrixWorldTarget.multiplyMatrices( parent.transitioner.matrixWorldTarget, transitioner.matrixLocal.target)\n            this.matrixWorld.multiplyMatrices( parent.matrixWorld, matrixLocal )\n        }\n\n        // update children with layout\n\n        if ( updateChildren === true ) {\n\n            for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n                children[ i ].updateWorldMatrix( false, true, true );\n        \n            }\n\n        }\n\n    }\n    \n    this['_inUpdateWorldMatrix'] = true\n    this.updateMatrixWorld() // some three.js Object3D subclasses have special behavior here\n    this['_inUpdateWorldMatrix'] = false\n\n}\n\n// create a SpatialLayout instance on first access of the `layout` property \nObject.defineProperty(THREE.Object3D.prototype, 'layout', {\n    get: function getLayout(this:THREE.Object3D) {\n        if (this === THREE.Object3D.prototype) return undefined\n        Object.defineProperty(this, 'layout', {\n            value: new Layout(this),\n            writable: true,\n            enumerable: true\n        })\n        return this.layout\n    }\n})\n\n// create a SpatialTransitioner instance on first access of the `transitioner` property \nObject.defineProperty(THREE.Object3D.prototype, 'transitioner', {\n    get: function getTransitioner(this:THREE.Object3D) {\n        if (this === THREE.Object3D.prototype) return undefined\n        Object.defineProperty(this, 'transitioner', {\n            value: new Transitioner(this),\n            writable: true,\n            enumerable: true\n        })\n        return this.transitioner\n    }\n})","import * as THREE from 'three'\nimport { Box3Helper } from 'three'\n\nexport class LayoutHelper extends THREE.Object3D {\n\n    private _transitional = new THREE.Object3D \n    private _transitionalBoxHelper = new Box3Helper(this._transitional.layout.inner)\n    private _target = new THREE.Object3D \n    private _targetBoxHelper = new Box3Helper(this._target.layout.inner)\n\n    constructor() {\n        super()\n        this.add(this._transitional)\n        this._transitional.layout.innerAutoUpdate = false\n        this._transitional.layout.forceBoundsExclusion = true\n        this._transitional.add(this._transitionalBoxHelper)\n        this._transitionalBoxHelper.layout.forceBoundsExclusion = true\n        this.add(this._target)\n        this._target.layout.innerAutoUpdate = false\n        this._target.layout.forceBoundsExclusion = true\n        this._target.add(this._targetBoxHelper)\n        this._targetBoxHelper.layout.forceBoundsExclusion = true\n        ;(this._targetBoxHelper.material as THREE.LineBasicMaterial).color.setStyle('magenta')\n    }\n\n    updateWorldMatrix(parents:boolean, children:boolean, layout?:boolean) {\n        super.updateWorldMatrix(parents, children, layout)\n        if (this.parent) {\n            this._target.layout.inner.copy(this.parent.layout.computedInnerBounds)\n            this._target.matrixWorld.copy(this.parent.transitioner.matrixWorldTarget)\n            this._targetBoxHelper.updateMatrixWorld()\n            this._transitional.layout.inner.copy(this.parent.layout.computedInnerBounds)\n            this._transitional.updateMatrixWorld()\n        }\n    }\n\n}","export abstract class Behavior {\n    object:THREE.Object3D\n    init?(this:Behavior)\n    update?(this:Behavior, deltaTime:number)\n    postUpdate?(this:Behavior, deltaTime:number)\n}","import { Behavior } from './Behavior'\nimport { SpatialMetrics } from '../metrics/SpatialMetrics'\nimport { Transitioner } from '../layout/Transitioner'\n\ntype FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<Required<T>>>\n\n/**\n * When many objects in a scene-graph have behaviors that adapt to the\n * behavior of other objects, it is crucial that these chains of adaptive \n * behavior update in a way that minimizes unecessary scene-graph calculations \n * while also not adapting in the wrong order (which would cause some behaviors\n * to be permanently lagging behind one or more frames as they adapt to stale state). \n * \n * This class supports efficient execution of adaptive behaviors\n * in an optimal order such that all behaviors are adapting to fresh state \n * with minimal traversal of the scene-graph. \n */\nexport class AdaptivityManager {\n\n    private static _getBehaviors = Symbol('getBehaviors')\n\n    private static _didUpdate = Symbol('didUpdate')\n\n    static addBehavior(object:THREE.Object3D, behavior:FunctionProperties<Behavior>|NonNullable<typeof Behavior.prototype.update>) {\n        const behaviors = object[AdaptivityManager._getBehaviors] = object[AdaptivityManager._getBehaviors] || []\n        let b:Behavior\n        if (typeof behavior === 'function') b = {object, update:behavior} \n        else b = <Behavior>behavior\n        b.object = object\n        b.init && b.init()\n        behaviors.push(b)\n    }\n\n    static getBehaviors(object:THREE.Object3D) {\n        return object[AdaptivityManager._getBehaviors] as Behavior[]\n    }\n    \n    static currentScene:THREE.Scene\n    static currentCamera:THREE.Camera\n    static currentDeltaTime:number\n\n    static update(scene:THREE.Scene, camera:THREE.Camera, deltaTime:number) {\n        AdaptivityManager.currentScene = scene\n        AdaptivityManager.currentCamera = camera\n        AdaptivityManager.currentDeltaTime = deltaTime\n        scene.updateWorldMatrix(true, true)\n        AdaptivityManager.ensureUpdate(camera)\n        scene.traverse(AdaptivityManager.ensureUpdate)\n        AdaptivityManager.currentScene = undefined as any\n        AdaptivityManager.currentCamera = undefined as any\n        AdaptivityManager.currentDeltaTime = undefined as any\n        Promise.resolve(scene).then(AdaptivityManager.clearUpdateFlag)\n    }\n\n    static clearUpdateFlag(scene:THREE.Scene) {\n        scene.traverse((obj) => obj[AdaptivityManager._didUpdate] = false)\n    }\n\n    static ensureUpdate(obj:THREE.Object3D) {\n        if (!AdaptivityManager.currentScene) throw new Error('AdaptivityManager.ensureUpdate: must be called inside a Behavior callback')\n        if (obj[AdaptivityManager._didUpdate]) return\n        obj[AdaptivityManager._didUpdate] = true\n        obj.parent && AdaptivityManager.ensureUpdate(obj.parent)\n        const behaviors = AdaptivityManager.getBehaviors(obj)\n        Transitioner.disableAllTransitions = true\n        if (behaviors) for (const b of behaviors) {\n            if (b.update) {\n                b.update(AdaptivityManager.currentDeltaTime!)\n                obj.updateWorldMatrix(false, true)\n            }\n        }\n        Transitioner.disableAllTransitions = false\n        obj.transitioner.update(AdaptivityManager.currentDeltaTime!, false)\n        if (behaviors) for (const b of behaviors) {\n            if (b.postUpdate) {\n                b.postUpdate(AdaptivityManager.currentDeltaTime!)\n                obj.updateWorldMatrix(false, true)\n            }\n        }\n    }\n}","import * as THREE from 'three'\nimport { Behavior } from './Behavior'\nimport { SpatialMetrics, Box3, VisualFrustum } from '../metrics/SpatialMetrics'\nimport { vectors, matrices } from '../utils'\nimport { AdaptivityManager } from './AdaptivityManager'\nimport { Transitionable } from '../layout/Transitioner'\n\n// TODO: take occluder velocity into account, ignore fast moving occluders\n// TODO: clip change threshold to minimize small corrections\n\nexport class AdaptiveClippingBehavior extends Behavior {\n\n    private _boxA = new Box3\n    private _boxB = new Box3\n\n    private _visualFrustum = new VisualFrustum(this.object)\n    private _frustum = new THREE.Frustum()\n    private _line = new THREE.Line3()\n    private _corners = [\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3\n    ]\n    private _newCorners = [\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3,\n        new THREE.Vector3\n    ]\n    private _intersectionCornerMap = new WeakMap<THREE.Vector3, number>()\n    occluders = [] as THREE.Object3D[]\n\n    occluderInfluenceDelay = 0.5\n\n    occlusionTime = new WeakMap<THREE.Object3D, number>()\n\n    update(deltaTime:number) {\n        const object = this.object\n        const clip = object.layout.clip.makeEmpty()\n        const camera = AdaptivityManager.currentCamera\n        const cameraMetrics = SpatialMetrics.get(camera)\n\n        object.updateWorldMatrix(true, true)\n\n        const objectMetrics = SpatialMetrics.get(object)\n        const objectDistance = cameraMetrics.getDistanceOf(object)\n        const objectBounds = this._boxA.copy(object.layout.computedInnerBounds)\n\n        const cameraToObjectMatrix = matrices.get().getInverse(object.matrixWorld).multiply(camera.matrixWorld)        \n        \n        /***\n         * \n         *  First: clip based on viewing frustum\n         * \n         */\n        const corners = this._corners\n        corners[0].set(objectBounds.min.x, objectBounds.min.y, objectBounds.min.z)\n        corners[1].set(objectBounds.min.x, objectBounds.min.y, objectBounds.max.z)\n        corners[2].set(objectBounds.min.x, objectBounds.max.y, objectBounds.min.z)\n        corners[3].set(objectBounds.min.x, objectBounds.max.y, objectBounds.max.z)\n        corners[4].set(objectBounds.max.x, objectBounds.min.y, objectBounds.min.z)\n        corners[5].set(objectBounds.max.x, objectBounds.min.y, objectBounds.max.z)\n        corners[6].set(objectBounds.max.x, objectBounds.max.y, objectBounds.min.z)\n        corners[7].set(objectBounds.max.x, objectBounds.max.y, objectBounds.max.z)\n        const newCorners = this._newCorners\n        for (const [i,corner] of newCorners.entries()) {\n            corner.copy(corners[i])\n            this._intersectionCornerMap.set(corner, i)\n        }\n\n        // 0:right, 1:left, 2:bottom, 3:top, 4:far, 5:near\n        const frustum = this._frustum.setFromMatrix(camera.projectionMatrix)\n        for (const p of frustum.planes) {\n            p.applyMatrix4(cameraToObjectMatrix)\n        }\n\n        const line = this._line\n        const intersectionScratch1 = vectors.get()\n        for (const p of frustum.planes) {\n            for (const [i, corner] of corners.entries()) {\n                if (!frustum.containsPoint(corner)) {\n                    line.end.copy(corner)\n                    line.start.copy(corners[7-i])\n                    const intersection = p.intersectLine(line, intersectionScratch1) \n                    if (intersection) newCorners[i].copy(intersection)\n                }\n            }\n        }\n\n        // const alignPosition = objectBounds.relativeToAbsolute(object.layout.fitAlign, vectors.get())\n        // newCorners.sort((a,b) => {\n        //     // const cornerA = this._intersectionCornerMap.get(a)!\n        //     // const cornerB = this._intersectionCornerMap.get(b)!\n        //     // return corners[cornerB].distanceToSquared(b) - corners[cornerA].distanceToSquared(a)\n        //     return alignPosition.distanceToSquared(b) - alignPosition.distanceToSquared(a)\n        // })\n        \n        clip.min.copy(corners[0])\n        clip.max.copy(corners[7])\n\n        let finalIntersections = [] as number[]\n        for (const i of newCorners) {\n            const corner = this._intersectionCornerMap.get(i)!\n\n            // make sure intersection is not adjacent to any others\n            if (finalIntersections.indexOf(corner) > -1) continue\n            if (i.equals(corners[corner])) continue\n\n            switch (corner) {\n                case 0: clip.min.x = Math.max(i.x, clip.min.x); clip.min.y = Math.max(i.y, clip.min.y); clip.min.z = Math.max(i.z, clip.min.z); break;\n                case 1: clip.min.x = Math.max(i.x, clip.min.x); clip.min.y = Math.max(i.y, clip.min.y); clip.max.z = Math.min(i.z, clip.max.z); break;\n                case 2: clip.min.x = Math.max(i.x, clip.min.x); clip.max.y = Math.min(i.y, clip.max.y); clip.min.z = Math.max(i.z, clip.min.z); break;\n                case 3: clip.min.x = Math.max(i.x, clip.min.x); clip.max.y = Math.min(i.y, clip.max.y); clip.max.z = Math.min(i.z, clip.max.z); break;\n                case 4: clip.max.x = Math.min(i.x, clip.max.x); clip.min.y = Math.max(i.y, clip.min.y); clip.min.z = Math.max(i.z, clip.min.z); break;\n                case 5: clip.max.x = Math.min(i.x, clip.max.x); clip.min.y = Math.max(i.y, clip.min.y); clip.max.z = Math.min(i.z, clip.max.z); break;\n                case 6: clip.max.x = Math.min(i.x, clip.max.x); clip.max.y = Math.min(i.y, clip.max.y); clip.min.z = Math.max(i.z, clip.min.z); break;\n                case 7: clip.max.x = Math.min(i.x, clip.max.x); clip.max.y = Math.min(i.y, clip.max.y); clip.max.z = Math.min(i.z, clip.max.z); break;\n            }\n\n            finalIntersections.push(corner)\n        }\n\n        const newClipSize = objectBounds.getSize(vectors.get())\n        const clipCenter = clip.getCenter(vectors.get())\n        const clipSize = clip.getSize(vectors.get())\n        const epsilon = 1e-6\n        newClipSize.x = (clipSize.x <= epsilon && clipSize.y >= epsilon) ? newClipSize.x : clipSize.x\n        newClipSize.y = (clipSize.y <= epsilon && clipSize.x >= epsilon) ? newClipSize.y : clipSize.y\n        newClipSize.z = (clipSize.z <= epsilon) ? newClipSize.z : clipSize.z\n        if (clipSize.x <= epsilon && clipSize.y <= epsilon && clipSize.z <= epsilon) {\n            objectBounds.getCenter(clipCenter)\n            objectBounds.getSize(newClipSize)\n        }\n        clip.setFromCenterAndSize(clipCenter, newClipSize)\n\n        /***\n         * \n         *  Second: clip based on occluders\n         * \n         */\n\n        objectBounds.min.z = -Infinity\n        objectBounds.max.z = Infinity\n        const objectBoundsSize = objectBounds.getSize(vectors.get())\n\n        // for each occluder, need to crop the layout by at most \n        // a single cut that minimizes the lost space \n        for (let i = 0; i < this.occluders.length; i++) {\n            const occluder = this.occluders[i]\n\n            // todo: add priority rule to allow adaptation to background (rather than foreground) objects\n            const occluderDistance = cameraMetrics.getDistanceOf(occluder)\n            if (occluderDistance > objectDistance) {\n                this.occlusionTime.set(occluder, 0)\n                continue\n            }\n\n            // make sure potential occluder behaviors have already executed\n            AdaptivityManager.ensureUpdate(occluder)\n\n            const occluderBounds = objectMetrics.getBoundsOf(occluder, this._boxB)\n            occluderBounds.min.z = -Infinity\n            occluderBounds.max.z = Infinity\n\n            if (!objectBounds.intersectsBox(occluderBounds)) {\n                this.occlusionTime.set(occluder, 0)\n                continue\n            }\n\n            let occlusionTime = (this.occlusionTime.get(occluder) || 0) + deltaTime\n            this.occlusionTime.set(occluder, occlusionTime)\n\n            if (occlusionTime < this.occluderInfluenceDelay) {\n                continue\n            }\n            \n            const leftClipSpan = occluderBounds.max.x - objectBounds.min.x\n            const rightClipSpan = objectBounds.max.x - occluderBounds.min.x\n            const bottomClipSpan = occluderBounds.max.y - objectBounds.min.y\n            const topClipSpan = objectBounds.max.y - occluderBounds.min.y\n            const leftArea = leftClipSpan * objectBoundsSize.y\n            const rightArea = rightClipSpan * objectBoundsSize.y\n            const bottomArea = bottomClipSpan * objectBoundsSize.x\n            const topArea = topClipSpan * objectBoundsSize.x\n            \n            if (leftArea < rightArea && leftArea < bottomArea && leftArea < topArea) {\n                clip.min.x = isFinite(clip.min.x) ? Math.max(occluderBounds.max.x, clip.min.x) : occluderBounds.max.x\n            } else if (rightArea < leftArea && rightArea < bottomArea && rightArea < topArea) {\n                clip.max.x = isFinite(clip.max.x) ? Math.min(occluderBounds.min.x, clip.max.x) : occluderBounds.min.x\n            } else if (topArea < rightArea && topArea < bottomArea && topArea < leftArea) {\n                clip.max.y = isFinite(clip.max.y) ? Math.min(occluderBounds.min.y, clip.max.y) : occluderBounds.min.y\n            } else {\n                clip.min.y = isFinite(clip.min.y) ? Math.max(occluderBounds.max.y, clip.min.y) : occluderBounds.max.y\n            }\n        }\n\n        \n\n    }\n\n    postUpdate() {\n        // this.object.layout.clip.copy(this.clipTarget.current)\n        // this.object.updateWorldMatrix(true, true)\n    }\n}"],"names":["V_00","Object","freeze","THREE","V_11","V_000","V_100","V_010","V_001","V_111","Q_IDENTITY","const","next","Promise","resolve","Pool","constructor","_factory","_reset","Set","_nextAutoPool","undefined","_poolAll","get","object","_pool","pop","_unpooled","add","then","_autoPool","pool","o","push","delete","size","vectors2","vec","set","vectors","vectors4","quaternions","quat","matrices3","mat","identity","matrices","traverse","each","bind","call","children","let","child","Visible","Deleted","v1","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","assign","prototype","setFromPoints","points","Array","isArray","console","error","length","makeEmpty","i","l","VertexNode","compute","setFromObject","updateMatrixWorld","node","point","geometry","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","attributes","position","count","fromBufferAttribute","containsPoint","face","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","vertex","outside","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","end","removeSubList","prev","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distance","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","mark","computeExtremes","minVertices","maxVertices","j","copy","getComponent","setComponent","Number","EPSILON","abs","x","y","z","computeInitialHull","line3","plane","closestPoint","extremes","v0","v2","v3","index","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","edge","twinEdge","twin","oppositeFace","addAdjoiningFace","horizonEdge","tail","head","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","midpoint","area","constant","a","b","c","e0","HalfEdge","e1","e2","triangle","getNormal","getMidpoint","getArea","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","quickHull","addAttribute","SimplifyModifier","cb","ab","pushIfUnique","array","indexOf","removeFromArray","k","splice","computeEdgeCollapseCost","u","v","edgelength","curvature","sideFaces","il","sideFace","hasVertex","minCurvature","dotProd","borders","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","n","removeFace","f","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","computeNormal","addUniqueNeighbor","vA","vB","vC","subVectors","cross","normalize","oldv","newv","Vertex","id","offset","modify","oldVertices","oldFaces","log","simplifiedGeometry","setIndex","SimplifiedHull","maxPoints","bufferGeometry","type","normalGeometry","hulls","modifier","hull","simplified","WeakMap","Box3","SpatialMetrics","objectFilter","_onObjectTraverse","_objectExpandFunction","objectExpansion","expandByObjectGeometry","expandByObjectHull","expandByObjectBox","vector","_vector","mesh","updateWorldMatrix","_getCoordinateSystemTransform","expandByPoint","getAttribute","itemSize","getX","getY","getZ","box","_box","boundingBox","computeBoundingBox","union","mat4","_mat4","coordinateSystem","getInverse","transitioner","matrixWorldTarget","multiply","relativeToAbsolute","relativePosition","out","center","_center","_size","getCenter","getSize","multiplyScalar","absoluteToRelative","absolutePosition","sub","divide","isFinite","rotateY180","setFromAxisAngle","PI","VisualFrustum","left","leftClamped","minClamped","top","topClamped","maxClamped","right","rightClamped","bottom","bottomClamped","near","nearClamped","far","farClamped","horizontal","horizontalClamped","vertical","verticalClamped","depth","depthClamped","diagonal","minDirection","getCartesianForSphericalDirection","maxDirection","angleTo","RAD2DEG","diagonalClamped","getClampedCenter","getClampedSize","getPositionForOffset","getClampedPositionForOffset","setFromPerspectiveProjectionMatrix","projectionMatrix","inverseProjection","_applyClamping","m","isMesh","vertexPosition","_vec3","localToReferenceFrame","metrics","vertexVisualPosition","getVisualPositionForCartesianPosition","_boxPoints","p","minClamp","maxClamp","_metrics","has","sphericalDirection","visualElevationRadians","DEG2RAD","visualAzimuthRadians","sin","cos","getSphericalDirectionForCartesian","cartesian","asin","atan2","getSphericalPositionForCartesian","getCartesianForSphericalPosition","sphericalPosition","visualDirection","getMatrixWorld","matrixWorldGetter","getCartesianForVisualDirection","isCamera","applyQuaternion","getVisualDirectionForCartesian","cartesianPosition","getCartesianForVisualPosition","visualPosition","getPositionOf","setFromMatrixPosition","invMatrixWorld","getDistanceOf","result","getDirectionOf","lengthSq","getWorldDirectionOf","transformDirection","getClosestOrthogonalOrientationOf","viewToObjectMat","extractRotation","orientation","setFromRotationMatrix","forwardDirection","upDirection","distForward","distUp","closestForwardDirection","closestUpDirection","directions","dir","dist","lookAt","getOrientationOf","rotMat","targetWorldOrientation","inverseThisWorldOrientation","inverse","multiplyQuaternions","getVisualDirectionOf","getVisualAngleOf","getBoundsOf","getVisualFrustumOf","_visualFrustum","camera","getVisualOffsetOf","layout","isBoundingContext","LayoutFit","contain","contain3d","cover","cover3d","fill","fill3d","scratchV_1","scratchV_2","scratchV_3","scratchV_4","scratchV_5","scratchV_6","scratchV_7","scratchMat_1","Layout","computedInnerBounds","fit","_fit","fitTargets","prototypeAccessors","invalidateBounds","_boundsValid","resetLayout","absolute","relative","resetPose","setScalar","quaternion","scale","reset","isPassive","forceBoundsExclusion","updateMatrix","bounds","computedBounds","matrix","updateInnerBounds","updateOuterBounds","computedOuterBounds","clip","clipMax","clipMin","minSize","minRelativeSize","minAbsoluteSize","innerSize","layoutScale","adjustScaleForFit","finalSize","multiplyVectors","orient","makeRotationFromQuaternion","halfFinalSize","divideScalar","layoutAlignOffset","fitAlign","innerAlignOffset","layoutPosition","compose","inner","parentBounds","parent","cameraParent","projectionMatrixInverse","projectionZ","sizeScale","fitScale","_fitScale","clamp","ax","ay","az","lerp","easing","e","defined","obj","TransitionTarget","value","duration","scratchV2","scratchP_1","scratchP_2","scratchP_3","scratchQ_1","scratchQ_2","scratchQ_3","scratchS_1","scratchS_2","scratchS_3","scratchMat_2","Transitionable","config","current","update","deltaTime","changePercent","_updateConfig","queue","targetQueue","_changePercent","_computePercentChange","multiplier","threshold","_delayTime","delay","committedTarget","_debounceTime","_waitTime","debounce","maxWait","elapsed","shift","_setCurrent","previousTarget","_addTargetInfluence","alpha","s","pos","decompose","sPos","sQuat","sScale","tPos","tQuat","tScale","slerp","amount","_c","_cBlack","minAmount","maxAmount","range","ePos","eQuat","eScale","posPercent","equals","quatPercent","scalePercent","percent","r","g","minPercent","maxPercent","_config","Transitioner","DEFAULT_CONFIG","LocalMatrixTransitionable","autoRange","synchronizeComponents","matrixLocal","active","_active","disableAllTransitions","transitionable","customTransitionables","autoActive","_setPropertyAtPath","_setParent","path","parentTarget","originalMatrixWorld","inverseParentMatrixWorld","easeInOut","curr","separator","self","properties","split","reduce","lastPropertKey","property","THREE.Box3","THREE.Vector3","THREE.Mesh","THREE.Matrix4","xyzFields","THREE.BufferAttribute","THREE.LineBasicMaterial","THREE.Box3Helper","THREE.Ray","computeBoundsTree","disposeBoundsTree","raycast","acceleratedRaycast","_s","force","_inUpdateWorldMatrix","updateParents","updateChildren","updateLayout","matrixAutoUpdate","multiplyMatrices","defineProperty","getLayout","writable","enumerable","getTransitioner","LayoutHelper","Box3Helper","_transitional","_target","innerAutoUpdate","_transitionalBoxHelper","_targetBoxHelper","material","color","setStyle","parents","Behavior","AdaptivityManager","addBehavior","behavior","behaviors","_getBehaviors","init","getBehaviors","scene","currentScene","currentCamera","currentDeltaTime","ensureUpdate","clearUpdateFlag","_didUpdate","Error","postUpdate","Symbol","AdaptiveClippingBehavior","cameraMetrics","objectMetrics","objectDistance","objectBounds","_boxA","cameraToObjectMatrix","corners","_corners","newCorners","_newCorners","entries","corner","_intersectionCornerMap","frustum","_frustum","setFromMatrix","planes","line","_line","intersectionScratch1","intersection","intersectLine","finalIntersections","newClipSize","clipCenter","clipSize","epsilon","setFromCenterAndSize","objectBoundsSize","occluders","occluder","occluderDistance","occlusionTime","occluderBounds","_boxB","intersectsBox","occluderInfluenceDelay","leftClipSpan","rightClipSpan","bottomClipSpan","topClipSpan","leftArea","rightArea","bottomArea","topArea"],"mappings":"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"}